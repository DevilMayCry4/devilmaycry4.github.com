{"Asset":[{"_id":"source/img/openfire1.png","path":"img/openfire1.png","modified":false},{"_id":"source/img/openfire2.png","path":"img/openfire2.png","modified":false},{"_id":"source/img/pdf1.png","path":"img/pdf1.png","modified":false},{"_id":"source/img/pdf2.png","path":"img/pdf2.png","modified":false},{"_id":"source/img/pdf3.png","path":"img/pdf3.png","modified":false},{"_id":"source/img/2048/favicon.ico","path":"img/2048/favicon.ico","modified":false},{"_id":"source/img/2048/js/animframe_polyfill.js","path":"img/2048/js/animframe_polyfill.js","modified":false},{"_id":"source/img/2048/js/application.js","path":"img/2048/js/application.js","modified":false},{"_id":"source/img/2048/js/game_manager.js","path":"img/2048/js/game_manager.js","modified":false},{"_id":"source/img/2048/js/grid.js","path":"img/2048/js/grid.js","modified":false},{"_id":"source/img/2048/js/html_actuator.js","path":"img/2048/js/html_actuator.js","modified":false},{"_id":"source/img/2048/js/keyboard_input_manager.js","path":"img/2048/js/keyboard_input_manager.js","modified":false},{"_id":"source/img/2048/js/local_score_manager.js","path":"img/2048/js/local_score_manager.js","modified":false},{"_id":"source/img/2048/js/tile.js","path":"img/2048/js/tile.js","modified":false},{"_id":"source/img/2048/meta/apple-touch-icon.png","path":"img/2048/meta/apple-touch-icon.png","modified":false},{"_id":"source/img/2048/style/1024.jpg","path":"img/2048/style/1024.jpg","modified":false},{"_id":"source/img/2048/style/2048.jpg","path":"img/2048/style/2048.jpg","modified":false},{"_id":"source/img/2048/style/main.css","path":"img/2048/style/main.css","modified":false},{"_id":"source/img/2048/full/favicon.ico","path":"img/2048/full/favicon.ico","modified":false},{"_id":"source/img/2048/full/js/animframe_polyfill.js","path":"img/2048/full/js/animframe_polyfill.js","modified":false},{"_id":"source/img/2048/full/js/application.js","path":"img/2048/full/js/application.js","modified":false},{"_id":"source/img/2048/full/js/game_manager.js","path":"img/2048/full/js/game_manager.js","modified":false},{"_id":"source/img/2048/full/js/grid.js","path":"img/2048/full/js/grid.js","modified":false},{"_id":"source/img/2048/full/js/html_actuator.js","path":"img/2048/full/js/html_actuator.js","modified":false},{"_id":"source/img/2048/full/js/keyboard_input_manager.js","path":"img/2048/full/js/keyboard_input_manager.js","modified":false},{"_id":"source/img/2048/full/js/local_score_manager.js","path":"img/2048/full/js/local_score_manager.js","modified":false},{"_id":"source/img/2048/full/js/tile.js","path":"img/2048/full/js/tile.js","modified":false},{"_id":"source/img/2048/full/meta/apple-touch-icon.png","path":"img/2048/full/meta/apple-touch-icon.png","modified":false},{"_id":"source/img/2048/full/style/131072.jpg","path":"img/2048/full/style/131072.jpg","modified":false},{"_id":"source/img/2048/full/style/65536.jpg","path":"img/2048/full/style/65536.jpg","modified":false},{"_id":"source/img/2048/full/style/main.css","path":"img/2048/full/style/main.css","modified":false},{"_id":"themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/light/source/js/gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes/light/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":false}],"Cache":[{"_id":"scaffolds/page.md","mtime":1416373854000},{"_id":"scaffolds/photo.md","mtime":1416373854000},{"_id":"scaffolds/post.md","mtime":1416373854000},{"_id":"themes/light/LICENSE","mtime":1416375771000},{"_id":"themes/light/README.md","mtime":1416375771000},{"_id":"themes/light/_config.yml","mtime":1416375771000},{"_id":"themes/light/languages/de.yml","mtime":1416375771000},{"_id":"themes/light/languages/default.yml","mtime":1416375771000},{"_id":"themes/light/languages/ru.yml","mtime":1416375771000},{"_id":"themes/light/languages/zh-CN.yml","mtime":1416375771000},{"_id":"themes/light/languages/zh-TW.yml","mtime":1416375771000},{"_id":"themes/light/layout/archive.ejs","mtime":1416375771000},{"_id":"themes/light/layout/category.ejs","mtime":1416375771000},{"_id":"themes/light/layout/index.ejs","mtime":1416375771000},{"_id":"themes/light/layout/layout.ejs","mtime":1416375771000},{"_id":"themes/light/layout/page.ejs","mtime":1416375771000},{"_id":"themes/light/layout/post.ejs","mtime":1416375771000},{"_id":"themes/light/layout/tag.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_widget/category.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_widget/recent_posts.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_widget/search.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_widget/tag.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_widget/tagcloud.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/after_footer.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/archive.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/article.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/comment.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/footer.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/google_analytics.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/head.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/header.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/pagination.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/sidebar.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/post/category.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/post/gallery.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/post/share.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/post/tag.ejs","mtime":1416375771000},{"_id":"themes/light/layout/_partial/post/title.ejs","mtime":1416375771000},{"_id":"themes/light/source/fancybox/blank.gif","mtime":1416375771000},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","mtime":1416375771000},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","mtime":1416375771000},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","mtime":1416375771000},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","mtime":1416375771000},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","mtime":1416375771000},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","mtime":1416375771000},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","mtime":1416375771000},{"_id":"themes/light/source/js/gallery.js","mtime":1416375771000},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","mtime":1416375771000},{"_id":"themes/light/source/css/style.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_base/layout.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_base/utils.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_base/variable.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/archive.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/article.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/comment.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/footer.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/header.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/index.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/sidebar.styl","mtime":1416375771000},{"_id":"themes/light/source/css/_partial/syntax.styl","mtime":1416375771000},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","mtime":1416375771000},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","mtime":1416375771000},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","mtime":1416375771000},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","mtime":1416375771000},{"_id":"source/_posts/IOS/1080后环境变量.md","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-21-google-di-tu-de-lu-xian-huo-qu-he-jie-xi.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-21-ios-diao-yong-di-san-fang-appda-kai-wen-jian.markdown","mtime":1416378335000},{"_id":"source/_posts/IOS/2013-04-21-ios-jian-ce-er-ji-cha-ru.markdown","mtime":1416378348000},{"_id":"source/_posts/IOS/2013-04-21-ios5-mo-ni-qi-bug-cfxpreferencessearchlistsource-trylock.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-21-libxml-slash-tree-dot-hnot-found.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-chang-yong-dai-ma.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-grand-central-dispatch.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-intxing-zhuan-hua-wei-nsdata.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-ioshuo-qu-dan-wen-jian-de-da-xiao.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-iosshe-bei-huo-qu-ben-ji-ipdi-zhi.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-nstimershi-fang.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-nsuserdefaults-standarduserdefaultszhu-yi-shi-xiang.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-she-uiimagewei-backgroundcolor.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-svn-shang-chuan-dot-awen-jian.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-tong-guo-diao-yong-urltiao-zhuan-dao-xiang-ying-de-she-zhi-ye-mian.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-uiviewcontroller-zai-uinavigationcontroller-zhong-,dang-uinavigationbarchu-xian-hou-de-bian-hua.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-22-zheng-que-chu-li-memory-waring.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-23-ios-4chu-shi-hua-han-shu-de-guan-xi.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-23-pdfnei-rong-liu-jie-xi.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-24-cgpdfbox.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-26-air-print.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-26-xcode-bu-jin-c-plus-plus-duan-dian.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-04-27-ios-zhi-zuo-jing-tai-ku.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-06-arc.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-14-xi-tong-uiben-di-hua.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-22-ftpwen-jian-lei-xing.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-24-hou-tai-qing-qiu-duo-xie-shi-jian.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-24-ya-suo-shi-pin.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-29-shan-chu-mu-lu-xia-suo-you-svnwen-jian-ming-ling-xing.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-29-zhi-yun-xing-[?]-ci-de-dai-ma.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-05-30-svnshang-chuan-gong-cheng.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-04-gong-cheng-zhong-ming-ming.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-06-dan-li-de-shu-xing.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-07-time-out-waiting-for-app-to-launch.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-07-uiimag-scale.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-17-line-with-arrow.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-17-nstimerde-shi-yong.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-18-xcode-zhu-ti-wen-jian-jia.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-20-block.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-20-yin-ying-xiao-lu.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-25-test-install.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-06-26-catalogtian-jia-shu-xing.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-07-01-xcode-debug.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-07-04-http-code.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-07-05-dian-ji-ding-bu-zhuang-tai-lan-,-gun-dong-dao-ding-bu.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/2013-07-25-gei-mu-lu-xia-de-suo-you-wen-jian-tian-jia-qian-zhui.markdown","mtime":1416373854000},{"_id":"source/_posts/IOS/block-内存.md","mtime":1416373854000},{"_id":"source/_posts/IOS/ios7-tips.md","mtime":1416373854000},{"_id":"source/_posts/IOS/nscoding.md","mtime":1416373854000},{"_id":"source/_posts/IOS/nslayoutconstraint.md","mtime":1416373854000},{"_id":"source/_posts/IOS/openfire.md","mtime":1416373854000},{"_id":"source/_posts/IOS/runtime.md","mtime":1416373854000},{"_id":"source/_posts/IOS/thread-safety.md","mtime":1416373854000},{"_id":"source/_posts/IOS/uiimageview不调用drawatrect.md","mtime":1416373854000},{"_id":"source/_posts/IOS/uitabbaritem-定制.md","mtime":1416373854000},{"_id":"source/_posts/IOS/xcode-使用git.md","mtime":1416373854000},{"_id":"source/_posts/IOS/xcode使用github.md","mtime":1416373854000},{"_id":"source/_posts/IOS/使用adobe-acrobat-pro查看pdf的文件结构.md","mtime":1416373854000},{"_id":"source/_posts/IOS/多参数函数.md","mtime":1416373854000},{"_id":"source/_posts/IOS/添加字体.md","mtime":1416373854000},{"_id":"source/_posts/OSX/2013-04-21-githubda-jian-zi-ji-de-bo-ke.markdown","mtime":1416373854000},{"_id":"source/_posts/Other/2013-04-24-jin-ru-google-dot-com.markdown","mtime":1416373854000},{"_id":"source/_posts/Other/2013-05-29-python-qu-diao-at-2xjiao-ben.markdown","mtime":1416373854000},{"_id":"source/_posts/Other/2013-05-29-pythongei-pngwen-jian-tian-jia-at-2x.markdown","mtime":1416373854000},{"_id":"source/_posts/Other/2013-06-18-wifi.markdown","mtime":1416373854000},{"_id":"source/_posts/WindowsPhone/2013-04-21-mac-xu-ni-ji-da-jian-wp8kai-fa-huan-jing.markdown","mtime":1416373854000},{"_id":"source/_posts/WindowsPhone/2013-04-25-c-number-jie-kou.markdown","mtime":1416373854000},{"_id":"source/_posts/WindowsPhone/2013-04-26-c-number-abstracegen-virtuade-qu-bie.markdown","mtime":1416373854000},{"_id":"source/_posts/WindowsPhone/2013-04-28-c-number-delegatehe-event.markdown","mtime":1416373854000},{"_id":"source/_posts/WindowsPhone/2013-05-06-c-number-shu-chu-ri-zhi.markdown","mtime":1416373854000},{"_id":"source/img/openfire1.png","mtime":1416373854000},{"_id":"source/img/openfire2.png","mtime":1416373854000},{"_id":"source/img/pdf1.png","mtime":1416373854000},{"_id":"source/img/pdf2.png","mtime":1416373854000},{"_id":"source/img/pdf3.png","mtime":1416373854000},{"_id":"source/img/2048/favicon.ico","mtime":1416373854000},{"_id":"source/img/2048/index.html","mtime":1416373854000},{"_id":"source/img/2048/js/animframe_polyfill.js","mtime":1416373854000},{"_id":"source/img/2048/js/application.js","mtime":1416373854000},{"_id":"source/img/2048/js/game_manager.js","mtime":1416373854000},{"_id":"source/img/2048/js/grid.js","mtime":1416373854000},{"_id":"source/img/2048/js/html_actuator.js","mtime":1416373854000},{"_id":"source/img/2048/js/keyboard_input_manager.js","mtime":1416373854000},{"_id":"source/img/2048/js/local_score_manager.js","mtime":1416373854000},{"_id":"source/img/2048/js/tile.js","mtime":1416373854000},{"_id":"source/img/2048/meta/apple-touch-icon.png","mtime":1416373854000},{"_id":"source/img/2048/style/1024.jpg","mtime":1416373854000},{"_id":"source/img/2048/style/2048.jpg","mtime":1416373854000},{"_id":"source/img/2048/style/main.css","mtime":1416373854000},{"_id":"source/img/2048/full/favicon.ico","mtime":1416373854000},{"_id":"source/img/2048/full/index.html","mtime":1416373854000},{"_id":"source/img/2048/full/js/animframe_polyfill.js","mtime":1416373854000},{"_id":"source/img/2048/full/js/application.js","mtime":1416373854000},{"_id":"source/img/2048/full/js/game_manager.js","mtime":1416373854000},{"_id":"source/img/2048/full/js/grid.js","mtime":1416373854000},{"_id":"source/img/2048/full/js/html_actuator.js","mtime":1416373854000},{"_id":"source/img/2048/full/js/keyboard_input_manager.js","mtime":1416373854000},{"_id":"source/img/2048/full/js/local_score_manager.js","mtime":1416373854000},{"_id":"source/img/2048/full/js/tile.js","mtime":1416373854000},{"_id":"source/img/2048/full/meta/apple-touch-icon.png","mtime":1416373854000},{"_id":"source/img/2048/full/style/131072.jpg","mtime":1416373854000},{"_id":"source/img/2048/full/style/65536.jpg","mtime":1416373854000},{"_id":"source/img/2048/full/style/main.css","mtime":1416373854000},{"_id":"source/_posts/使用python编译ipa，并上传到FTP.md","mtime":1416376872000},{"_id":"themes/light/languages/es.yml","mtime":1416375771000},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","mtime":1416375771000}],"Category":[{"name":"IOS","_id":"zbxxrq8bpowmj9w3","posts":["zjqeq17wlyrj1z7x","yslto22si8pc7514","b2miwc80nmmda9q7","jtbvfc89kyrceqvp","dptebojkmk1zvmxj","jevwv0fsio0ge74p","ochog3u6u5ff0el8","9juiwqoqs18xaa8o","kdgxmydyi77b4m03","lvxo8xcinamh0po6","s6xgi0frbg3iyc45","ij80nxmq3ohmits7","hvgnnfozms67kkou","3gc44iytu3ej9anw","sc72ujlfp690u5pn","iwl1yntsrs1wik3z","8muoxryv28pb2mjh","e3iu6607k5kqs01g","qfyha3qx6n9yonzz","sg2e051wgxrlm52t","43apl1w2ywuzjbfb","c6du1bg1ha1cv6p3","xlpd2qy1p9k2l0jb","qehdnazlfnh43ul7","g1uoemn5qy0ibobn","szf71yh0rylki0op","nq4ocav6xajdt42p","ehcwt4uok9hwscjb","1u1mhv6th98oom1i","t5tqsah00jph58ti","onm8d8e35p9uc10n","sc6ij090769pztdm","slucqks9u2mvlzj9","wgaifg55d7lsr5n0","v4gbryuajv1me4wo","gldhtwrftt8z3sw0","fom78jajnjpo68yv","jjnh86hxhc9zk61b","zq4mseas6gza5dp6","aiylbnpv9lwxtijh","8mmgkec6iltr0s16","xdl91cofrh1vpxbb","5qnjx94t4qhukak6","xtlxuq1llcz7o9tr"]},{"name":"OSX","_id":"vus43xjcy0td8m28","posts":["y7nghfayosme496b"]},{"name":"Other","_id":"a23y7an31iknjy7n","posts":["ka1vijrx1g468n8k","6f0ig9hxbysy69fm","3lrr5t62b876fvod","69bmfpuc74nwkmfa"]},{"name":"windowsphone","_id":"c9ovoo03cf11bsnn","posts":["ecsu2ga6ikzp3z53","oxe22kvwqlifsk4t","i7vuujdjsiii9g3q","sw23fsim55zg5vi3","ao5zx87knwkrxcdk"]}],"Page":[{"content":"\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>2048</title>\n\n  <link href=\"style/main.css\" rel=\"stylesheet\" type=\"text/css\">\n  <link rel=\"shortcut icon\" href=\"favicon.ico\">\n  <link rel=\"apple-touch-icon\" href=\"meta/apple-touch-icon.png\">\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n  <meta name=\"HandheldFriendly\" content=\"True\">\n  <meta name=\"MobileOptimized\" content=\"320\">\n  <meta name=\"viewport\" content=\"width=device-width, target-densitydpi=160dpi, initial-scale=1.0, maximum-scale=1, user-scalable=no, minimal-ui\">\n\n  <meta property=\"og:title\" content=\"2048 game\">\n  <meta property=\"og:site_name\" content=\"2048 game\">\n</head>\n<body>\n  <div class=\"container\">\n<p class=\"game-explanation\">\n    看到好多网友吐槽汉之后就是唐了这不科学，补做了一个“完整一些的版本” <a href=\"http://oprilzeng.github.io/2048/full/\" target=\"_blank\" rel=\"external\">http://oprilzeng.github.io/2048/full/</a> ，大家倒是来试试呀.. 通往天朝的道路又远了好几步吧:P</p>\n    <hr>\n    <p>\n    <strong class=\"important\">Note:</strong> This is a fork from <a href=\"http://gabrielecirulli.github.io/2048\" target=\"_blank\" rel=\"external\">http://gabrielecirulli.github.io/2048</a> created by <a href=\"http://gabrielecirulli.com\" target=\"_blank\">Gabriele Cirulli.</a>    </p>\n<br>鉴于这个版本火得太莫名其妙了，我还是把<strong>这句话↑</strong>搬到上面来吧...本网页也只是2048的众多恶搞改编版中的一个。<br>想donate的话欢迎戳链接去捐助给2048原作者。\n    <hr>\n    <div class=\"heading\">\n      <h1 class=\"title\">PRC</h1>\n      <div class=\"scores-container\">\n        <div class=\"score-container\">0</div>\n        <div class=\"best-container\">0</div>\n      </div>\n    </div>\n    <p class=\"game-intro\">合并方块，努力到达 <strong>PRC</strong> 时代吧！</p>\n    <div class=\"game-container\">\n      <div class=\"game-message\">\n        <p></p>\n        <div class=\"lower\">\n          <a class=\"retry-button\">Try again</a>\n          <div class=\"score-sharing\"></div>\n        </div>\n      </div>\n\n      <div class=\"grid-container\">\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n      </div>\n\n      <div class=\"tile-container\">\n\n      </div>\n    </div>\n\n    <p class=\"game-explanation\">\n      <strong class=\"important\">规则:</strong> 使用 <strong>上下左右键</strong> 移动方块（触屏设备请直接滑动手指），相同的两个朝代合并后会变成 <strong>更新的一个</strong>。\n    </p>\n    <hr>\n    <p>\n    我真的就是改了个字而已，别的什么都没改...<br>那个..从我这里扒源码的麻烦<strong>把统计部分的代码去掉</strong>好不.. /抠鼻<br>商->周->秦->汉->唐->宋->元->明->清->ROC->PRC，<br>因为是按2 - 2^11的坑填的所以跳过了若干~<br>by <a href=\"http://weibo.com/compileerror\" target=\"_blank\">Opril Zeng</a></p>\n  </div>\n\n  <script src=\"js/animframe_polyfill.js\"></script>\n  <script src=\"js/keyboard_input_manager.js\"></script>\n  <script src=\"js/html_actuator.js\"></script>\n  <script src=\"js/grid.js\"></script>\n  <script src=\"js/tile.js\"></script>\n  <script src=\"js/local_score_manager.js\"></script>\n  <script src=\"js/game_manager.js\"></script>\n  <script src=\"js/application.js\"></script>\n\n<script type=\"text/javascript\">\nvar _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\ndocument.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3F0e3c8d0a687bea8b39440e15b88cb974' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n\n\n\n</body>\n</html>\n","source":"img/2048/index.html","raw":"\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>2048</title>\n\n  <link href=\"style/main.css\" rel=\"stylesheet\" type=\"text/css\">\n  <link rel=\"shortcut icon\" href=\"favicon.ico\">\n  <link rel=\"apple-touch-icon\" href=\"meta/apple-touch-icon.png\">\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n  <meta name=\"HandheldFriendly\" content=\"True\">\n  <meta name=\"MobileOptimized\" content=\"320\">\n  <meta name=\"viewport\" content=\"width=device-width, target-densitydpi=160dpi, initial-scale=1.0, maximum-scale=1, user-scalable=no, minimal-ui\">\n\n  <meta property=\"og:title\" content=\"2048 game\"/>\n  <meta property=\"og:site_name\" content=\"2048 game\"/>\n</head>\n<body>\n  <div class=\"container\">\n<p class=\"game-explanation\">\n    看到好多网友吐槽汉之后就是唐了这不科学，补做了一个“完整一些的版本” <a href=\"http://oprilzeng.github.io/2048/full/\">http://oprilzeng.github.io/2048/full/</a> ，大家倒是来试试呀.. 通往天朝的道路又远了好几步吧:P</p>\n    <hr>\n    <p>\n    <strong class=\"important\">Note:</strong> This is a fork from <a href=\"http://gabrielecirulli.github.io/2048\">http://gabrielecirulli.github.io/2048</a> created by <a href=\"http://gabrielecirulli.com\" target=\"_blank\">Gabriele Cirulli.</a>    </p>\n<br>鉴于这个版本火得太莫名其妙了，我还是把<strong>这句话↑</strong>搬到上面来吧...本网页也只是2048的众多恶搞改编版中的一个。<br>想donate的话欢迎戳链接去捐助给2048原作者。\n    <hr>\n    <div class=\"heading\">\n      <h1 class=\"title\">PRC</h1>\n      <div class=\"scores-container\">\n        <div class=\"score-container\">0</div>\n        <div class=\"best-container\">0</div>\n      </div>\n    </div>\n    <p class=\"game-intro\">合并方块，努力到达 <strong>PRC</strong> 时代吧！</p>\n    <div class=\"game-container\">\n      <div class=\"game-message\">\n        <p></p>\n        <div class=\"lower\">\n          <a class=\"retry-button\">Try again</a>\n          <div class=\"score-sharing\"></div>\n        </div>\n      </div>\n\n      <div class=\"grid-container\">\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n      </div>\n\n      <div class=\"tile-container\">\n\n      </div>\n    </div>\n\n    <p class=\"game-explanation\">\n      <strong class=\"important\">规则:</strong> 使用 <strong>上下左右键</strong> 移动方块（触屏设备请直接滑动手指），相同的两个朝代合并后会变成 <strong>更新的一个</strong>。\n    </p>\n    <hr>\n    <p>\n    我真的就是改了个字而已，别的什么都没改...<br>那个..从我这里扒源码的麻烦<strong>把统计部分的代码去掉</strong>好不.. /抠鼻<br>商->周->秦->汉->唐->宋->元->明->清->ROC->PRC，<br>因为是按2 - 2^11的坑填的所以跳过了若干~<br>by <a href=\"http://weibo.com/compileerror\" target=\"_blank\">Opril Zeng</a></p>\n  </div>\n\n  <script src=\"js/animframe_polyfill.js\"></script>\n  <script src=\"js/keyboard_input_manager.js\"></script>\n  <script src=\"js/html_actuator.js\"></script>\n  <script src=\"js/grid.js\"></script>\n  <script src=\"js/tile.js\"></script>\n  <script src=\"js/local_score_manager.js\"></script>\n  <script src=\"js/game_manager.js\"></script>\n  <script src=\"js/application.js\"></script>\n\n<script type=\"text/javascript\">\nvar _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\ndocument.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3F0e3c8d0a687bea8b39440e15b88cb974' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n\n\n\n</body>\n</html>\n","date":1416373854000,"updated":1416373854000,"path":"img/2048/index.html","excerpt":"","_id":"hd4y3kkryj8ogiih","title":"","comments":true,"layout":"page"},{"content":"\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>2048</title>\n\n  <link href=\"style/main.css\" rel=\"stylesheet\" type=\"text/css\">\n  <link rel=\"shortcut icon\" href=\"favicon.ico\">\n  <link rel=\"apple-touch-icon\" href=\"meta/apple-touch-icon.png\">\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n  <meta name=\"HandheldFriendly\" content=\"True\">\n  <meta name=\"MobileOptimized\" content=\"320\">\n  <meta name=\"viewport\" content=\"width=device-width, target-densitydpi=160dpi, initial-scale=1.0, maximum-scale=1, user-scalable=no, minimal-ui\">\n\n  <meta property=\"og:title\" content=\"2048 game\">\n  <meta property=\"og:site_name\" content=\"2048 game\">\n</head>\n<body>\n\n  <div class=\"container\">\n<p class=\"game-explanation\">\n    如果觉得太丧心病狂坚持不住了可以回去简单版： <a href=\"http://oprilzeng.github.io/2048/\" target=\"_blank\" rel=\"external\">http://oprilzeng.github.io/2048/</a> </p>\n    <hr>\n    <p>\n    <strong class=\"important\">Note:</strong> This is a fork from <a href=\"http://gabrielecirulli.github.io/2048\" target=\"_blank\" rel=\"external\">http://gabrielecirulli.github.io/2048</a> created by <a href=\"http://gabrielecirulli.com\" target=\"_blank\">Gabriele Cirulli.</a>    </p>\n<br>鉴于这个版本火得太莫名其妙了，我还是把<strong>这句话↑</strong>搬到上面来吧...本网页也只是2048的众多恶搞改编版中的一个。<br>想donate的话欢迎戳链接去捐助给2048原作者。\n    <hr>\n\n    <div class=\"heading\">\n      <h1 class=\"title\">PRC</h1>\n      <div class=\"scores-container\">\n        <div class=\"score-container\">0</div>\n        <div class=\"best-container\">0</div>\n      </div>\n    </div>\n    <p class=\"game-intro\">合并方块，努力到达 <strong>PRC</strong> 时代吧！</p>\n    <div class=\"game-container\">\n      <div class=\"game-message\">\n        <p></p>\n        <div class=\"lower\">\n          <a class=\"retry-button\">Try again</a>\n          <div class=\"score-sharing\"></div>\n        </div>\n      </div>\n\n      <div class=\"grid-container\">\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n      </div>\n\n      <div class=\"tile-container\">\n\n      </div>\n    </div>\n    <p class=\"game-explanation\">\n      <strong class=\"important\">规则:</strong> 使用 <strong>上下左右键</strong> 移动方块（触屏设备请直接滑动手指），相同的两个朝代合并后会变成 <strong>更新的一个</strong>。\n    </p>\n    <hr>\n    <p>\n    这个算不算<strong>单线程RPG游戏</strong>？<br>你觉得是那就是咯。</p>\n    <hr>    \n    <p>\n    不知道后面的样式会不会特别丑，反正我没试着玩下去..以及这个也不全哦十六国啥的还没加上呢<br>by <a href=\"http://weibo.com/compileerror\" target=\"_blank\">Opril Zeng</a></p>\n  </div>\n\n  <script src=\"js/animframe_polyfill.js\"></script>\n  <script src=\"js/keyboard_input_manager.js\"></script>\n  <script src=\"js/html_actuator.js\"></script>\n  <script src=\"js/grid.js\"></script>\n  <script src=\"js/tile.js\"></script>\n  <script src=\"js/local_score_manager.js\"></script>\n  <script src=\"js/game_manager.js\"></script>\n  <script src=\"js/application.js\"></script>\n\n<script type=\"text/javascript\">\nvar _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\ndocument.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3F63420b9558ce85b4619e0f4f1877517d' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n\n<img border=\"0\" src=\"style/65536.jpg\" width=\"0\" height=\"0\"><img border=\"0\" src=\"style/131072.jpg\" width=\"0\" height=\"0\">\n</body>\n</html>\n","source":"img/2048/full/index.html","raw":"\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>2048</title>\n\n  <link href=\"style/main.css\" rel=\"stylesheet\" type=\"text/css\">\n  <link rel=\"shortcut icon\" href=\"favicon.ico\">\n  <link rel=\"apple-touch-icon\" href=\"meta/apple-touch-icon.png\">\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n  <meta name=\"HandheldFriendly\" content=\"True\">\n  <meta name=\"MobileOptimized\" content=\"320\">\n  <meta name=\"viewport\" content=\"width=device-width, target-densitydpi=160dpi, initial-scale=1.0, maximum-scale=1, user-scalable=no, minimal-ui\">\n\n  <meta property=\"og:title\" content=\"2048 game\"/>\n  <meta property=\"og:site_name\" content=\"2048 game\"/>\n</head>\n<body>\n\n  <div class=\"container\">\n<p class=\"game-explanation\">\n    如果觉得太丧心病狂坚持不住了可以回去简单版： <a href=\"http://oprilzeng.github.io/2048/\">http://oprilzeng.github.io/2048/</a> </p>\n    <hr>\n    <p>\n    <strong class=\"important\">Note:</strong> This is a fork from <a href=\"http://gabrielecirulli.github.io/2048\">http://gabrielecirulli.github.io/2048</a> created by <a href=\"http://gabrielecirulli.com\" target=\"_blank\">Gabriele Cirulli.</a>    </p>\n<br>鉴于这个版本火得太莫名其妙了，我还是把<strong>这句话↑</strong>搬到上面来吧...本网页也只是2048的众多恶搞改编版中的一个。<br>想donate的话欢迎戳链接去捐助给2048原作者。\n    <hr>\n\n    <div class=\"heading\">\n      <h1 class=\"title\">PRC</h1>\n      <div class=\"scores-container\">\n        <div class=\"score-container\">0</div>\n        <div class=\"best-container\">0</div>\n      </div>\n    </div>\n    <p class=\"game-intro\">合并方块，努力到达 <strong>PRC</strong> 时代吧！</p>\n    <div class=\"game-container\">\n      <div class=\"game-message\">\n        <p></p>\n        <div class=\"lower\">\n          <a class=\"retry-button\">Try again</a>\n          <div class=\"score-sharing\"></div>\n        </div>\n      </div>\n\n      <div class=\"grid-container\">\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n        <div class=\"grid-row\">\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n          <div class=\"grid-cell\"></div>\n        </div>\n      </div>\n\n      <div class=\"tile-container\">\n\n      </div>\n    </div>\n    <p class=\"game-explanation\">\n      <strong class=\"important\">规则:</strong> 使用 <strong>上下左右键</strong> 移动方块（触屏设备请直接滑动手指），相同的两个朝代合并后会变成 <strong>更新的一个</strong>。\n    </p>\n    <hr>\n    <p>\n    这个算不算<strong>单线程RPG游戏</strong>？<br>你觉得是那就是咯。</p>\n    <hr>    \n    <p>\n    不知道后面的样式会不会特别丑，反正我没试着玩下去..以及这个也不全哦十六国啥的还没加上呢<br>by <a href=\"http://weibo.com/compileerror\" target=\"_blank\">Opril Zeng</a></p>\n  </div>\n\n  <script src=\"js/animframe_polyfill.js\"></script>\n  <script src=\"js/keyboard_input_manager.js\"></script>\n  <script src=\"js/html_actuator.js\"></script>\n  <script src=\"js/grid.js\"></script>\n  <script src=\"js/tile.js\"></script>\n  <script src=\"js/local_score_manager.js\"></script>\n  <script src=\"js/game_manager.js\"></script>\n  <script src=\"js/application.js\"></script>\n\n<script type=\"text/javascript\">\nvar _bdhmProtocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");\ndocument.write(unescape(\"%3Cscript src='\" + _bdhmProtocol + \"hm.baidu.com/h.js%3F63420b9558ce85b4619e0f4f1877517d' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n\n<img border=\"0\" src=\"style/65536.jpg\" width=\"0\" height=\"0\"><img border=\"0\" src=\"style/131072.jpg\" width=\"0\" height=\"0\">\n</body>\n</html>\n","date":1416373854000,"updated":1416373854000,"path":"img/2048/full/index.html","excerpt":"","_id":"x6x8g6yxcmw1c588","title":"","comments":true,"layout":"page"}],"Post":[{"title":"10.8.0后环境变量","date":1379848617000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>MAC 在10.8.0后环境变量存在了/private/etc/paths里<br></p>\n","source":"_posts/IOS/1080后环境变量.md","raw":"title: 10.8.0后环境变量\ndate: 2013-09-22 19:16:57\ntags: IOS\n---\n<p>\nMAC 在10.8.0后环境变量存在了/private/etc/paths里\n</p>\n","slug":"IOS/1080后环境变量","updated":1416373854000,"excerpt":"","_id":"offcssrkdbc3q5t0","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"layout":"post","title":"google 地图的路线获取和解析","date":1366546680000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>头文件和宏定义</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">&lt;MapKit/MapKit.h&gt;</span></span></div><div class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"RegexKitLite.h\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"JSONKit.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Walk    @<span class=\"title\">\"walking\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Drive   @<span class=\"title\">\"driving\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Bycle   @<span class=\"title\">\"bicycling\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Transit @<span class=\"title\">\"transit\"</span></span></div></pre></td></tr></table></figure><br><p>获取两个点之间的路线</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)calculateRoutesFrom:(CLLocationCoordinate2D)f to:(CLLocationCoordinate2D)t mode:(<span class=\"built_in\">NSString</span> *)mode</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *saddr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%f,%f\"</span>, f<span class=\"variable\">.latitude</span>, f<span class=\"variable\">.longitude</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *daddr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%f,%f\"</span>, t<span class=\"variable\">.latitude</span>, t<span class=\"variable\">.longitude</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *apiUrlStr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"http://maps.google.com/maps/api/directions/json?origin=%@&amp;destination=%@&amp;sensor=false&amp;mode=%@\"</span>, saddr, daddr,mode];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSURL</span>       *apiUrl = [<span class=\"built_in\">NSURL</span> URLWithString:apiUrlStr];</div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *apiResponse = [<span class=\"built_in\">NSString</span> stringWithContentsOfURL:apiUrl encoding:NSASCIIStringEncoding error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSDictionary</span> *dictionaryFromJson = [apiResponse  objectFromJSONString];</div><div class=\"line\">    <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"OK\"</span>])</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span>  *dict = [[[[dictionaryFromJson objectForKey:<span class=\"string\">@\"routes\"</span>] objectAtIndex:<span class=\"number\">0</span>] objectForKey:<span class=\"string\">@\"legs\"</span>] objectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"built_in\">NSArray</span> *legArray = [dict objectForKey:<span class=\"string\">@\"steps\"</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSMutableArray</span> *stepArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">        <span class=\"built_in\">NSAutoreleasePool</span> *pool = [[<span class=\"built_in\">NSAutoreleasePool</span> alloc] init];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> step <span class=\"keyword\">in</span> legArray)</div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"keyword\">id</span> start = [step objectForKey:<span class=\"string\">@\"start_location\"</span>];</div><div class=\"line\">            </div><div class=\"line\">            CLLocation  *loc0 = [[[CLLocation alloc] initWithLatitude:[[start objectForKey:<span class=\"string\">@\"lat\"</span>] doubleValue]</div><div class=\"line\">                                                            longitude:[[start objectForKey:<span class=\"string\">@\"lng\"</span>] doubleValue]] autorelease];</div><div class=\"line\">            </div><div class=\"line\">            [stepArray addObject:loc0];</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">NSString</span> *polyline = [[step objectForKey:<span class=\"string\">@\"polyline\"</span>] objectForKey:<span class=\"string\">@\"points\"</span>];</div><div class=\"line\">            <span class=\"built_in\">NSArray</span> *polylineArrary = [<span class=\"keyword\">self</span> decodePolyLine:[[polyline mutableCopy] autorelease]];</div><div class=\"line\">            [stepArray addObjectsFromArray:polylineArrary];</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">id</span> end = [step objectForKey:<span class=\"string\">@\"end_location\"</span>];</div><div class=\"line\">            </div><div class=\"line\">            CLLocation  *loc1 = [[[CLLocation alloc] initWithLatitude:[[end objectForKey:<span class=\"string\">@\"lat\"</span>] floatValue]</div><div class=\"line\">                                                            longitude:[[end objectForKey:<span class=\"string\">@\"lng\"</span>] floatValue]] autorelease];</div><div class=\"line\">            [stepArray addObject:loc1];</div><div class=\"line\">            </div><div class=\"line\">            </div><div class=\"line\">        }</div><div class=\"line\">        [pool drain];</div><div class=\"line\">        <span class=\"keyword\">return</span> stepArray;</div><div class=\"line\">  </div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *tipString = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"NOT_FOUND\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">             tipString = <span class=\"string\">@\"请求的起点、终点或路标中指定的至少一个位置无法进行地理编码\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"ZERO_RESULTS\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"起点和终点之间找不到路线\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"MAX_WAYPOINTS_EXCEEDED\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"请求中提供的 waypoints 过多\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"INVALID_REQUEST\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"提供的请求无效\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"OVER_QUERY_LIMIT\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"该服务在允许的时间段内从您的应用收到的请求过多\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"REQUEST_DENIED\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">             tipString = <span class=\"string\">@\"该服务已拒绝您的应用使用路线服务\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"OVER_QUERY_LIMIT\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"路线请求因服务器出错而无法得到处理。如果您重试一次，该请求可能就会成功\"</span>;</div><div class=\"line\">            </div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^{</div><div class=\"line\">            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:<span class=\"string\">@\"提示\"</span></div><div class=\"line\">                                                                message:tipString</div><div class=\"line\">                                                               delegate:<span class=\"literal\">nil</span></div><div class=\"line\">                                                      cancelButtonTitle:<span class=\"string\">@\"OK\"</span></div><div class=\"line\">                                                      otherButtonTitles:<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</div><div class=\"line\">            [alertView show];</div><div class=\"line\">            [alertView release];</div><div class=\"line\">        });</div><div class=\"line\">       </div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure><br><a id=\"more\"></a><br><p>解析两个点之间路线点的函数:</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSMutableArray</span> *)decodePolyLine:(<span class=\"built_in\">NSMutableString</span> *)encoded</div><div class=\"line\">{</div><div class=\"line\">    [encoded replaceOccurrencesOfString:<span class=\"string\">@\"\\\\\\\\\"</span> withString:<span class=\"string\">@\"\\\\\"</span></div><div class=\"line\">    options :NSLiteralSearch</div><div class=\"line\">    range   :NSMakeRange(<span class=\"number\">0</span>, [encoded length])];</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span>       len = [encoded length];</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span>       index = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">NSMutableArray</span>  *array = [[[<span class=\"built_in\">NSMutableArray</span> alloc] init] autorelease];</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span>       lat = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span>       lng = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">NSAutoreleasePool</span> *pool = [[<span class=\"built_in\">NSAutoreleasePool</span> alloc] init];</div><div class=\"line\">    <span class=\"keyword\">while</span> (index &lt; len)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">NSInteger</span>   b;</div><div class=\"line\">        <span class=\"built_in\">NSInteger</span>   shift = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">NSInteger</span>   result = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">do</span></div><div class=\"line\">        {</div><div class=\"line\">            b = [encoded characterAtIndex:index++] - <span class=\"number\">63</span>;</div><div class=\"line\">            result |= (b &amp; <span class=\"number\">0x1f</span>) &lt;&lt; shift;</div><div class=\"line\">            shift += <span class=\"number\">5</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">while</span> (b &gt;= <span class=\"number\">0x20</span>);</div><div class=\"line\">        <span class=\"built_in\">NSInteger</span> dlat = ((result &amp; <span class=\"number\">1</span>) ? ~(result &gt;&gt; <span class=\"number\">1</span>) : (result &gt;&gt; <span class=\"number\">1</span>));</div><div class=\"line\">        lat += dlat;</div><div class=\"line\">        shift = <span class=\"number\">0</span>;</div><div class=\"line\">        result = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">do</span></div><div class=\"line\">        {</div><div class=\"line\">            b = [encoded characterAtIndex:index++] - <span class=\"number\">63</span>;</div><div class=\"line\">            result |= (b &amp; <span class=\"number\">0x1f</span>) &lt;&lt; shift;</div><div class=\"line\">            shift += <span class=\"number\">5</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">while</span> (b &gt;= <span class=\"number\">0x20</span>);</div><div class=\"line\">        <span class=\"built_in\">NSInteger</span> dlng = ((result &amp; <span class=\"number\">1</span>) ? ~(result &gt;&gt; <span class=\"number\">1</span>) : (result &gt;&gt; <span class=\"number\">1</span>));</div><div class=\"line\">        lng += dlng;</div><div class=\"line\">        <span class=\"built_in\">NSNumber</span>    *latitude = [[[<span class=\"built_in\">NSNumber</span> alloc] initWithFloat:lat * <span class=\"number\">1e-5</span>] autorelease];</div><div class=\"line\">        <span class=\"built_in\">NSNumber</span>    *longitude = [[[<span class=\"built_in\">NSNumber</span> alloc] initWithFloat:lng * <span class=\"number\">1e-5</span>] autorelease];</div><div class=\"line\">        CLLocation  *loc = [[[CLLocation alloc] initWithLatitude:[latitude floatValue] longitude:[longitude floatValue]] autorelease];</div><div class=\"line\">        [array addObject:loc];</div><div class=\"line\">    }</div><div class=\"line\">    [pool drain];</div><div class=\"line\">    <span class=\"keyword\">return</span> array;</div><div class=\"line\">}</div></pre></td></tr></table></figure><br><br><p>绘制函数:</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)drawFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)destination mode:(NSString *)mode</div><div class=\"line\">{</div><div class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{</div><div class=\"line\">        NSArray *array =  [self calculateRoutesFrom:from to:destination mode:mode];</div><div class=\"line\">        dispatch_async(dispatch_get_main_queue(), ^{</div><div class=\"line\">            [self drawLineWithLocationArray:array];</div><div class=\"line\">        });</div><div class=\"line\">    });</div><div class=\"line\">}</div><div class=\"line\">&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;p&gt;&lt;pre&gt;&lt;code&gt;- (void)drawLineWithLocationArray:(NSArray *)locationArray</div><div class=\"line\">{</div><div class=\"line\">    int                     pointCount = [locationArray count];</div><div class=\"line\">    CLLocationCoordinate2D  *coordinateArray = (CLLocationCoordinate2D *)malloc(pointCount * sizeof(CLLocationCoordinate2D));</div><div class=\"line\"></div><div class=\"line\">    for (int i = 0; i &lt; pointCount; ++i)</div><div class=\"line\">    {</div><div class=\"line\">        CLLocation *location = [locationArray objectAtIndex:i];</div><div class=\"line\">        coordinateArray[i] = [location coordinate];</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    self.routeLine = [MKPolyline polylineWithCoordinates:coordinateArray count:pointCount];</div><div class=\"line\">    [self.googleView setVisibleMapRect:[self.routeLine boundingMapRect]];</div><div class=\"line\">    [self.googleView addOverlay:self.routeLine];</div><div class=\"line\"></div><div class=\"line\">    free(coordinateArray);</div><div class=\"line\">    coordinateArray = NULL;</div><div class=\"line\">}</div></pre></td></tr></table></figure><br><br><p>调用示例:<br><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawTestLine</div><div class=\"line\">{</div><div class=\"line\">    CLLocationCoordinate2D  cll0 = CLLocationCoordinate2DMake(<span class=\"number\">23.132901</span>, <span class=\"number\">113.357223</span>);</div><div class=\"line\">    CLLocationCoordinate2D  cll1 = CLLocationCoordinate2DMake(<span class=\"number\">23.051757</span>, <span class=\"number\">113.392832</span>);</div><div class=\"line\">    [<span class=\"keyword\">self</span> drawFrom:cll0 to:cll1 mode:Mode_Drive];</div><div class=\"line\">}</div></pre></td></tr></table></figure><br></p><p>参考资料</p><br><p><a href=\"https://developers.google.com/maps/documentation/directions/?hl=zh-CN#Limits\" target=\"_blank\" rel=\"external\">谷歌说明文档</a></p><br><p><a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm?hl=zh-CN\" target=\"_blank\" rel=\"external\">路线解码算法</a></p>\n","source":"_posts/IOS/2013-04-21-google-di-tu-de-lu-xian-huo-qu-he-jie-xi.markdown","raw":"---\nlayout: post\ntitle: \"google 地图的路线获取和解析\"\ndate: 2013-04-21 20:18\ncomments: true\ncategories: IOS\n---\n\n\n<p>头文件和宏定义</p>\n{% codeblock lang:objc %}\n\n#import <MapKit/MapKit.h>\n#import \"RegexKitLite.h\"\n#import \"JSONKit.h\"\n\n#define Mode_Walk    @\"walking\"\n#define Mode_Drive   @\"driving\"\n#define Mode_Bycle   @\"bicycling\"\n#define Mode_Transit @\"transit\"\n{% endcodeblock %}\n<p>获取两个点之间的路线</p>\n{% codeblock lang:objc %}- (NSArray *)calculateRoutesFrom:(CLLocationCoordinate2D)f to:(CLLocationCoordinate2D)t mode:(NSString *)mode\n{\n    NSString    *saddr = [NSString stringWithFormat:@\"%f,%f\", f.latitude, f.longitude];\n    NSString    *daddr = [NSString stringWithFormat:@\"%f,%f\", t.latitude, t.longitude];\n\n    NSString    *apiUrlStr = [NSString stringWithFormat:@\"http://maps.google.com/maps/api/directions/json?origin=%@&destination=%@&sensor=false&mode=%@\", saddr, daddr,mode];\n   \n    NSURL       *apiUrl = [NSURL URLWithString:apiUrlStr];\n    NSString    *apiResponse = [NSString stringWithContentsOfURL:apiUrl encoding:NSASCIIStringEncoding error:nil];\n    NSDictionary *dictionaryFromJson = [apiResponse  objectFromJSONString];\n    if([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"OK\"])\n    {\n        NSDictionary  *dict = [[[[dictionaryFromJson objectForKey:@\"routes\"] objectAtIndex:0] objectForKey:@\"legs\"] objectAtIndex:0];\n        NSArray *legArray = [dict objectForKey:@\"steps\"];\n        \n        NSMutableArray *stepArray = [NSMutableArray array];\n        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n        for (id step in legArray)\n        {\n            id start = [step objectForKey:@\"start_location\"];\n            \n            CLLocation  *loc0 = [[[CLLocation alloc] initWithLatitude:[[start objectForKey:@\"lat\"] doubleValue]\n                                                            longitude:[[start objectForKey:@\"lng\"] doubleValue]] autorelease];\n            \n            [stepArray addObject:loc0];\n            \n            NSString *polyline = [[step objectForKey:@\"polyline\"] objectForKey:@\"points\"];\n            NSArray *polylineArrary = [self decodePolyLine:[[polyline mutableCopy] autorelease]];\n            [stepArray addObjectsFromArray:polylineArrary];\n            \n            id end = [step objectForKey:@\"end_location\"];\n            \n            CLLocation  *loc1 = [[[CLLocation alloc] initWithLatitude:[[end objectForKey:@\"lat\"] floatValue]\n                                                            longitude:[[end objectForKey:@\"lng\"] floatValue]] autorelease];\n            [stepArray addObject:loc1];\n            \n            \n        }\n        [pool drain];\n        return stepArray;\n  \n    }\n    else\n    {\n        NSString *tipString = nil;\n        if ([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"NOT_FOUND\"])\n        {\n             tipString = @\"请求的起点、终点或路标中指定的至少一个位置无法进行地理编码\";\n        }\n        else if ([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"ZERO_RESULTS\"])\n        {\n            tipString = @\"起点和终点之间找不到路线\";\n        }\n        else if ([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"MAX_WAYPOINTS_EXCEEDED\"])\n        {\n            tipString = @\"请求中提供的 waypoints 过多\";\n        }\n        else if ([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"INVALID_REQUEST\"])\n        {\n            tipString = @\"提供的请求无效\";\n        }\n        else if([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"OVER_QUERY_LIMIT\"])\n        {\n            tipString = @\"该服务在允许的时间段内从您的应用收到的请求过多\";\n        }\n        else if([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"REQUEST_DENIED\"])\n        {\n             tipString = @\"该服务已拒绝您的应用使用路线服务\";\n        }\n        else if([[dictionaryFromJson objectForKey:@\"status\"] isEqualToString:@\"OVER_QUERY_LIMIT\"])\n        {\n            tipString = @\"路线请求因服务器出错而无法得到处理。如果您重试一次，该请求可能就会成功\";\n            \n        }\n        dispatch_async(dispatch_get_main_queue(), ^{\n            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@\"提示\"\n                                                                message:tipString\n                                                               delegate:nil\n                                                      cancelButtonTitle:@\"OK\"\n                                                      otherButtonTitles:nil, nil];\n            [alertView show];\n            [alertView release];\n        });\n       \n        \n        return nil;\n    }\n\n}{% endcodeblock %}\n<!--more-->\n<p>解析两个点之间路线点的函数:</p>\n{% codeblock lang:objc %}- (NSMutableArray *)decodePolyLine:(NSMutableString *)encoded\n{\n    [encoded replaceOccurrencesOfString:@\"\\\\\\\\\" withString:@\"\\\\\"\n    options :NSLiteralSearch\n    range   :NSMakeRange(0, [encoded length])];\n    NSInteger       len = [encoded length];\n    NSInteger       index = 0;\n    NSMutableArray  *array = [[[NSMutableArray alloc] init] autorelease];\n    NSInteger       lat = 0;\n    NSInteger       lng = 0;\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n    while (index < len)\n    {\n        NSInteger   b;\n        NSInteger   shift = 0;\n        NSInteger   result = 0;\n        do\n        {\n            b = [encoded characterAtIndex:index++] - 63;\n            result |= (b & 0x1f) << shift;\n            shift += 5;\n        }\n        while (b >= 0x20);\n        NSInteger dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));\n        lat += dlat;\n        shift = 0;\n        result = 0;\n        do\n        {\n            b = [encoded characterAtIndex:index++] - 63;\n            result |= (b & 0x1f) << shift;\n            shift += 5;\n        }\n        while (b >= 0x20);\n        NSInteger dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));\n        lng += dlng;\n        NSNumber    *latitude = [[[NSNumber alloc] initWithFloat:lat * 1e-5] autorelease];\n        NSNumber    *longitude = [[[NSNumber alloc] initWithFloat:lng * 1e-5] autorelease];\n        CLLocation  *loc = [[[CLLocation alloc] initWithLatitude:[latitude floatValue] longitude:[longitude floatValue]] autorelease];\n        [array addObject:loc];\n    }\n    [pool drain];\n    return array;\n}{% endcodeblock %}\n\n<p>绘制函数:</p>\n{% codeblock lang:objc %}- (void)drawFrom:(CLLocationCoordinate2D)from to:(CLLocationCoordinate2D)destination mode:(NSString *)mode\n{\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        NSArray *array =  [self calculateRoutesFrom:from to:destination mode:mode];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [self drawLineWithLocationArray:array];\n        });\n    });\n}\n</code></pre></p>\n\n<p><pre><code>- (void)drawLineWithLocationArray:(NSArray *)locationArray\n{\n    int                     pointCount = [locationArray count];\n    CLLocationCoordinate2D  *coordinateArray = (CLLocationCoordinate2D *)malloc(pointCount * sizeof(CLLocationCoordinate2D));\n\n    for (int i = 0; i < pointCount; ++i)\n    {\n        CLLocation *location = [locationArray objectAtIndex:i];\n        coordinateArray[i] = [location coordinate];\n    }\n\n    self.routeLine = [MKPolyline polylineWithCoordinates:coordinateArray count:pointCount];\n    [self.googleView setVisibleMapRect:[self.routeLine boundingMapRect]];\n    [self.googleView addOverlay:self.routeLine];\n\n    free(coordinateArray);\n    coordinateArray = NULL;\n}{% endcodeblock %}\n\n<p>调用示例:\n\n{% codeblock lang:objc %}- (void)drawTestLine\n{\n    CLLocationCoordinate2D  cll0 = CLLocationCoordinate2DMake(23.132901, 113.357223);\n    CLLocationCoordinate2D  cll1 = CLLocationCoordinate2DMake(23.051757, 113.392832);\n    [self drawFrom:cll0 to:cll1 mode:Mode_Drive];\n}{% endcodeblock %}\n<p>参考资料</p>\n<p><a href=\"https://developers.google.com/maps/documentation/directions/?hl=zh-CN#Limits\">谷歌说明文档</a></p>\n<p><a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm?hl=zh-CN\">路线解码算法</a></p>\n","slug":"IOS/2013-04-21-google-di-tu-de-lu-xian-huo-qu-he-jie-xi","updated":1416373854000,"excerpt":"<p>头文件和宏定义</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">&lt;MapKit/MapKit.h&gt;</span></span></div><div class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"RegexKitLite.h\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"JSONKit.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Walk    @<span class=\"title\">\"walking\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Drive   @<span class=\"title\">\"driving\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Bycle   @<span class=\"title\">\"bicycling\"</span></span></div><div class=\"line\"><span class=\"preprocessor\">#define Mode_Transit @<span class=\"title\">\"transit\"</span></span></div></pre></td></tr></table></figure><br><p>获取两个点之间的路线</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)calculateRoutesFrom:(CLLocationCoordinate2D)f to:(CLLocationCoordinate2D)t mode:(<span class=\"built_in\">NSString</span> *)mode</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *saddr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%f,%f\"</span>, f<span class=\"variable\">.latitude</span>, f<span class=\"variable\">.longitude</span>];</div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *daddr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%f,%f\"</span>, t<span class=\"variable\">.latitude</span>, t<span class=\"variable\">.longitude</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *apiUrlStr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"http://maps.google.com/maps/api/directions/json?origin=%@&amp;destination=%@&amp;sensor=false&amp;mode=%@\"</span>, saddr, daddr,mode];</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"built_in\">NSURL</span>       *apiUrl = [<span class=\"built_in\">NSURL</span> URLWithString:apiUrlStr];</div><div class=\"line\">    <span class=\"built_in\">NSString</span>    *apiResponse = [<span class=\"built_in\">NSString</span> stringWithContentsOfURL:apiUrl encoding:NSASCIIStringEncoding error:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"built_in\">NSDictionary</span> *dictionaryFromJson = [apiResponse  objectFromJSONString];</div><div class=\"line\">    <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"OK\"</span>])</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">NSDictionary</span>  *dict = [[[[dictionaryFromJson objectForKey:<span class=\"string\">@\"routes\"</span>] objectAtIndex:<span class=\"number\">0</span>] objectForKey:<span class=\"string\">@\"legs\"</span>] objectAtIndex:<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"built_in\">NSArray</span> *legArray = [dict objectForKey:<span class=\"string\">@\"steps\"</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">NSMutableArray</span> *stepArray = [<span class=\"built_in\">NSMutableArray</span> array];</div><div class=\"line\">        <span class=\"built_in\">NSAutoreleasePool</span> *pool = [[<span class=\"built_in\">NSAutoreleasePool</span> alloc] init];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> step <span class=\"keyword\">in</span> legArray)</div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"keyword\">id</span> start = [step objectForKey:<span class=\"string\">@\"start_location\"</span>];</div><div class=\"line\">            </div><div class=\"line\">            CLLocation  *loc0 = [[[CLLocation alloc] initWithLatitude:[[start objectForKey:<span class=\"string\">@\"lat\"</span>] doubleValue]</div><div class=\"line\">                                                            longitude:[[start objectForKey:<span class=\"string\">@\"lng\"</span>] doubleValue]] autorelease];</div><div class=\"line\">            </div><div class=\"line\">            [stepArray addObject:loc0];</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">NSString</span> *polyline = [[step objectForKey:<span class=\"string\">@\"polyline\"</span>] objectForKey:<span class=\"string\">@\"points\"</span>];</div><div class=\"line\">            <span class=\"built_in\">NSArray</span> *polylineArrary = [<span class=\"keyword\">self</span> decodePolyLine:[[polyline mutableCopy] autorelease]];</div><div class=\"line\">            [stepArray addObjectsFromArray:polylineArrary];</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">id</span> end = [step objectForKey:<span class=\"string\">@\"end_location\"</span>];</div><div class=\"line\">            </div><div class=\"line\">            CLLocation  *loc1 = [[[CLLocation alloc] initWithLatitude:[[end objectForKey:<span class=\"string\">@\"lat\"</span>] floatValue]</div><div class=\"line\">                                                            longitude:[[end objectForKey:<span class=\"string\">@\"lng\"</span>] floatValue]] autorelease];</div><div class=\"line\">            [stepArray addObject:loc1];</div><div class=\"line\">            </div><div class=\"line\">            </div><div class=\"line\">        }</div><div class=\"line\">        [pool drain];</div><div class=\"line\">        <span class=\"keyword\">return</span> stepArray;</div><div class=\"line\">  </div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *tipString = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"NOT_FOUND\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">             tipString = <span class=\"string\">@\"请求的起点、终点或路标中指定的至少一个位置无法进行地理编码\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"ZERO_RESULTS\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"起点和终点之间找不到路线\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"MAX_WAYPOINTS_EXCEEDED\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"请求中提供的 waypoints 过多\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"INVALID_REQUEST\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"提供的请求无效\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"OVER_QUERY_LIMIT\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"该服务在允许的时间段内从您的应用收到的请求过多\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"REQUEST_DENIED\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">             tipString = <span class=\"string\">@\"该服务已拒绝您的应用使用路线服务\"</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>([[dictionaryFromJson objectForKey:<span class=\"string\">@\"status\"</span>] isEqualToString:<span class=\"string\">@\"OVER_QUERY_LIMIT\"</span>])</div><div class=\"line\">        {</div><div class=\"line\">            tipString = <span class=\"string\">@\"路线请求因服务器出错而无法得到处理。如果您重试一次，该请求可能就会成功\"</span>;</div><div class=\"line\">            </div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^{</div><div class=\"line\">            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:<span class=\"string\">@\"提示\"</span></div><div class=\"line\">                                                                message:tipString</div><div class=\"line\">                                                               delegate:<span class=\"literal\">nil</span></div><div class=\"line\">                                                      cancelButtonTitle:<span class=\"string\">@\"OK\"</span></div><div class=\"line\">                                                      otherButtonTitles:<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</div><div class=\"line\">            [alertView show];</div><div class=\"line\">            [alertView release];</div><div class=\"line\">        });</div><div class=\"line\">       </div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure><br>","_id":"zjqeq17wlyrj1z7x","tags":[],"photos":[],"link":""},{"layout":"post","title":"IOS 调用第三方App打开文件","date":1366510920000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<blockquote>\n\n<p>NSString  <em>filePath =[[NSBundlemainBundle]pathForResource:@”1”ofType:@”docx”];<br>UIDocumentInteractionController  </em>documentController=[UIDocumentInteractionControllerinteractionControllerWithURL:[NSURLfileURLWithPath:filePath]];<br>documentController.UTI= @”com.microsoft.word.doc”;<br>[documentController presentOpenInMenuFromRect:CGRectZero<br>                                     inView:self.view<br>                                     animated:YES];<blockquote></blockquote></p>\n<p><a href=\"https://developer.apple.com/library/ios/#documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1\" target=\"_blank\" rel=\"external\">UTI 列表</a></p>\n\n</blockquote>\n\n\n<footer><strong>lang:objc</strong></footer>\n","source":"_posts/IOS/2013-04-21-ios-diao-yong-di-san-fang-appda-kai-wen-jian.markdown","raw":"---\nlayout: post\ntitle: \"IOS 调用第三方App打开文件\"\ndate: 2013-04-21 10:22\ncomments: true\ncategories: IOS\n---\n{% blockquote lang:objc %}\nNSString  *filePath =[[NSBundlemainBundle]pathForResource:@\"1\"ofType:@\"docx\"];\nUIDocumentInteractionController  *documentController=[UIDocumentInteractionControllerinteractionControllerWithURL:[NSURLfileURLWithPath:filePath]];\ndocumentController.UTI= @\"com.microsoft.word.doc\";\n[documentController presentOpenInMenuFromRect:CGRectZero\n                    \t\t    \t inView:self.view\n                                     animated:YES];\n{% blockquote %}\n\n<p><a href=\"https://developer.apple.com/library/ios/#documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html#//apple_ref/doc/uid/TP40009259-SW1\">UTI 列表</a></p>","slug":"IOS/2013-04-21-ios-diao-yong-di-san-fang-appda-kai-wen-jian","updated":1416378335000,"excerpt":"","_id":"yslto22si8pc7514","tags":[],"photos":[],"link":""},{"layout":"post","title":"IOS 检测耳机插入","date":1366548360000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<pre><code><span class=\"tag\">&lt;<span class=\"title\">hexoescape</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"title\">hexoescape</span>&gt;</span>\n</code></pre><p>UInt32 dataSize;<br>CFStringRef currentRoute;<br>currentRoute = NULL;<br>dataSize = sizeof(CFStringRef);<br>AudioSessionInitialize(NULL, NULL, NULL, NULL);<br>AudioSessionGetProperty(kAudioSessionProperty_AudioRoute, &amp;dataSize, &amp;currentRoute);<br>if([(NSString *) currentRoute hasPrefix: @”Headphone”])<br>{<br>    //插入耳机后想执行的操作<br>}<blockquote></blockquote></p>\n\n\n\n<footer><strong>lang:objc</strong></footer>\n","source":"_posts/IOS/2013-04-21-ios-jian-ce-er-ji-cha-ru.markdown","raw":"---\nlayout: post\ntitle: \"IOS 检测耳机插入\"\ndate: 2013-04-21 20:46\ncomments: true\ncategories: IOS\n--- \n    {% blockquote lang:objc %}\n    UInt32 dataSize;\n    CFStringRef currentRoute;\n    currentRoute = NULL;\n    dataSize = sizeof(CFStringRef);\n    AudioSessionInitialize(NULL, NULL, NULL, NULL);\n    AudioSessionGetProperty(kAudioSessionProperty_AudioRoute, &dataSize, &currentRoute);\n    if([(NSString *) currentRoute hasPrefix: @\"Headphone\"])\n    {\n        //插入耳机后想执行的操作\n    }{% blockquote %}\n","slug":"IOS/2013-04-21-ios-jian-ce-er-ji-cha-ru","updated":1416378348000,"excerpt":"","_id":"b2miwc80nmmda9q7","tags":[],"photos":[],"link":""},{"layout":"post","title":"IOS5 模拟器bug:CFXPreferencesSearchListSource tryLock","date":1366547820000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>ios5 模拟器在程序弹出UIAlertview或者键盘之类的控件时，返回桌面就会出现[CFXPreferencesSearchListSource tryLock]。<br>是模拟器的bug。真机上不会出现,不用管。<br></p>\n","source":"_posts/IOS/2013-04-21-ios5-mo-ni-qi-bug-cfxpreferencessearchlistsource-trylock.markdown","raw":"---\nlayout: post\ntitle: \"IOS5 模拟器bug:CFXPreferencesSearchListSource tryLock\"\ndate: 2013-04-21 20:37\ncomments: true\ncategories: IOS\n---\n<p>ios5 模拟器在程序弹出UIAlertview或者键盘之类的控件时，返回桌面就会出现[CFXPreferencesSearchListSource tryLock]。\n是模拟器的bug。真机上不会出现,不用管。\n</p>\n","slug":"IOS/2013-04-21-ios5-mo-ni-qi-bug-cfxpreferencessearchlistsource-trylock","updated":1416373854000,"excerpt":"","_id":"jtbvfc89kyrceqvp","tags":[],"photos":[],"link":""},{"layout":"post","title":"'libxml/tree.h'not found","date":1366548180000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>在target 和 project 的 Header Search Paths zhong中加上/usr/include/libxml2 在 Other linker flags 中加上 -lxml2<br></p>","source":"_posts/IOS/2013-04-21-libxml-slash-tree-dot-hnot-found.markdown","raw":"---\nlayout: post\ntitle: \"'libxml/tree.h'not found\"\ndate: 2013-04-21 20:43\ncomments: true\ncategories: IOS\n---\n<p>在target 和 project 的 Header Search Paths zhong中加上/usr/include/libxml2 在 Other linker flags 中加上 -lxml2\n</p>","slug":"IOS/2013-04-21-libxml-slash-tree-dot-hnot-found","updated":1416373854000,"excerpt":"","_id":"dptebojkmk1zvmxj","tags":[],"photos":[],"link":""},{"layout":"post","title":"常用代码","date":1366601880000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p></p><p>1.判断邮箱格式是否正确的代码</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)isValidateEmail:(<span class=\"built_in\">NSString</span> *)email</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">NSString</span> *emailRegex = <span class=\"string\">@\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\"</span>;</div><div class=\"line\">  NSPredicate *emailTest = [NSPredicate predicateWithFormat:<span class=\"string\">@\"SELF MATCHES%@\"</span>,emailRegex];</div><div class=\"line\">  <span class=\"keyword\">return</span> [emailTest evaluateWithObject:email];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p></p><p>2.图片压缩</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIImage</span>*)imageWithImageSimple:(<span class=\"built_in\">UIImage</span>*)image scaledToSize:(<span class=\"built_in\">CGSize</span>)newSize</div><div class=\"line\">{</div><div class=\"line\"><span class=\"comment\">// Create a graphics image context</span></div><div class=\"line\">   UIGraphicsBeginImageContext(newSize);</div><div class=\"line\"><span class=\"comment\">// Tell the old image to draw in this newcontext, with the desired</span></div><div class=\"line\"><span class=\"comment\">// new size</span></div><div class=\"line\">   [image drawInRect:CGRectMake(<span class=\"number\">0</span>,<span class=\"number\">0</span>,newSize<span class=\"variable\">.width</span>,newSize<span class=\"variable\">.height</span>)];</div><div class=\"line\"><span class=\"comment\">// Get the new image from the context</span></div><div class=\"line\">   <span class=\"built_in\">UIImage</span>* newImage = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\"><span class=\"comment\">// End the context</span></div><div class=\"line\">   UIGraphicsEndImageContext();</div><div class=\"line\"><span class=\"comment\">// Return the new image.</span></div><div class=\"line\">   <span class=\"keyword\">return</span> newImage;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p></p><p>3.亲测可用的图片上传代码</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)uploadButton:(<span class=\"keyword\">id</span>)sender </div><div class=\"line\">{</div><div class=\"line\">   <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"1.jpg\"</span>]; <span class=\"comment\">//图片名</span></div><div class=\"line\">   NSData *imageData = UIImageJPEGRepresentation(image,<span class=\"number\">0.5</span>);<span class=\"comment\">//压缩比例</span></div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字节数:%i\"</span>,[imageData length]);</div><div class=\"line\"><span class=\"comment\">// post url</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *urlString = <span class=\"string\">@\"http://192.168.1.113:8090/text/UploadServlet\"</span>;</div><div class=\"line\"><span class=\"comment\">//服务器地址</span></div><div class=\"line\"><span class=\"comment\">// setting up the request object now</span></div><div class=\"line\">   NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init] ;</div><div class=\"line\">   [request setURL:[<span class=\"built_in\">NSURL</span> URLWithString:urlString]];</div><div class=\"line\">   [request setHTTPMethod:<span class=\"string\">@\"POST\"</span>];</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *boundary = [<span class=\"built_in\">NSString</span> stringWithString:<span class=\"string\">@\"---------------------------14737809831466499882746641449\"</span>];</div><div class=\"line\">   <span class=\"built_in\">NSString</span> *contentType = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"multipart/form-data;boundary=%@\"</span>,boundary];</div><div class=\"line\">   [request addValue:contentType forHTTPHeaderField: <span class=\"string\">@\"Content-Type\"</span>];</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">   NSMutableData *body = [NSMutableData data];</div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\r\\n--%@\\r\\n\"</span>,boundary] dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithString:<span class=\"string\">@\"Content-Disposition:form-data; name=\\\"userfile\\\"; filename=\\\"2.png\\\"\\r\\n\"</span>] dataUsingEncoding:NSUTF8StringEncoding]]; <span class=\"comment\">//上传上去的图片名字</span></div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithString:<span class=\"string\">@\"Content-Type: application/octet-stream\\r\\n\\r\\n\"</span>] dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">   [body appendData:[NSData dataWithData:imageData]];</div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\r\\n--%@--\\r\\n\"</span>,boundary] dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">   [request setHTTPBody:body];</div><div class=\"line\"><span class=\"comment\">// NSLog(@\"1-body:%@\",body);</span></div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2-request:%@\"</span>,request);</div><div class=\"line\">   NSData *returnData = [<span class=\"built_in\">NSURLConnection</span> sendSynchronousRequest:request returningResponse:<span class=\"literal\">nil</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">   <span class=\"built_in\">NSString</span> *returnString = [[<span class=\"built_in\">NSString</span> alloc] initWithData:returnData encoding:NSUTF8StringEncoding];</div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3-测试输出：%@\"</span>,returnString);</div></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p></p><p>4.给imageView加载图片</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIImage</span> *myImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"1.jpg\"</span>];</div><div class=\"line\">[imageView setImage:myImage];</div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:imageView];</div></pre></td></tr></table></figure>\n\n<p></p><p>5.对图库的操作</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImagePickerControllerSourceTypesourceType=UIImagePickerControllerSourceTypeCamera;</div><div class=\"line\"><span class=\"keyword\">if</span> (![UIImagePickerControllerisSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) </div><div class=\"line\">{</div><div class=\"line\">sourceType=UIImagePickerControllerSourceTypePhotoLibrary;</div><div class=\"line\">}</div><div class=\"line\">UIImagePickerController * picker = [[UIImagePickerControlleralloc]init];</div><div class=\"line\">picker<span class=\"variable\">.delegate</span> = <span class=\"keyword\">self</span>;</div><div class=\"line\">picker<span class=\"variable\">.allowsEditing</span>=<span class=\"literal\">YES</span>;</div><div class=\"line\">picker<span class=\"variable\">.sourceType</span>=sourceType;</div><div class=\"line\">[<span class=\"keyword\">self</span> presentModalViewController:picker animated:<span class=\"literal\">YES</span>];</div></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)imagePickerController:(UIImagePickerController*)pickerdidFinishPickingMediaWithInfo:(<span class=\"built_in\">NSDictionary</span> *)info</div><div class=\"line\">{</div><div class=\"line\"> [picker dismissModalViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\"> <span class=\"built_in\">UIImage</span> * image=[info objectForKey:UIImagePickerControllerEditedImage];</div><div class=\"line\"> [<span class=\"keyword\">self</span> performSelector:<span class=\"keyword\">@selector</span>(selectPic:) withObject:imageafterDelay:<span class=\"number\">0.1</span>];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)selectPic:(<span class=\"built_in\">UIImage</span>*)image</div><div class=\"line\">{</div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"image%@\"</span>,image);</div><div class=\"line\">  imageView = [[<span class=\"built_in\">UIImageView</span> alloc] initWithImage:image];</div><div class=\"line\">  imageView<span class=\"variable\">.frame</span> = CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, image<span class=\"variable\">.size</span><span class=\"variable\">.width</span>, image<span class=\"variable\">.size</span><span class=\"variable\">.height</span>);</div><div class=\"line\">  [<span class=\"keyword\">self</span><span class=\"variable\">.viewaddSubview</span>:imageView];</div><div class=\"line\">  [<span class=\"keyword\">self</span> performSelectorInBackground:<span class=\"keyword\">@selector</span>(detect:) withObject:<span class=\"literal\">nil</span>];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)imagePickerControllerDIdCancel:(UIImagePickerController*)picker</div><div class=\"line\">{</div><div class=\"line\">  [picker dismissModalViewControllerAnimated:<span class=\"literal\">YES</span>];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<p></p><p>6.跳到下个View</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">nextWebView = [[WEBViewController alloc] initWithNibName:<span class=\"string\">@\"WEBViewController\"</span> bundle:<span class=\"literal\">nil</span>];</div><div class=\"line\">[<span class=\"keyword\">self</span> presentModalViewController:nextWebView animated:<span class=\"literal\">YES</span>];</div><div class=\"line\"><span class=\"comment\">//创建一个UIBarButtonItem右边按钮</span></div><div class=\"line\"><span class=\"built_in\">UIBarButtonItem</span> *rightButton = [[<span class=\"built_in\">UIBarButtonItem</span> alloc] initWithTitle:<span class=\"string\">@\"右边\"</span> style:UIBarButtonItemStyleDone target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(clickRightButton)];</div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.navigationItem</span> setRightBarButtonItem:rightButton];</div><div class=\"line\">设置navigationBar隐藏</div><div class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.navigationController</span><span class=\"variable\">.navigationBarHidden</span> = <span class=\"literal\">YES</span>;<span class=\"comment\">//</span></div><div class=\"line\">iOS开发之UIlabel多行文字自动换行 （自动折行）</div><div class=\"line\"><span class=\"built_in\">UIView</span> *footerView = [[<span class=\"built_in\">UIView</span> alloc]initWithFrame:CGRectMake(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">180</span>)];</div><div class=\"line\"><span class=\"built_in\">UILabel</span> *label = [[<span class=\"built_in\">UILabel</span> alloc]initWithFrame:CGRectMake(<span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">300</span>, <span class=\"number\">150</span>)];</div><div class=\"line\">label<span class=\"variable\">.text</span> = <span class=\"string\">@\"Hello world! Hello world!Hello world! Hello world! Hello world! Hello world! Hello world! Hello world!Hello world! Hello world! Hello world! Hello world! Hello world! Helloworld!\"</span>;</div><div class=\"line\"><span class=\"comment\">//背景颜色为红色</span></div><div class=\"line\">label<span class=\"variable\">.backgroundColor</span> = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\"><span class=\"comment\">//设置字体颜色为白色</span></div><div class=\"line\">label<span class=\"variable\">.textColor</span> = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\"><span class=\"comment\">//文字居中显示</span></div><div class=\"line\">label<span class=\"variable\">.textAlignment</span> = UITextAlignmentCenter;</div><div class=\"line\"><span class=\"comment\">//自动折行设置</span></div><div class=\"line\">label<span class=\"variable\">.lineBreakMode</span> = UILineBreakModeWordWrap;</div><div class=\"line\">label<span class=\"variable\">.numberOfLines</span> = <span class=\"number\">0</span>;</div></pre></td></tr></table></figure>\n\n<p></p><p>7.代码生成button</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CGRect</span> frame = CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">400</span>, <span class=\"number\">72.0</span>, <span class=\"number\">37.0</span>);</div><div class=\"line\"><span class=\"built_in\">UIButton</span> *button = [<span class=\"built_in\">UIButton</span> buttonWithType:UIButtonTypeRoundedRect];</div><div class=\"line\">button<span class=\"variable\">.frame</span> = frame;</div><div class=\"line\">[button setTitle:<span class=\"string\">@\"新添加的按钮\"</span> forState: UIControlStateNormal];</div><div class=\"line\">button<span class=\"variable\">.backgroundColor</span> = [<span class=\"built_in\">UIColor</span> clearColor];</div><div class=\"line\">button<span class=\"variable\">.tag</span> = <span class=\"number\">2000</span>;</div><div class=\"line\">[button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:button];</div></pre></td></tr></table></figure>\n\n<p></p><p>8.让某个控件在View的中心位置显示</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">label<span class=\"variable\">.center</span> = <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.center</span>;</div></pre></td></tr></table></figure>\n\n<p></p><p>9.好看的文字处理</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">cell<span class=\"variable\">.backgroundColor</span> = [UIColorscrollViewTexturedBackgroundColor];</div><div class=\"line\"><span class=\"comment\">//设置文字的字体</span></div><div class=\"line\">cell<span class=\"variable\">.textLabel</span><span class=\"variable\">.font</span> = [<span class=\"built_in\">UIFont</span> fontWithName:<span class=\"string\">@\"AmericanTypewriter\"</span> size:<span class=\"number\">100.0</span>f];</div><div class=\"line\"><span class=\"comment\">//设置文字的颜色</span></div><div class=\"line\">cell<span class=\"variable\">.textLabel</span><span class=\"variable\">.textColor</span> = [<span class=\"built_in\">UIColor</span> orangeColor];</div><div class=\"line\"><span class=\"comment\">//设置文字的背景颜色</span></div><div class=\"line\">cell<span class=\"variable\">.textLabel</span><span class=\"variable\">.shadowColor</span> = [<span class=\"built_in\">UIColor</span> whiteColor];</div><div class=\"line\"><span class=\"comment\">//设置文字的显示位置</span></div><div class=\"line\">cell<span class=\"variable\">.textLabel</span><span class=\"variable\">.textAlignment</span> = UITextAlignmentCenter;</div></pre></td></tr></table></figure>\n\n<p></p><p>10.隐藏Status Bar</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)ViewDidLoad</div><div class=\"line\">{</div><div class=\"line\">  [[<span class=\"built_in\">UIApplication</span> sharedApplication]setStatusBarHidden:<span class=\"literal\">YES</span> animated:<span class=\"literal\">NO</span>];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p></p><p>11.更改AlertView背景</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIAlertView *theAlert = [[[UIAlertViewalloc] initWithTitle:<span class=\"string\">@\"Atention\"</span></div><div class=\"line\">message: <span class=\"string\">@\"I'm a Chinese!\"</span></div><div class=\"line\">delegate:<span class=\"literal\">nil</span></div><div class=\"line\">cancelButtonTitle:<span class=\"string\">@\"Cancel\"</span></div><div class=\"line\">otherButtonTitles:<span class=\"string\">@\"Okay\"</span>,<span class=\"literal\">nil</span>] autorelease];</div><div class=\"line\">[theAlert show];</div><div class=\"line\"><span class=\"built_in\">UIImage</span> *theImage = [UIImageimageNamed:<span class=\"string\">@\"loveChina.png\"</span>];</div><div class=\"line\">theImage = [theImage stretchableImageWithLeftCapWidth:<span class=\"number\">0</span>topCapHeight:<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"built_in\">CGSize</span> theSize = [theAlert frame]<span class=\"variable\">.size</span>;</div><div class=\"line\">UIGraphicsBeginImageContext(theSize);</div><div class=\"line\">[theImage drawInRect:CGRectMake(<span class=\"number\">5</span>, <span class=\"number\">5</span>, theSize<span class=\"variable\">.width</span>-<span class=\"number\">10</span>, theSize<span class=\"variable\">.height</span>-<span class=\"number\">20</span>)];<span class=\"comment\">//这个地方的大小要自己调整，以适应alertview的背景颜色的大小。</span></div><div class=\"line\">theImage = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">UIGraphicsEndImageContext();</div><div class=\"line\">theAlert<span class=\"variable\">.layer</span><span class=\"variable\">.contents</span> = (<span class=\"keyword\">id</span>)[theImage CGImage];</div></pre></td></tr></table></figure>\n\n<p></p><p>12.键盘透明</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">textField<span class=\"variable\">.keyboardAppearance</span> = UIKeyboardAppearanceAlert;</div></pre></td></tr></table></figure>\n\n<p></p><p>13.截取屏幕图片</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建一个基于位图的图形上下文并指定大小为CGSizeMake(200,400)</span></div><div class=\"line\">UIGraphicsBeginImageContext(CGSizeMake(<span class=\"number\">200</span>,<span class=\"number\">400</span>));</div><div class=\"line\"><span class=\"comment\">//renderInContext 呈现接受者及其子范围到指定的上下文</span></div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.layer</span> renderInContext:UIGraphicsGetCurrentContext()];</div><div class=\"line\"><span class=\"comment\">//返回一个基于当前图形上下文的图片</span></div><div class=\"line\"><span class=\"built_in\">UIImage</span> *aImage = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\"><span class=\"comment\">//移除栈顶的基于当前位图的图形上下文</span></div><div class=\"line\">UIGraphicsEndImageContext();</div><div class=\"line\"><span class=\"comment\">//以png格式返回指定图片的数据</span></div><div class=\"line\">imageData = UIImagePNGRepresentation(aImage);</div></pre></td></tr></table></figure>\n\n<p></p><p>14.更改cell选中的背景</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *myview = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">myview<span class=\"variable\">.frame</span> = CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">320</span>, <span class=\"number\">47</span>);</div><div class=\"line\">myview<span class=\"variable\">.backgroundColor</span> = [UIColorcolorWithPatternImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"0006.png\"</span>]];</div><div class=\"line\">cell<span class=\"variable\">.selectedBackgroundView</span> = myview;</div></pre></td></tr></table></figure>\n\n<p></p><p>15.显示图像</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CGRect</span> myImageRect = CGRectMake(<span class=\"number\">0.0</span>f, <span class=\"number\">0.0</span>f, <span class=\"number\">320.0</span>f, <span class=\"number\">109.0</span>f);</div><div class=\"line\"><span class=\"built_in\">UIImageView</span> *myImage = [[<span class=\"built_in\">UIImageView</span> alloc] initWithFrame:myImageRect];</div><div class=\"line\">[myImage setImage:[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"myImage.png\"</span>]];</div><div class=\"line\">myImage<span class=\"variable\">.opaque</span> = <span class=\"literal\">YES</span>; <span class=\"comment\">//opaque是否透明</span></div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:myImage];</div></pre></td></tr></table></figure>\n\n<p></p><p>16.能让图片适应框的大小（没有确认）</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span>*imagePath = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"XcodeCrash\"</span>ofType:<span class=\"string\">@\"png\"</span>];</div><div class=\"line\"><span class=\"built_in\">UIImage</span> *image = [[<span class=\"built_in\">UIImage</span> alloc]initWithContentsOfFile:imagePath];</div><div class=\"line\"><span class=\"built_in\">UIImage</span> *newImage= [image transformWidth:<span class=\"number\">80.</span>f height:<span class=\"number\">240.</span>f];</div><div class=\"line\"><span class=\"built_in\">UIImageView</span> *imageView = [[<span class=\"built_in\">UIImageView</span> alloc]initWithImage:newImage];</div><div class=\"line\">[newImagerelease];</div><div class=\"line\">[image release];</div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:imageView];</div></pre></td></tr></table></figure>\n\n<p></p><p>17.实现点击图片进行跳转的代码：生成一个带有背景图片的button，给button绑定想要的事件！</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIButton</span> *imgButton=[[<span class=\"built_in\">UIButton</span> alloc]initWithFrame:CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">120</span>, <span class=\"number\">120</span>)];</div><div class=\"line\">[imgButton setBackgroundImage:(<span class=\"built_in\">UIImage</span> *)[<span class=\"keyword\">self</span><span class=\"variable\">.imgArray</span> objectAtIndex:indexPath<span class=\"variable\">.row</span>] forState:UIControlStateNormal];</div><div class=\"line\">imgButton<span class=\"variable\">.tag</span>=[indexPath row];</div><div class=\"line\">[imgButton addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClick:) forControlEvents:UIControlEventTouchUpInside];</div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-04-22-chang-yong-dai-ma.markdown","raw":"---\nlayout: post\ntitle: \"常用代码\"\ndate: 2013-04-22 11:38\ncomments: true\ncategories: IOS\n---\n<p>1.判断邮箱格式是否正确的代码</p>\n{% codeblock lang:objc %}\n-(BOOL)isValidateEmail:(NSString *)email\n{\n  NSString *emailRegex = @\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\";\n  NSPredicate *emailTest = [NSPredicate predicateWithFormat:@\"SELF MATCHES%@\",emailRegex];\n  return [emailTest evaluateWithObject:email];\n}\n{% endcodeblock %}\n\n<p>2.图片压缩</p>\n{% codeblock lang:objc %}\n- (UIImage*)imageWithImageSimple:(UIImage*)image scaledToSize:(CGSize)newSize\n{\n// Create a graphics image context\n   UIGraphicsBeginImageContext(newSize);\n// Tell the old image to draw in this newcontext, with the desired\n// new size\n   [image drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];\n// Get the new image from the context\n   UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();\n// End the context\n   UIGraphicsEndImageContext();\n// Return the new image.\n   return newImage;\n}\n{% endcodeblock %}\n\n<p>3.亲测可用的图片上传代码</p>\n{% codeblock lang:objc %}\n- (IBAction)uploadButton:(id)sender \n{\n   UIImage *image = [UIImage imageNamed:@\"1.jpg\"]; //图片名\n   NSData *imageData = UIImageJPEGRepresentation(image,0.5);//压缩比例\n   NSLog(@\"字节数:%i\",[imageData length]);\n// post url\n   NSString *urlString = @\"http://192.168.1.113:8090/text/UploadServlet\";\n//服务器地址\n// setting up the request object now\n   NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init] ;\n   [request setURL:[NSURL URLWithString:urlString]];\n   [request setHTTPMethod:@\"POST\"];\n//\n   NSString *boundary = [NSString stringWithString:@\"---------------------------14737809831466499882746641449\"];\n   NSString *contentType = [NSString stringWithFormat:@\"multipart/form-data;boundary=%@\",boundary];\n   [request addValue:contentType forHTTPHeaderField: @\"Content-Type\"];\n//\n   NSMutableData *body = [NSMutableData data];\n   [body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@\\r\\n\",boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n   [body appendData:[[NSString stringWithString:@\"Content-Disposition:form-data; name=\\\"userfile\\\"; filename=\\\"2.png\\\"\\r\\n\"] dataUsingEncoding:NSUTF8StringEncoding]]; //上传上去的图片名字\n   [body appendData:[[NSString stringWithString:@\"Content-Type: application/octet-stream\\r\\n\\r\\n\"] dataUsingEncoding:NSUTF8StringEncoding]];\n   [body appendData:[NSData dataWithData:imageData]];\n   [body appendData:[[NSString stringWithFormat:@\"\\r\\n--%@--\\r\\n\",boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n   [request setHTTPBody:body];\n// NSLog(@\"1-body:%@\",body);\n   NSLog(@\"2-request:%@\",request);\n   NSData *returnData = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:nil];\n   NSString *returnString = [[NSString alloc] initWithData:returnData encoding:NSUTF8StringEncoding];\n   NSLog(@\"3-测试输出：%@\",returnString);\n{% endcodeblock %}\n\n<!--more-->\n\n<p>4.给imageView加载图片</p>\n{% codeblock lang:objc %}\nUIImage *myImage = [UIImage imageNamed:@\"1.jpg\"];\n[imageView setImage:myImage];\n[self.view addSubview:imageView];\n{% endcodeblock %}\n\n<p>5.对图库的操作</p>\n{% codeblock lang:objc %}\nUIImagePickerControllerSourceTypesourceType=UIImagePickerControllerSourceTypeCamera;\nif (![UIImagePickerControllerisSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) \n{\nsourceType=UIImagePickerControllerSourceTypePhotoLibrary;\n}\nUIImagePickerController * picker = [[UIImagePickerControlleralloc]init];\npicker.delegate = self;\npicker.allowsEditing=YES;\npicker.sourceType=sourceType;\n[self presentModalViewController:picker animated:YES];\n{% endcodeblock %}\n\n{% codeblock lang:objc %}\n-(void)imagePickerController:(UIImagePickerController*)pickerdidFinishPickingMediaWithInfo:(NSDictionary *)info\n{\n [picker dismissModalViewControllerAnimated:YES];\n UIImage * image=[info objectForKey:UIImagePickerControllerEditedImage];\n [self performSelector:@selector(selectPic:) withObject:imageafterDelay:0.1];\n}\n{% endcodeblock %}\n\n{% codeblock lang:objc %}\n-(void)selectPic:(UIImage*)image\n{\n   NSLog(@\"image%@\",image);\n  imageView = [[UIImageView alloc] initWithImage:image];\n  imageView.frame = CGRectMake(0, 0, image.size.width, image.size.height);\n  [self.viewaddSubview:imageView];\n  [self performSelectorInBackground:@selector(detect:) withObject:nil];\n}\n{% endcodeblock %}\n\n\n{% codeblock lang:objc %}\n-(void)imagePickerControllerDIdCancel:(UIImagePickerController*)picker\n{\n  [picker dismissModalViewControllerAnimated:YES];\n}\n{% endcodeblock %}\n\n\n\n<p>6.跳到下个View</p>\n{% codeblock lang:objc %}\nnextWebView = [[WEBViewController alloc] initWithNibName:@\"WEBViewController\" bundle:nil];\n[self presentModalViewController:nextWebView animated:YES];\n//创建一个UIBarButtonItem右边按钮\nUIBarButtonItem *rightButton = [[UIBarButtonItem alloc] initWithTitle:@\"右边\" style:UIBarButtonItemStyleDone target:self action:@selector(clickRightButton)];\n[self.navigationItem setRightBarButtonItem:rightButton];\n设置navigationBar隐藏\nself.navigationController.navigationBarHidden = YES;//\niOS开发之UIlabel多行文字自动换行 （自动折行）\nUIView *footerView = [[UIView alloc]initWithFrame:CGRectMake(10, 100, 300, 180)];\nUILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(10, 100, 300, 150)];\nlabel.text = @\"Hello world! Hello world!Hello world! Hello world! Hello world! Hello world! Hello world! Hello world!Hello world! Hello world! Hello world! Hello world! Hello world! Helloworld!\";\n//背景颜色为红色\nlabel.backgroundColor = [UIColor redColor];\n//设置字体颜色为白色\nlabel.textColor = [UIColor whiteColor];\n//文字居中显示\nlabel.textAlignment = UITextAlignmentCenter;\n//自动折行设置\nlabel.lineBreakMode = UILineBreakModeWordWrap;\nlabel.numberOfLines = 0;\n{% endcodeblock %}\n\n<p>7.代码生成button</p>\n{% codeblock lang:objc %}\nCGRect frame = CGRectMake(0, 400, 72.0, 37.0);\nUIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];\nbutton.frame = frame;\n[button setTitle:@\"新添加的按钮\" forState: UIControlStateNormal];\nbutton.backgroundColor = [UIColor clearColor];\nbutton.tag = 2000;\n[button addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];\n[self.view addSubview:button];\n{% endcodeblock %}\n\n<p>8.让某个控件在View的中心位置显示</p>\n{% codeblock lang:objc %}\nlabel.center = self.view.center;\n{% endcodeblock %}\n\n<p>9.好看的文字处理</p>\n{% codeblock lang:objc %}\ncell.backgroundColor = [UIColorscrollViewTexturedBackgroundColor];\n//设置文字的字体\ncell.textLabel.font = [UIFont fontWithName:@\"AmericanTypewriter\" size:100.0f];\n//设置文字的颜色\ncell.textLabel.textColor = [UIColor orangeColor];\n//设置文字的背景颜色\ncell.textLabel.shadowColor = [UIColor whiteColor];\n//设置文字的显示位置\ncell.textLabel.textAlignment = UITextAlignmentCenter;\n{% endcodeblock %}\n\n<p>10.隐藏Status Bar</p>\n{% codeblock lang:objc %}\n-(void)ViewDidLoad\n{\n  [[UIApplication sharedApplication]setStatusBarHidden:YES animated:NO];\n}\n{% endcodeblock %}\n\n<p>11.更改AlertView背景</p>\n{% codeblock lang:objc %}\nUIAlertView *theAlert = [[[UIAlertViewalloc] initWithTitle:@\"Atention\"\nmessage: @\"I'm a Chinese!\"\ndelegate:nil\ncancelButtonTitle:@\"Cancel\"\notherButtonTitles:@\"Okay\",nil] autorelease];\n[theAlert show];\nUIImage *theImage = [UIImageimageNamed:@\"loveChina.png\"];\ntheImage = [theImage stretchableImageWithLeftCapWidth:0topCapHeight:0];\nCGSize theSize = [theAlert frame].size;\nUIGraphicsBeginImageContext(theSize);\n[theImage drawInRect:CGRectMake(5, 5, theSize.width-10, theSize.height-20)];//这个地方的大小要自己调整，以适应alertview的背景颜色的大小。\ntheImage = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\ntheAlert.layer.contents = (id)[theImage CGImage];\n{% endcodeblock %}\n\n<p>12.键盘透明</p>\n{% codeblock lang:objc %}\ntextField.keyboardAppearance = UIKeyboardAppearanceAlert;\n{% endcodeblock %}\n\n<p>13.截取屏幕图片</p>\n{% codeblock lang:objc %}\n//创建一个基于位图的图形上下文并指定大小为CGSizeMake(200,400)\nUIGraphicsBeginImageContext(CGSizeMake(200,400));\n//renderInContext 呈现接受者及其子范围到指定的上下文\n[self.view.layer renderInContext:UIGraphicsGetCurrentContext()];\n//返回一个基于当前图形上下文的图片\nUIImage *aImage = UIGraphicsGetImageFromCurrentImageContext();\n//移除栈顶的基于当前位图的图形上下文\nUIGraphicsEndImageContext();\n//以png格式返回指定图片的数据\nimageData = UIImagePNGRepresentation(aImage);\n{% endcodeblock %}\n\n<p>14.更改cell选中的背景</p>\n{% codeblock lang:objc %}\nUIView *myview = [[UIView alloc] init];\nmyview.frame = CGRectMake(0, 0, 320, 47);\nmyview.backgroundColor = [UIColorcolorWithPatternImage:[UIImage imageNamed:@\"0006.png\"]];\ncell.selectedBackgroundView = myview;\n{% endcodeblock %}\n\n<p>15.显示图像</p>\n{% codeblock lang:objc %}\nCGRect myImageRect = CGRectMake(0.0f, 0.0f, 320.0f, 109.0f);\nUIImageView *myImage = [[UIImageView alloc] initWithFrame:myImageRect];\n[myImage setImage:[UIImage imageNamed:@\"myImage.png\"]];\nmyImage.opaque = YES; //opaque是否透明\n[self.view addSubview:myImage];\n{% endcodeblock %}\n\n<p>16.能让图片适应框的大小（没有确认）</p>\n{% codeblock lang:objc %}\nNSString*imagePath = [[NSBundle mainBundle] pathForResource:@\"XcodeCrash\"ofType:@\"png\"];\nUIImage *image = [[UIImage alloc]initWithContentsOfFile:imagePath];\nUIImage *newImage= [image transformWidth:80.f height:240.f];\nUIImageView *imageView = [[UIImageView alloc]initWithImage:newImage];\n[newImagerelease];\n[image release];\n[self.view addSubview:imageView];\n{% endcodeblock %}\n\n<p>17.实现点击图片进行跳转的代码：生成一个带有背景图片的button，给button绑定想要的事件！</p>\n{% codeblock lang:objc %}\nUIButton *imgButton=[[UIButton alloc]initWithFrame:CGRectMake(0, 0, 120, 120)];\n[imgButton setBackgroundImage:(UIImage *)[self.imgArray objectAtIndex:indexPath.row] forState:UIControlStateNormal];\nimgButton.tag=[indexPath row];\n[imgButton addTarget:self action:@selector(buttonClick:) forControlEvents:UIControlEventTouchUpInside];\n{% endcodeblock %}\n","slug":"IOS/2013-04-22-chang-yong-dai-ma","updated":1416373854000,"excerpt":"<p></p><p>1.判断邮箱格式是否正确的代码</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"built_in\">BOOL</span>)isValidateEmail:(<span class=\"built_in\">NSString</span> *)email</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">NSString</span> *emailRegex = <span class=\"string\">@\"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\"</span>;</div><div class=\"line\">  NSPredicate *emailTest = [NSPredicate predicateWithFormat:<span class=\"string\">@\"SELF MATCHES%@\"</span>,emailRegex];</div><div class=\"line\">  <span class=\"keyword\">return</span> [emailTest evaluateWithObject:email];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p></p><p>2.图片压缩</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIImage</span>*)imageWithImageSimple:(<span class=\"built_in\">UIImage</span>*)image scaledToSize:(<span class=\"built_in\">CGSize</span>)newSize</div><div class=\"line\">{</div><div class=\"line\"><span class=\"comment\">// Create a graphics image context</span></div><div class=\"line\">   UIGraphicsBeginImageContext(newSize);</div><div class=\"line\"><span class=\"comment\">// Tell the old image to draw in this newcontext, with the desired</span></div><div class=\"line\"><span class=\"comment\">// new size</span></div><div class=\"line\">   [image drawInRect:CGRectMake(<span class=\"number\">0</span>,<span class=\"number\">0</span>,newSize<span class=\"variable\">.width</span>,newSize<span class=\"variable\">.height</span>)];</div><div class=\"line\"><span class=\"comment\">// Get the new image from the context</span></div><div class=\"line\">   <span class=\"built_in\">UIImage</span>* newImage = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\"><span class=\"comment\">// End the context</span></div><div class=\"line\">   UIGraphicsEndImageContext();</div><div class=\"line\"><span class=\"comment\">// Return the new image.</span></div><div class=\"line\">   <span class=\"keyword\">return</span> newImage;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p></p><p>3.亲测可用的图片上传代码</p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)uploadButton:(<span class=\"keyword\">id</span>)sender </div><div class=\"line\">{</div><div class=\"line\">   <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"1.jpg\"</span>]; <span class=\"comment\">//图片名</span></div><div class=\"line\">   NSData *imageData = UIImageJPEGRepresentation(image,<span class=\"number\">0.5</span>);<span class=\"comment\">//压缩比例</span></div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"字节数:%i\"</span>,[imageData length]);</div><div class=\"line\"><span class=\"comment\">// post url</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *urlString = <span class=\"string\">@\"http://192.168.1.113:8090/text/UploadServlet\"</span>;</div><div class=\"line\"><span class=\"comment\">//服务器地址</span></div><div class=\"line\"><span class=\"comment\">// setting up the request object now</span></div><div class=\"line\">   NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init] ;</div><div class=\"line\">   [request setURL:[<span class=\"built_in\">NSURL</span> URLWithString:urlString]];</div><div class=\"line\">   [request setHTTPMethod:<span class=\"string\">@\"POST\"</span>];</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *boundary = [<span class=\"built_in\">NSString</span> stringWithString:<span class=\"string\">@\"---------------------------14737809831466499882746641449\"</span>];</div><div class=\"line\">   <span class=\"built_in\">NSString</span> *contentType = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"multipart/form-data;boundary=%@\"</span>,boundary];</div><div class=\"line\">   [request addValue:contentType forHTTPHeaderField: <span class=\"string\">@\"Content-Type\"</span>];</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\">   NSMutableData *body = [NSMutableData data];</div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\r\\n--%@\\r\\n\"</span>,boundary] dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithString:<span class=\"string\">@\"Content-Disposition:form-data; name=\\\"userfile\\\"; filename=\\\"2.png\\\"\\r\\n\"</span>] dataUsingEncoding:NSUTF8StringEncoding]]; <span class=\"comment\">//上传上去的图片名字</span></div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithString:<span class=\"string\">@\"Content-Type: application/octet-stream\\r\\n\\r\\n\"</span>] dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">   [body appendData:[NSData dataWithData:imageData]];</div><div class=\"line\">   [body appendData:[[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"\\r\\n--%@--\\r\\n\"</span>,boundary] dataUsingEncoding:NSUTF8StringEncoding]];</div><div class=\"line\">   [request setHTTPBody:body];</div><div class=\"line\"><span class=\"comment\">// NSLog(@\"1-body:%@\",body);</span></div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2-request:%@\"</span>,request);</div><div class=\"line\">   NSData *returnData = [<span class=\"built_in\">NSURLConnection</span> sendSynchronousRequest:request returningResponse:<span class=\"literal\">nil</span> error:<span class=\"literal\">nil</span>];</div><div class=\"line\">   <span class=\"built_in\">NSString</span> *returnString = [[<span class=\"built_in\">NSString</span> alloc] initWithData:returnData encoding:NSUTF8StringEncoding];</div><div class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3-测试输出：%@\"</span>,returnString);</div></pre></td></tr></table></figure>\n\n","_id":"jevwv0fsio0ge74p","tags":[],"photos":[],"link":""},{"layout":"post","title":"Grand Central Dispatch ","date":1366609560000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>Grand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。该方法在Mac OS X 10.6雪豹中首次推出，并随后被引入到了iOS4.0中。GCD是一个替代诸如NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，它看起来象就其它语言的闭包(Closure)一样，但苹果把它叫做blocks<br></p>\n\n<p><br>应用举例<br>让我们来看一个编程场景。我们要在iphone上做一个下载网页的功能，该功能非常简单，就是在iphone上放置一个按钮，点击该按钮时，显示一个转动的圆圈，表示正在进行下载，下载完成之后，将内容加载到界面上的一个文本控件中。不用GCD前<br>虽然功能简单，但是我们必须把下载过程放到后台线程中，否则会阻塞UI线程显示。所以，如果不用GCD, 我们需要写如下3个方法：<font color=\"red\">someClick</font> 方法是点击按钮后的代码，可以看到我们用NSInvocationOperation建了一个后台线程，并且放到NSOperationQueue中。后台线程执行<font color=\"red\">download</font>方法。<br><font color=\"red\">download</font> 方法处理下载网页的逻辑。下载完成后用<font color=\"red\">performSelectorOnMainThread</font>执行<font color=\"red\">download_completed</font> 方法。<br><font color=\"red\">download_completed</font> 进行clear up的工作，并把下载的内容显示到文本控件中。<br><br>这3个方法的代码如下:<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">IBAction</span>)someClick:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">{ </div><div class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.indicator</span><span class=\"variable\">.hidden</span> = <span class=\"literal\">NO</span>; </div><div class=\"line\">  [<span class=\"keyword\">self</span><span class=\"variable\">.indicatorstart</span>  Animating];</div><div class=\"line\">  queue = [[NSOperationQueue  alloc]init];</div><div class=\"line\">  NSInvocationOperation *op = [[[NSInvocationOperation alloc]initWithTarget:<span class=\"keyword\">self</span> </div><div class=\"line\">                                                                   selector:<span class=\"keyword\">@selector</span>(download) </div><div class=\"line\">                                                                     object:<span class=\"literal\">nil</span>]autorelease];    </div><div class=\"line\">  [queueaddOperation:op];</div><div class=\"line\"> }</div></pre></td></tr></table></figure><br><a id=\"more\"></a><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">void</span>)download</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">NSURL</span> *url = [NSURLURLWithString:<span class=\"string\">@\"http://www.youdao.com\"</span>];</div><div class=\"line\">  <span class=\"built_in\">NSError</span>*error;</div><div class=\"line\">  <span class=\"built_in\">NSString</span> *data =  [<span class=\"built_in\">NSString</span> stringWithContentsOfURL:url </div><div class=\"line\">                                             encoding:NSUTF8StringEncoding</div><div class=\"line\">                                                error:&amp;error];</div><div class=\"line\">  <span class=\"keyword\">if</span>(data != <span class=\"literal\">nil</span>)</div><div class=\"line\">  {</div><div class=\"line\">    [<span class=\"keyword\">self</span> performSelectorOnMainThread:<span class=\"keyword\">@selector</span>(download_completed:)</div><div class=\"line\">                          withObject:data </div><div class=\"line\">                       waitUntilDone:<span class=\"literal\">NO</span>];</div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\"> {</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"error when download:%@\"</span>,error);</div><div class=\"line\">   [queue  release];</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)download_completed:(<span class=\"built_in\">NSString</span>*)data</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"call back\"</span>);</div><div class=\"line\">  [<span class=\"keyword\">self</span><span class=\"variable\">.indicator</span>  stopAnimating];</div><div class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.indicator</span><span class=\"variable\">.hidden</span> = <span class=\"literal\">YES</span>;</div><div class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.content</span><span class=\"variable\">.text</span> = data;</div><div class=\"line\">  [queue  release];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>使用GCD后<br>如果使用GCD，以上3个方法都可以放到一起，如下所示：</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)download</div><div class=\"line\">{</div><div class=\"line\">   <span class=\"keyword\">self</span><span class=\"variable\">.indicator</span><span class=\"variable\">.hidden</span> = <span class=\"literal\">NO</span>;  </div><div class=\"line\">   [<span class=\"keyword\">self</span><span class=\"variable\">.indicator</span>  startAnimating];</div><div class=\"line\">   <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,<span class=\"number\">0</span>),^{ </div><div class=\"line\">   <span class=\"built_in\">NSURL</span>*url = [NSURLURLWithString:<span class=\"string\">@\"http://www.youdao.com\"</span>];</div><div class=\"line\">   <span class=\"built_in\">NSError</span> *error;</div><div class=\"line\">   <span class=\"built_in\">NSString</span> *data = [<span class=\"built_in\">NSString</span> stringWithContentsOfURL:url</div><div class=\"line\">                                             encoding:NSUTF8StringEncoding</div><div class=\"line\">                                                error:&amp;error];</div><div class=\"line\">   <span class=\"keyword\">if</span>(data!=<span class=\"literal\">nil</span>)</div><div class=\"line\">   { </div><div class=\"line\">      <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(),^{</div><div class=\"line\">      [<span class=\"keyword\">self</span><span class=\"variable\">.indicator</span>  stopAnimating];</div><div class=\"line\">      <span class=\"keyword\">self</span><span class=\"variable\">.indicator</span><span class=\"variable\">.hidden</span> = <span class=\"literal\">YES</span>;</div><div class=\"line\">      <span class=\"keyword\">self</span><span class=\"variable\">.content</span><span class=\"variable\">.text</span>=data;});</div><div class=\"line\">   }</div><div class=\"line\">   <span class=\"keyword\">else</span></div><div class=\"line\">   {</div><div class=\"line\">      <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"error when download:%@\"</span>,error);</div><div class=\"line\">   }</div><div class=\"line\">   });</div><div class=\"line\">}</div></pre></td></tr></table></figure><br><br><p>首先我们可以看到，代码变短了。因为少了原来3个方法的定义，也少了相互之间需要传递的变量的封装。<br>另外，代码变清楚了，虽然是异步的代码，但是它们被GCD合理的整合在一起，逻辑非常清晰。如果应用上MVC模式，我们也可以将View Controller层的回调函数用GCD的方式传递给Modal层，这相比以前用@selector的方式，代码的逻辑关系会更加清楚。<br></p>\n\n<h3 id=\"GCD的定义\">GCD的定义</h3>\n<p>简单GCD的定义有点象函数指针，差别是用 ^ 替代了函数指针的 * 号，如下所示：</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 申明变量</span></div><div class=\"line\">(<span class=\"keyword\">void</span>) (^loggerBlock)(<span class=\"keyword\">void</span>);</div><div class=\"line\"><span class=\"comment\">// 定义</span></div><div class=\"line\"></div><div class=\"line\">loggerBlock = ^{</div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Hello world\"</span>);</div><div class=\"line\">};</div><div class=\"line\"><span class=\"comment\">// 调用</span></div><div class=\"line\">loggerBlock();</div></pre></td></tr></table></figure><br><br><p>但是大多数时候，我们通常使用内联的方式来定义它，即将它的程序块写在调用的函数里面，例如这样：</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>), ^{</div><div class=\"line\">      <span class=\"comment\">// something</span></div><div class=\"line\"> });</div></pre></td></tr></table></figure>\n\n<p>从上面大家可以看出，block有如下特点：</p>\n\n<p><br>程序块可以在代码中以内联的方式来定义。<br>程序块可以访问在创建它的范围内的可用的变量。<br></p>\n\n<h3 id=\"系统提供的dispatch方法\">系统提供的dispatch方法</h3>\n<p><br>为了方便地使用GCD，苹果提供了一些方法方便我们将block放在主线程 或 后台线程执行，或者延后执行。使用的例子如下：<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  后台执行：</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(<span class=\"number\">0</span>, <span class=\"number\">0</span>), ^{</div><div class=\"line\">     <span class=\"comment\">// something</span></div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// 主线程执行：</span></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^{</div><div class=\"line\">     <span class=\"comment\">// something</span></div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// 一次性执行：</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\"><span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^{</div><div class=\"line\">    <span class=\"comment\">// code to be executed once</span></div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// 延迟2秒执行：</span></div><div class=\"line\"><span class=\"keyword\">double</span> delayInSeconds = <span class=\"number\">2.0</span>;</div><div class=\"line\">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);</div><div class=\"line\">dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class=\"keyword\">void</span>){</div><div class=\"line\">    <span class=\"comment\">// code to be executed on the main queue after delay</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>dispatch_queue_t 也可以自己定义，如要要自定义queue，可以用dispatch_queue_create方法，示例如下：<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">dispatch_queue_t</span> urls_queue = dispatch_queue_create(<span class=\"string\">\"blog.devtang.com\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(urls_queue, ^{</div><div class=\"line\">     <span class=\"comment\">// your code</span></div><div class=\"line\">});</div><div class=\"line\">dispatch_release(urls_queue);</div></pre></td></tr></table></figure>\n\n<p><br>另外，GCD还有一些高级用法，例如让后台2个线程并行执行，然后等2个线程都结束后，再汇总执行结果。这个可以用dispatch_group, dispatch_group_async 和 dispatch_group_notify来实现，示例如下：<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">dispatch_group_t group = dispatch_group_create();</div><div class=\"line\"> dispatch_group_async(group, dispatch_get_global_queue(<span class=\"number\">0</span>,<span class=\"number\">0</span>), ^{</div><div class=\"line\">      <span class=\"comment\">// 并行执行的线程一</span></div><div class=\"line\"> });</div><div class=\"line\"> dispatch_group_async(group, dispatch_get_global_queue(<span class=\"number\">0</span>,<span class=\"number\">0</span>), ^{</div><div class=\"line\">      <span class=\"comment\">// 并行执行的线程二</span></div><div class=\"line\"> });</div><div class=\"line\"> dispatch_group_notify(group, dispatch_get_global_queue(<span class=\"number\">0</span>,<span class=\"number\">0</span>), ^{</div><div class=\"line\">      <span class=\"comment\">// 汇总结果</span></div><div class=\"line\"> });</div></pre></td></tr></table></figure>\n\n<h3 id=\"修改block之外的变量\">修改block之外的变量</h3>\n<p><br>默认情况下，在程序块中访问的外部变量是复制过去的，即写操作不对原变量生效。但是你可以加上 __block来让其写操作生效，示例代码如下：<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">__block <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">void</span>  (^foo)(<span class=\"keyword\">void</span>) = ^{</div><div class=\"line\">     a = <span class=\"number\">1</span>;</div><div class=\"line\">}</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"comment\">// 这里，a的值被修改为1</span></div></pre></td></tr></table></figure>\n\n\n<h3 id=\"后台运行\">后台运行</h3>\n<p><br>GCD的另一个用处是可以让程序在后台较长久的运行。在没有使用GCD时，当app被按home键退出后，app仅有最多5秒钟的时候做一些保存或清理资源的工作。但是在使用GCD后，app最多有10分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。<br><br>让程序在后台长久运行的示例代码如下：<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// AppDelegate.h文件</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) UIBackgroundTaskIdentifier backgroundUpdateTask;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// AppDelegate.m文件</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)applicationDidEnterBackground:(<span class=\"built_in\">UIApplication</span> *)application</div><div class=\"line\">{</div><div class=\"line\">    [<span class=\"keyword\">self</span> beingBackgroundUpdateTask];</div><div class=\"line\">    <span class=\"comment\">// 在这里加上你需要长久运行的代码</span></div><div class=\"line\">    [<span class=\"keyword\">self</span> endBackgroundUpdateTask];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)beingBackgroundUpdateTask</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.backgroundUpdateTask</span> = [[<span class=\"built_in\">UIApplication</span> sharedApplication] beginBackgroundTaskWithExpirationHandler:^{</div><div class=\"line\">        [<span class=\"keyword\">self</span> endBackgroundUpdateTask];</div><div class=\"line\">    }];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)endBackgroundUpdateTask</div><div class=\"line\">{</div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] endBackgroundTask: <span class=\"keyword\">self</span><span class=\"variable\">.backgroundUpdateTask</span>];</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.backgroundUpdateTask</span> = UIBackgroundTaskInvalid;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"总结\">总结</h3>\n<p><br>总体来说，GCD能够极大地方便开发者进行多线程编程。如果你的app不需要支持iOS4.0以下的系统，那么就应该尽量使用GCD来处理后台线程和UI线程的交互。<br></p>\n\n\n\n","source":"_posts/IOS/2013-04-22-grand-central-dispatch.markdown","raw":"---\nlayout: post\ntitle: \"Grand Central Dispatch \"\ndate: 2013-04-22 13:46\ncomments: true\ncategories: IOS\n---\n<p>\nGrand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。该方法在Mac OS X 10.6雪豹中首次推出，并随后被引入到了iOS4.0中。GCD是一个替代诸如NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，它看起来象就其它语言的闭包(Closure)一样，但苹果把它叫做blocks\n</p>\n\n<p>\n应用举例\n让我们来看一个编程场景。我们要在iphone上做一个下载网页的功能，该功能非常简单，就是在iphone上放置一个按钮，点击该按钮时，显示一个转动的圆圈，表示正在进行下载，下载完成之后，将内容加载到界面上的一个文本控件中。不用GCD前\n虽然功能简单，但是我们必须把下载过程放到后台线程中，否则会阻塞UI线程显示。所以，如果不用GCD, 我们需要写如下3个方法：<font color='red'>someClick</font> 方法是点击按钮后的代码，可以看到我们用NSInvocationOperation建了一个后台线程，并且放到NSOperationQueue中。后台线程执行<font color='red'>download</font>方法。\n<font color='red'>download</font> 方法处理下载网页的逻辑。下载完成后用<font color='red'>performSelectorOnMainThread</font>执行<font color='red'>download_completed</font> 方法。\n<font color='red'>download_completed</font> 进行clear up的工作，并把下载的内容显示到文本控件中。\n\n这3个方法的代码如下:\n</p>\n\n{% codeblock lang:objc %}\n-(IBAction)someClick:(id)sender\n{ \n  self.indicator.hidden = NO; \n  [self.indicatorstart  Animating];\n  queue = [[NSOperationQueue  alloc]init];\n  NSInvocationOperation *op = [[[NSInvocationOperation alloc]initWithTarget:self \n                                                                   selector:@selector(download) \n                                                                     object:nil]autorelease];    \n  [queueaddOperation:op];\n }\n\n{% endcodeblock %}\n<!--more-->\n{% codeblock lang:objc %}\n-(void)download\n{\n  NSURL *url = [NSURLURLWithString:@\"http://www.youdao.com\"];\n  NSError*error;\n  NSString *data =  [NSString stringWithContentsOfURL:url \n                                             encoding:NSUTF8StringEncoding\n                                                error:&error];\n  if(data != nil)\n  {\n    [self performSelectorOnMainThread:@selector(download_completed:)\n                          withObject:data \n                       waitUntilDone:NO];\n  }\n  else\n {\n    NSLog(@\"error when download:%@\",error);\n   [queue  release];\n  }\n}\n\n{% endcodeblock %}\n\n\n{% codeblock lang:objc %}\n\n-(void)download_completed:(NSString*)data\n{\n  NSLog(@\"call back\");\n  [self.indicator  stopAnimating];\n  self.indicator.hidden = YES;\n  self.content.text = data;\n  [queue  release];\n}\n\n{% endcodeblock %}\n\n<p>使用GCD后\n如果使用GCD，以上3个方法都可以放到一起，如下所示：</p>\n{% codeblock lang:objc %}\n\n- (void)download\n{\n   self.indicator.hidden = NO;  \n   [self.indicator  startAnimating];\n   dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0),^{ \n   NSURL*url = [NSURLURLWithString:@\"http://www.youdao.com\"];\n   NSError *error;\n   NSString *data = [NSString stringWithContentsOfURL:url\n                                             encoding:NSUTF8StringEncoding\n                                                error:&error];\n   if(data!=nil)\n   { \n      dispatch_async(dispatch_get_main_queue(),^{\n      [self.indicator  stopAnimating];\n      self.indicator.hidden = YES;\n      self.content.text=data;});\n   }\n   else\n   {\n      NSLog(@\"error when download:%@\",error);\n   }\n   });\n}\n\n{% endcodeblock %}\n\n<p>首先我们可以看到，代码变短了。因为少了原来3个方法的定义，也少了相互之间需要传递的变量的封装。\n另外，代码变清楚了，虽然是异步的代码，但是它们被GCD合理的整合在一起，逻辑非常清晰。如果应用上MVC模式，我们也可以将View Controller层的回调函数用GCD的方式传递给Modal层，这相比以前用@selector的方式，代码的逻辑关系会更加清楚。\n</p>\n\n###GCD的定义\n\n<p>简单GCD的定义有点象函数指针，差别是用 ^ 替代了函数指针的 * 号，如下所示：</p>\n{% codeblock lang:objc %}\n // 申明变量\n (void) (^loggerBlock)(void);\n // 定义\n\n loggerBlock = ^{\n      NSLog(@\"Hello world\");\n };\n // 调用\n loggerBlock();\n{% endcodeblock %}\n\n<p>但是大多数时候，我们通常使用内联的方式来定义它，即将它的程序块写在调用的函数里面，例如这样：</p>\n\n{% codeblock lang:objc %}\ndispatch_async(dispatch_get_global_queue(0, 0), ^{\n      // something\n });\n{% endcodeblock %}\n\n<p>从上面大家可以看出，block有如下特点：</p>\n\n<p>\n程序块可以在代码中以内联的方式来定义。\n程序块可以访问在创建它的范围内的可用的变量。\n</p>\n\n###系统提供的dispatch方法\n\n<p>\n为了方便地使用GCD，苹果提供了一些方法方便我们将block放在主线程 或 后台线程执行，或者延后执行。使用的例子如下：\n</p>\n\n{% codeblock lang:objc %}\n //  后台执行：\n dispatch_async(dispatch_get_global_queue(0, 0), ^{\n      // something\n });\n // 主线程执行：\n dispatch_async(dispatch_get_main_queue(), ^{\n      // something\n });\n // 一次性执行：\n static dispatch_once_t onceToken;\n dispatch_once(&onceToken, ^{\n     // code to be executed once\n });\n // 延迟2秒执行：\n double delayInSeconds = 2.0;\n dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);\n dispatch_after(popTime, dispatch_get_main_queue(), ^(void){\n     // code to be executed on the main queue after delay\n });\n{% endcodeblock %}\n\n<p>dispatch_queue_t 也可以自己定义，如要要自定义queue，可以用dispatch_queue_create方法，示例如下：\n</p>\n\n{% codeblock lang:objc %}\ndispatch_queue_t urls_queue = dispatch_queue_create(\"blog.devtang.com\", NULL);\ndispatch_async(urls_queue, ^{\n     // your code\n});\ndispatch_release(urls_queue);\n{% endcodeblock %}\n\n<p>\n另外，GCD还有一些高级用法，例如让后台2个线程并行执行，然后等2个线程都结束后，再汇总执行结果。这个可以用dispatch_group, dispatch_group_async 和 dispatch_group_notify来实现，示例如下：\n</p>\n\n{% codeblock lang:objc %}\ndispatch_group_t group = dispatch_group_create();\n dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{\n      // 并行执行的线程一\n });\n dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{\n      // 并行执行的线程二\n });\n dispatch_group_notify(group, dispatch_get_global_queue(0,0), ^{\n      // 汇总结果\n });\n{% endcodeblock %}\n\n###修改block之外的变量\n\n\n<p>\n默认情况下，在程序块中访问的外部变量是复制过去的，即写操作不对原变量生效。但是你可以加上 __block来让其写操作生效，示例代码如下：\n</p>\n\n{% codeblock lang:objc %}\n __block int a = 0;\n void  (^foo)(void) = ^{\n      a = 1;\n }\n foo();\n // 这里，a的值被修改为1\n{% endcodeblock %}\n\n\n###后台运行\n\n<p>\nGCD的另一个用处是可以让程序在后台较长久的运行。在没有使用GCD时，当app被按home键退出后，app仅有最多5秒钟的时候做一些保存或清理资源的工作。但是在使用GCD后，app最多有10分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。\n\n让程序在后台长久运行的示例代码如下：\n</p>\n\n{% codeblock lang:objc %}\n// AppDelegate.h文件\n@property (assign, nonatomic) UIBackgroundTaskIdentifier backgroundUpdateTask;\n\n// AppDelegate.m文件\n- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    [self beingBackgroundUpdateTask];\n    // 在这里加上你需要长久运行的代码\n    [self endBackgroundUpdateTask];\n}\n\n- (void)beingBackgroundUpdateTask\n{\n    self.backgroundUpdateTask = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{\n        [self endBackgroundUpdateTask];\n    }];\n}\n\n- (void)endBackgroundUpdateTask\n{\n    [[UIApplication sharedApplication] endBackgroundTask: self.backgroundUpdateTask];\n    self.backgroundUpdateTask = UIBackgroundTaskInvalid;\n}\n{% endcodeblock %}\n\n###总结\n<p>\n总体来说，GCD能够极大地方便开发者进行多线程编程。如果你的app不需要支持iOS4.0以下的系统，那么就应该尽量使用GCD来处理后台线程和UI线程的交互。\n</p>\n\n\n\n","slug":"IOS/2013-04-22-grand-central-dispatch","updated":1416373854000,"excerpt":"<p><br>Grand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。该方法在Mac OS X 10.6雪豹中首次推出，并随后被引入到了iOS4.0中。GCD是一个替代诸如NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，它看起来象就其它语言的闭包(Closure)一样，但苹果把它叫做blocks<br></p>\n\n<p><br>应用举例<br>让我们来看一个编程场景。我们要在iphone上做一个下载网页的功能，该功能非常简单，就是在iphone上放置一个按钮，点击该按钮时，显示一个转动的圆圈，表示正在进行下载，下载完成之后，将内容加载到界面上的一个文本控件中。不用GCD前<br>虽然功能简单，但是我们必须把下载过程放到后台线程中，否则会阻塞UI线程显示。所以，如果不用GCD, 我们需要写如下3个方法：<font color=\"red\">someClick</font> 方法是点击按钮后的代码，可以看到我们用NSInvocationOperation建了一个后台线程，并且放到NSOperationQueue中。后台线程执行<font color=\"red\">download</font>方法。<br><font color=\"red\">download</font> 方法处理下载网页的逻辑。下载完成后用<font color=\"red\">performSelectorOnMainThread</font>执行<font color=\"red\">download_completed</font> 方法。<br><font color=\"red\">download_completed</font> 进行clear up的工作，并把下载的内容显示到文本控件中。<br><br>这3个方法的代码如下:<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(<span class=\"keyword\">IBAction</span>)someClick:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">{ </div><div class=\"line\">  <span class=\"keyword\">self</span><span class=\"variable\">.indicator</span><span class=\"variable\">.hidden</span> = <span class=\"literal\">NO</span>; </div><div class=\"line\">  [<span class=\"keyword\">self</span><span class=\"variable\">.indicatorstart</span>  Animating];</div><div class=\"line\">  queue = [[NSOperationQueue  alloc]init];</div><div class=\"line\">  NSInvocationOperation *op = [[[NSInvocationOperation alloc]initWithTarget:<span class=\"keyword\">self</span> </div><div class=\"line\">                                                                   selector:<span class=\"keyword\">@selector</span>(download) </div><div class=\"line\">                                                                     object:<span class=\"literal\">nil</span>]autorelease];    </div><div class=\"line\">  [queueaddOperation:op];</div><div class=\"line\"> }</div></pre></td></tr></table></figure><br>","_id":"ochog3u6u5ff0el8","tags":[],"photos":[],"link":""},{"layout":"post","title":"int型和NSdata型互相转化","date":1366609320000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>int转化成NSdata</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> i =<span class=\"number\">1</span>;</div><div class=\"line\">NSData *data =[NSDatadataWithBytes:&amp;i length:<span class=\"keyword\">sizeof</span>(i)];</div></pre></td></tr></table></figure><br><br><p>NSdata转化成int</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> i = [data getBytes:&amp;i length:<span class=\"keyword\">sizeof</span>(i)];</div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-04-22-intxing-zhuan-hua-wei-nsdata.markdown","raw":"---\nlayout: post\ntitle: \"int型和NSdata型互相转化\"\ndate: 2013-04-22 13:42\ncomments: true\ncategories: IOS\n---\n<p>int转化成NSdata</p>\n{% codeblock lang:objc %}\nint i =1;\nNSData *data =[NSDatadataWithBytes:&i length:sizeof(i)];\n{% endcodeblock %}\n\n<p>NSdata转化成int</p>\n\n{% codeblock lang:objc %}\nint i = [data getBytes:&i length:sizeof(i)];\n{% endcodeblock %}\n","slug":"IOS/2013-04-22-intxing-zhuan-hua-wei-nsdata","updated":1416373854000,"excerpt":"","_id":"9juiwqoqs18xaa8o","tags":[],"photos":[],"link":""},{"layout":"post","title":"IOS获取单文件的大小","date":1366601160000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>c语言实现：</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#include <span class=\"title\">\"sys/stat.h\"</span></span></div><div class=\"line\">- (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>) fileSizeAtPath:(<span class=\"built_in\">NSString</span>*) filePath</div><div class=\"line\">{  </div><div class=\"line\">    <span class=\"keyword\">struct</span> stat st;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(lstat([filePath cStringUsingEncoding:NSUTF8StringEncoding], &amp;st) == <span class=\"number\">0</span>)</div><div class=\"line\">    {  </div><div class=\"line\">        <span class=\"keyword\">return</span> st<span class=\"variable\">.st_size</span>;  </div><div class=\"line\">    }  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">}  </div></pre></td></tr></table></figure><br><br><p>object-c实现：</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>) fileSizeAtPath:(<span class=\"built_in\">NSString</span>*) filePath</div><div class=\"line\">{  </div><div class=\"line\">  <span class=\"built_in\">NSFileManager</span>* manager = [<span class=\"built_in\">NSFileManager</span> defaultManager];  </div><div class=\"line\">  <span class=\"keyword\">if</span> ([manager fileExistsAtPath:filePath])</div><div class=\"line\">  {  </div><div class=\"line\">    <span class=\"keyword\">return</span> [[manager attributesOfItemAtPath:filePath error:<span class=\"literal\">nil</span>] fileSize];  </div><div class=\"line\">  }  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </div><div class=\"line\">}  </div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-04-22-ioshuo-qu-dan-wen-jian-de-da-xiao.markdown","raw":"---\nlayout: post\ntitle: \"IOS获取单文件的大小\"\ndate: 2013-04-22 11:26\ncomments: true\ncategories: IOS\n---\n<p>c语言实现：</p>\n{% codeblock lang:objc %}\n#include \"sys/stat.h\"\n- (long long) fileSizeAtPath:(NSString*) filePath\n{  \n    struct stat st;  \n    if(lstat([filePath cStringUsingEncoding:NSUTF8StringEncoding], &st) == 0)\n    {  \n        return st.st_size;  \n    }  \n    return 0;  \n}  \n\n{% endcodeblock %}\n\n<p>object-c实现：</p>\n\n{% codeblock lang:objc %}\n\n-(long long) fileSizeAtPath:(NSString*) filePath\n{  \n  NSFileManager* manager = [NSFileManager defaultManager];  \n  if ([manager fileExistsAtPath:filePath])\n  {  \n    return [[manager attributesOfItemAtPath:filePath error:nil] fileSize];  \n  }  \n  return 0;  \n}  \n\n{% endcodeblock %}","slug":"IOS/2013-04-22-ioshuo-qu-dan-wen-jian-de-da-xiao","updated":1416373854000,"excerpt":"","_id":"kdgxmydyi77b4m03","tags":[],"photos":[],"link":""},{"layout":"post","title":"IOS设备获取本机IP地址","date":1366603800000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#include <span class=\"title\">&lt;ifaddrs.h&gt;</span></span></div><div class=\"line\"><span class=\"preprocessor\">#include <span class=\"title\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\">- (<span class=\"built_in\">NSString</span>*)getIPAddress</div><div class=\"line\">{</div><div class=\"line\">   <span class=\"built_in\">NSString</span>*address = <span class=\"string\">@\"error\"</span>;</div><div class=\"line\">   structifaddrs*interfaces = <span class=\"literal\">NULL</span>;</div><div class=\"line\">   structifaddrs*temp_addr = <span class=\"literal\">NULL</span>;</div><div class=\"line\">   intsuccess = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">   <span class=\"comment\">// retrieve the current interfaces - returns 0 on success</span></div><div class=\"line\">   success = getifaddrs(&amp;interfaces);</div><div class=\"line\">   <span class=\"keyword\">if</span>(success == <span class=\"number\">0</span>)</div><div class=\"line\">     {</div><div class=\"line\">   <span class=\"comment\">// Loop through linked list of interfaces</span></div><div class=\"line\">        temp_addr = interfaces;</div><div class=\"line\">        <span class=\"keyword\">while</span>(temp_addr != <span class=\"literal\">NULL</span>) </div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"keyword\">if</span>( temp_addr-&gt;ifa_addr-&gt;sa_family== AF_INET) </div><div class=\"line\">            {</div><div class=\"line\">   <span class=\"comment\">// Check if interface is en0 which is the wifi connection on the iPhone</span></div><div class=\"line\">                 <span class=\"keyword\">if</span>([[NSStringstringWithUTF8String:temp_addr-&gt;ifa_name] isEqualToString:<span class=\"string\">@\"en0\"</span>])</div><div class=\"line\">                {</div><div class=\"line\">  <span class=\"comment\">// Get NSString from C String</span></div><div class=\"line\">                   address = [NSStringstringWithUTF8String:inet_ntoa(((structsockaddr_in*)temp_addr-&gt;ifa_addr)-&gt;sin_addr)];</div><div class=\"line\">                }</div><div class=\"line\">            }</div><div class=\"line\">            </div><div class=\"line\">            temp_addr = temp_addr-&gt;ifa_next;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Free memory    </span></div><div class=\"line\">    freeifaddrs(interfaces);</div><div class=\"line\">    returnaddress;</div><div class=\"line\">}</div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-04-22-iosshe-bei-huo-qu-ben-ji-ipdi-zhi.markdown","raw":"---\nlayout: post\ntitle: \"IOS设备获取本机IP地址\"\ndate: 2013-04-22 12:10\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n#include <ifaddrs.h>\n#include <arpa/inet.h>\n- (NSString*)getIPAddress\n{\n   NSString*address = @\"error\";\n   structifaddrs*interfaces = NULL;\n   structifaddrs*temp_addr = NULL;\n   intsuccess = 0;\n    \n   // retrieve the current interfaces - returns 0 on success\n   success = getifaddrs(&interfaces);\n   if(success == 0)\n     {\n   // Loop through linked list of interfaces\n        temp_addr = interfaces;\n        while(temp_addr != NULL) \n        {\n            if( temp_addr->ifa_addr->sa_family== AF_INET) \n            {\n   // Check if interface is en0 which is the wifi connection on the iPhone\n                 if([[NSStringstringWithUTF8String:temp_addr->ifa_name] isEqualToString:@\"en0\"])\n                {\n  // Get NSString from C String\n                   address = [NSStringstringWithUTF8String:inet_ntoa(((structsockaddr_in*)temp_addr->ifa_addr)->sin_addr)];\n                }\n            }\n            \n            temp_addr = temp_addr->ifa_next;\n        }\n    }\n    \n    // Free memory    \n    freeifaddrs(interfaces);\n    returnaddress;\n}\n\n\n{% endcodeblock %}","slug":"IOS/2013-04-22-iosshe-bei-huo-qu-ben-ji-ipdi-zhi","updated":1416373854000,"excerpt":"","_id":"lvxo8xcinamh0po6","tags":[],"photos":[],"link":""},{"layout":"post","title":"NSTimer释放","date":1366603080000,"comments":true,"categories":[],"content":"","source":"_posts/IOS/2013-04-22-nstimershi-fang.markdown","raw":"---\nlayout: post\ntitle: \"NSTimer释放\"\ndate: 2013-04-22 11:58\ncomments: true\ncategories: \n--- IOS\n<p>NSTimer 是一个比较麻烦的东东，理解不清楚的时候释放它、很可能会出现crash。\nNSTimer的创建一般使用俩种方式：</p>\n<p>1， 类方法直接创建：</p>\n\n{% codeblock lang:objc %}\n+ (NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation*)invocation repeats:(BOOL)yesOrNo;\n\n+ (NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti invocation:(NSInvocation*)invocation repeats:(BOOL)yesOrNo;\n\n+ (NSTimer*)timerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;\n\n+ (NSTimer*)scheduledTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;\n{% endcodeblock %}\n<p>由这些方法所创建的NSTimer的retain count是由NSRunloop保持、所以我们不需要对这个对象进行release的操作。但是如果我们想要在某个具体的地方\n停止这个计数器的时候。如果repeats参数是YES的时候我们不需要增加这个对象的retain count。就可以在其他地方引用这个对象了。如果repeats参数shi是NO的时候、我们就应该手动增加、再release。如果不retain它、如果在你引用这个对象的时候、定时器的时间还没到，方法还没执行。NSRunloop\n还保留这retain count。这时候是没问题的、但是如果方法已经执行完了、NSRunloop释放了NSTimer这个对象。这个时候就会crash了。<\u0010/p>\n\n<p>2、直接创建：</p]>\n{% codeblock lang:objc %}\n- (id)initWithFireDate:(NSDate*)date interval:(NSTimeInterval)ti target:(id)t selector:(SEL)s userInfo:(id)ui repeats:(BOOL)rep;\n{% endcodeblock %}\n","slug":"IOS/2013-04-22-nstimershi-fang","updated":1416373854000,"excerpt":"","_id":"xbsc1ksfvps9t8s6","tags":[],"photos":[],"link":""},{"layout":"post","title":"NSUserDefaults standardUserDefaults注意事项","date":1366612440000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>NSUserDefaults standardUserDefaults一种便利的序列化方式、当使用</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span>  standardUserDefaults] setObject:object textforKey:key];</div></pre></td></tr></table></figure>\n\n<p>这时候该对象只是写在内存中。要真正保存到磁盘、应该还要调用</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span>  standardUserDefaults] synchronize];</div></pre></td></tr></table></figure>\n\n","source":"_posts/IOS/2013-04-22-nsuserdefaults-standarduserdefaultszhu-yi-shi-xiang.markdown","raw":"---\nlayout: post\ntitle: \"NSUserDefaults standardUserDefaults注意事项\"\ndate: 2013-04-22 14:34\ncomments: true\ncategories: IOS\n---\n<p>NSUserDefaults standardUserDefaults一种便利的序列化方式、当使用</p>\n\n{% codeblock lang:objc %}\n[[NSUserDefaults  standardUserDefaults] setObject:object textforKey:key];\n{% endcodeblock %}\n\n<p>这时候该对象只是写在内存中。要真正保存到磁盘、应该还要调用</p>\n\n{% codeblock lang:objc %}\n[[NSUserDefaults  standardUserDefaults] synchronize];\n{% endcodeblock %}\n\n","slug":"IOS/2013-04-22-nsuserdefaults-standarduserdefaultszhu-yi-shi-xiang","updated":1416373854000,"excerpt":"","_id":"s6xgi0frbg3iyc45","tags":[],"photos":[],"link":""},{"layout":"post","title":"设UIImage为backgroundColor","date":1366601760000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">UIColor</span>*)colorWithPatternImage:(<span class=\"built_in\">UIImage</span>*)image;</div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-04-22-she-uiimagewei-backgroundcolor.markdown","raw":"---\nlayout: post\ntitle: \"设UIImage为backgroundColor\"\ndate: 2013-04-22 11:36\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n\n+ (UIColor*)colorWithPatternImage:(UIImage*)image;\n\n{% endcodeblock %}","slug":"IOS/2013-04-22-she-uiimagewei-backgroundcolor","updated":1416373854000,"excerpt":"","_id":"ij80nxmq3ohmits7","tags":[],"photos":[],"link":""},{"layout":"post","title":"svn 上传.a文件","date":1366600680000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>1. 在每个用户主文件夹下有一个名为.subversion的隐藏文件夹，打开里面的config文件。</p><br><p>2. 查找 [miscellany] 字段，即可看到下面有个 global-ignores 键名，默认为注释掉了的，这表示SVN已经将它们作为默认值了。</p><br><p>3. 取消注释，把 <em>.so </em>.so.[0-9]<em> </em>.a 去掉，当然你也可以根据需要增加或减少你的过滤选项。</p>\n","source":"_posts/IOS/2013-04-22-svn-shang-chuan-dot-awen-jian.markdown","raw":"---\nlayout: post\ntitle: \"svn 上传.a文件\"\ndate: 2013-04-22 11:18\ncomments: true\ncategories: IOS\n---\n<p>1. 在每个用户主文件夹下有一个名为.subversion的隐藏文件夹，打开里面的config文件。</p>\n<p>2. 查找 [miscellany] 字段，即可看到下面有个 global-ignores 键名，默认为注释掉了的，这表示SVN已经将它们作为默认值了。</p>\n<p>3. 取消注释，把 *.so *.so.[0-9]* *.a 去掉，当然你也可以根据需要增加或减少你的过滤选项。</p>\n","slug":"IOS/2013-04-22-svn-shang-chuan-dot-awen-jian","updated":1416373854000,"excerpt":"","_id":"hvgnnfozms67kkou","tags":[],"photos":[],"link":""},{"layout":"post","title":"通过调用url跳转到相应的设置页面","date":1366612740000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>调用如下代码：</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"prefs:root=WIFI\"</span>];</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:url];</div></pre></td></tr></table></figure><br><p>即可跳转到设置页面的对应项。</p>\n\n<p></p><p>相关的URL string：</p><br><a id=\"more\"></a><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">About — prefs:root=General&amp;path=About</div><div class=\"line\">Accessibility — prefs:root=General&amp;path=ACCESSIBILITY</div><div class=\"line\">Airplane Mode On — prefs:root=AIRPLANE_MODE</div><div class=\"line\">Auto-Lock — prefs:root=General&amp;path=AUTOLOCK</div><div class=\"line\">Brightness — prefs:root=Brightness</div><div class=\"line\">Bluetooth — prefs:root=General&amp;path=Bluetooth</div><div class=\"line\">Date &amp; Time — prefs:root=General&amp;path=DATE_AND_TIME</div><div class=\"line\">FaceTime — prefs:root=FACETIME</div><div class=\"line\">General — prefs:root=General</div><div class=\"line\">Keyboard — prefs:root=General&amp;path=Keyboard</div><div class=\"line\">iCloud — prefs:root=CASTLE</div><div class=\"line\">iCloud Storage &amp; Backup — prefs:root=CASTLE&amp;path=STORAGE_AND_BACKUP</div><div class=\"line\">International — prefs:root=General&amp;path=INTERNATIONAL</div><div class=\"line\">Location Services — prefs:root=LOCATION_SERVICES</div><div class=\"line\">Music — prefs:root=MUSIC</div><div class=\"line\">Music Equalizer — prefs:root=MUSIC&amp;path=EQ</div><div class=\"line\">Music Volume Limit — prefs:root=MUSIC&amp;path=VolumeLimit</div><div class=\"line\">Network — prefs:root=General&amp;path=Network</div><div class=\"line\">Nike + iPod — prefs:root=NIKE_PLUS_IPOD</div><div class=\"line\">Notes — prefs:root=NOTES</div><div class=\"line\">Notification — prefs:root=NOTIFICATIONS_ID</div><div class=\"line\">Phone — prefs:root=Phone</div><div class=\"line\">Photos — prefs:root=Photos</div><div class=\"line\">Profile — prefs:root=General&amp;path=ManagedConfigurationList</div><div class=\"line\">Reset — prefs:root=General&amp;path=Reset</div><div class=\"line\">Safari — prefs:root=Safari</div><div class=\"line\">Siri — prefs:root=General&amp;path=Assistant</div><div class=\"line\">Sounds — prefs:root=Sounds</div><div class=\"line\">Software Update — prefs:root=General&amp;path=SOFTWARE_UPDATE_LINK</div><div class=\"line\">Store — prefs:root=STORE</div><div class=\"line\">Twitter — prefs:root=TWITTER</div><div class=\"line\">Usage — prefs:root=General&amp;path=USAGE</div><div class=\"line\">VPN — prefs:root=General&amp;path=Network/VPN</div><div class=\"line\">Wallpaper — prefs:root=Wallpaper</div><div class=\"line\">Wi-Fi — prefs:root=WIFI</div><div class=\"line\">INTERNET_TETHERING — prefs:root=INTERNET_TETHERING</div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-04-22-tong-guo-diao-yong-urltiao-zhuan-dao-xiang-ying-de-she-zhi-ye-mian.markdown","raw":"---\nlayout: post\ntitle: \"通过调用url跳转到相应的设置页面\"\ndate: 2013-04-22 14:39\ncomments: true\ncategories: IOS\n---\n<p>调用如下代码：</p>\n{%  codeblock lang:objc %}\n NSURL *url = [NSURL URLWithString:@\"prefs:root=WIFI\"];\n [[UIApplication sharedApplication] openURL:url];\n{%  endcodeblock %}\n<p>即可跳转到设置页面的对应项。</p>\n\n<p>相关的URL string：</p>\n<!--more-->\n{% codeblock lang:objc %}\nAbout — prefs:root=General&path=About\nAccessibility — prefs:root=General&path=ACCESSIBILITY\nAirplane Mode On — prefs:root=AIRPLANE_MODE\nAuto-Lock — prefs:root=General&path=AUTOLOCK\nBrightness — prefs:root=Brightness\nBluetooth — prefs:root=General&path=Bluetooth\nDate & Time — prefs:root=General&path=DATE_AND_TIME\nFaceTime — prefs:root=FACETIME\nGeneral — prefs:root=General\nKeyboard — prefs:root=General&path=Keyboard\niCloud — prefs:root=CASTLE\niCloud Storage & Backup — prefs:root=CASTLE&path=STORAGE_AND_BACKUP\nInternational — prefs:root=General&path=INTERNATIONAL\nLocation Services — prefs:root=LOCATION_SERVICES\nMusic — prefs:root=MUSIC\nMusic Equalizer — prefs:root=MUSIC&path=EQ\nMusic Volume Limit — prefs:root=MUSIC&path=VolumeLimit\nNetwork — prefs:root=General&path=Network\nNike + iPod — prefs:root=NIKE_PLUS_IPOD\nNotes — prefs:root=NOTES\nNotification — prefs:root=NOTIFICATIONS_ID\nPhone — prefs:root=Phone\nPhotos — prefs:root=Photos\nProfile — prefs:root=General&path=ManagedConfigurationList\nReset — prefs:root=General&path=Reset\nSafari — prefs:root=Safari\nSiri — prefs:root=General&path=Assistant\nSounds — prefs:root=Sounds\nSoftware Update — prefs:root=General&path=SOFTWARE_UPDATE_LINK\nStore — prefs:root=STORE\nTwitter — prefs:root=TWITTER\nUsage — prefs:root=General&path=USAGE\nVPN — prefs:root=General&path=Network/VPN\nWallpaper — prefs:root=Wallpaper\nWi-Fi — prefs:root=WIFI\nINTERNET_TETHERING — prefs:root=INTERNET_TETHERING\n{% endcodeblock %}","slug":"IOS/2013-04-22-tong-guo-diao-yong-urltiao-zhuan-dao-xiang-ying-de-she-zhi-ye-mian","updated":1416373854000,"excerpt":"<p>调用如下代码：</p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"prefs:root=WIFI\"</span>];</div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] openURL:url];</div></pre></td></tr></table></figure><br><p>即可跳转到设置页面的对应项。</p>\n\n<p></p><p>相关的URL string：</p><br>","_id":"3gc44iytu3ej9anw","tags":[],"photos":[],"link":""},{"layout":"post","title":"UIViewController 在UINavigationController 中，当UINavigationBar出现后的变化","date":1366603380000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>如果UIViewController 是在导航控制器中<br>在navigationbar 出现后self.view 的高度减少了44。如：<br>在viewDidLoad 中 </p>\n\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"self height %f\"</span>,<span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.heigt</span>);  </div></pre></td></tr></table></figure><br> </p><p><br>在viewDidAppear 中 </p><p></p>\n<p><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"self height %f\"</span>,<span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.heigt</span>);  </div></pre></td></tr></table></figure> </p>\n<p> 两个结果相差 44。</p>","source":"_posts/IOS/2013-04-22-uiviewcontroller-zai-uinavigationcontroller-zhong-,dang-uinavigationbarchu-xian-hou-de-bian-hua.markdown","raw":"---\nlayout: post\ntitle: \"UIViewController 在UINavigationController 中，当UINavigationBar出现后的变化\"\ndate: 2013-04-22 12:03\ncomments: true\ncategories: IOS\n---\n\n<p>如果UIViewController 是在导航控制器中\n在navigationbar 出现后self.view 的高度减少了44。如：\n在viewDidLoad 中 </p>\n\n{% codeblock lang:objc %}\nNSLog(@\"self height %f\",self.view.frame.size.heigt);  \n{% endcodeblock %} \n <p>\n在viewDidAppear 中 </p>\n{% codeblock lang:objc %}\nNSLog(@\"self height %f\",self.view.frame.size.heigt);  \n{% endcodeblock %} \n<p> 两个结果相差 44。</p>","slug":"IOS/2013-04-22-uiviewcontroller-zai-uinavigationcontroller-zhong-,dang-uinavigationbarchu-xian-hou-de-bian-hua","updated":1416373854000,"excerpt":"","_id":"sc72ujlfp690u5pn","tags":[],"photos":[],"link":""},{"layout":"post","title":"正确处理Memory Waring","date":1366604400000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>  IPhone下每个app可用的内存是被限制的，如果一个app使用的内存超过20M，则系统会向该app发送Memory Warning消息。收到此消息后，app必须正确处理，否则可能出错或者出现内存泄露。</p>\n\n\n","source":"_posts/IOS/2013-04-22-zheng-que-chu-li-memory-waring.markdown","raw":"---\nlayout: post\ntitle: \"正确处理Memory Waring\"\ndate: 2013-04-22 12:20\ncomments: true\ncategories: IOS\n---\n<p>  IPhone下每个app可用的内存是被限制的，如果一个app使用的内存超过20M，则系统会向该app发送Memory Warning消息。收到此消息后，app必须正确处理，否则可能出错或者出现内存泄露。</p>\n\n\n","slug":"IOS/2013-04-22-zheng-que-chu-li-memory-waring","updated":1416373854000,"excerpt":"","_id":"iwl1yntsrs1wik3z","tags":[],"photos":[],"link":""},{"layout":"post","title":"iOS的init、loadView、 viewDidLoad、viewDidUnload的关系","date":1366620180000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<h3 id=\"init方法\">init方法</h3>\n<p><br>在init方法中实例化必要的对象（遵从LazyLoad思想）<br>init方法中初始化ViewController本身<br></p>\n\n<h3 id=\"loadView方法\">loadView方法</h3>\n<p><br>当view需要被展示而它却是nil时，viewController会调用该方法。不要直接调用该方法。<br>如果手工维护views，必须重写该方法。<br>如果使用IB维护views，必须不能重写该方法。<br>loadView和IB构建view<br></p>\n\n<h3 id=\"viewDidLoad方法\">viewDidLoad方法</h3>\n<p><br>重写该方法以进一步定制view。<br>在iPhone OS 3.0及之后的版本中，还应该重写viewDidUnload来释放对view的任何索引。<br>viewDidLoad后调用数据Model。<br></p><br><a id=\"more\"></a><br><br>###viewDidUnload方法<br><p><br>当系统内存吃紧的时候会调用该方法（注：viewController没有被dealloc）。<br>内存吃紧时，在iPhone OS 3.0之前didReceiveMemoryWarning是释放无用内存的唯一方式，但是OS 3.0及以后viewDidUnload方法是更好的方式。<br>在该方法中将所有IBOutlet（无论是property还是实例变量）置为nil（系统release view时已经将其release掉了）。<br>在该方法中释放其他与view有关的对象、其他在运行时创建（但非系统必须）的对象、在viewDidLoad中被创建的对象、缓存数据等。<br>release对象后，将对象置为nil（IBOutlet只需要将其置为nil，系统release view时已经将其release掉了）。<br>一般认为viewDidUnload是viewDidLoad的镜像，因为当view被重新请求时，viewDidLoad还会重新被执行。<br>viewDidUnload中被release的对象必须是很容易被重新创建的对象（比如在viewDidLoad或其他方法中创建的对象），不要release用户数据或其他很难被重新创建的对象。<br></p>\n\n<h3 id=\"dealloc方法\">dealloc方法</h3>\n<p><br>viewDidUnload和dealloc方法没有关联，dealloc还是继续做它该做的事情。<br>举例：<br></p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* * The view hierarchy for this controller has been torn down. This usually happens inresponse to low memory notifications. * All IBOutlets should be released by setting their property to nil in order to free upas much memory as possible. * This is also a good place to release other variables that can be recreated when needed. */</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidUnload</div><div class=\"line\"> { </div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.startButton</span> = <span class=\"literal\">nil</span>;   </div><div class=\"line\">    [setupViewController release];   </div><div class=\"line\">    setupViewController = <span class=\"literal\">nil</span>;</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">- (<span class=\"keyword\">void</span>)dealloc </div><div class=\"line\">{    </div><div class=\"line\">  [startButton release];  </div><div class=\"line\">  [setupViewController release];   </div><div class=\"line\">  [<span class=\"keyword\">super</span> dealloc];</div><div class=\"line\"> } </div></pre></td></tr></table></figure><br><p><br>loadView 手动加载view<br>viewDidLoad用于nib文件加载后，进一步处理<br>viewDidUnload是viewDidLoad的镜像<br></p>\n\n\n<h3 id=\"一、loadView\">一、loadView</h3>\n<p><br>永远不要主动调用这个函数。view controller会在view的property被请求并且当前view值为nil时调用这个函数。如果你手动创建view，你应该重载这个函数。如果你用IB创建view并初始化view controller，那就意味着你使用initWithNibName:bundle:方法，这时，你不应该重载loadView函数。<br><br>这个方法的默认实现是这样：先寻找有关可用的nib文件的信息，根据这个信息来加载nib文件，如果没有有关nib文件的信息，默认实现会创建一个空白的UIView对象，然后让这个对象成为controller的主view。所以，重载这个函数时，你也应该这么做。并把子类的view赋给view属性(property)（你create的view必须是唯一的实例，并且不被其他任何controller共享），而且你重载的这个函数不应该调用super。<br><br>如果你要进行进一步初始化你的views，你应该在viewDidLoad函数中去做。在iOS 3.0以及更高版本中，你应该重载viewDidUnload函数来释放任何对view的引用或者它里面的内容（子view等等）。这个网上的资料都说的很不全面，尤其是蓝色字部分。<br></p>\n\n\n<h3 id=\"二、viewDidLoad\">二、viewDidLoad</h3>\n<p><br>这个函数在controller加载了相关的views后被调用，而不论这些views存储在nib文件里还是在loadView函数中生成。而多数情况下是做nib文件的后续工作。网上资料对这个函数的描述则完全不对。<br></p>\n\n\n<h3 id=\"三、viewDidUnload\">三、viewDidUnload</h3>\n<p><br>这个函数是viewDidLoad的对立函数。在程序内存欠缺时，这个函数被controller调用（）。由于controller通常保存着与view（这里黑体的view指controller的view属性）相关的对象（一般是view的子view）或者其他运行时创建的对象的引用，所以你必须使用这个函数来放弃这些对象的所有权以便内存回收。但不要释放那些难以重建的数据（不要在这个函数中释放view）。<br><br>通常controller会保存nib文件建立的views的引用，但是也可能会保存着loadView函数创建的对象的引用。最完美的方法是使用合成器方法：<br>self.myCertainView = nil;<br><br>这样合成器会release这个view，如果你没有使用property，那么你得自己显式释放这个view。网上对这个函数的描述含含糊糊，看了等于没看。<br><br>另外：如果controller存储了其他object和view的引用，你还得在dealloc方法中释放这些内存。对于iOS2.x，你还必须在调用super dealloc方法前将这些引用置为nil。<br></p>\n\n\n\n<h3 id=\"四、结论\">四、结论</h3>\n<p><br>所以流程应该是这样：<br>(loadView/nib文件)来加载view到内存 ——&gt;viewDidLoad函数进一步初始化这些view ——&gt;内存不足时，调用viewDidUnload函数释放views<br>—-&gt;当需要使用view时有回到第一步<br></p>\n\n\n\n\n\n\n\n","source":"_posts/IOS/2013-04-23-ios-4chu-shi-hua-han-shu-de-guan-xi.markdown","raw":"---\nlayout: post\ntitle: \"iOS的init、loadView、 viewDidLoad、viewDidUnload的关系\"\ndate: 2013-04-22 16:43\ncomments: true\ncategories: IOS\n---\n###init方法\n<p>\n在init方法中实例化必要的对象（遵从LazyLoad思想）\ninit方法中初始化ViewController本身\n</p>\n\n###loadView方法\n<p>\n当view需要被展示而它却是nil时，viewController会调用该方法。不要直接调用该方法。\n如果手工维护views，必须重写该方法。\n如果使用IB维护views，必须不能重写该方法。\nloadView和IB构建view\n</p>\n\n###viewDidLoad方法\n<p>\n重写该方法以进一步定制view。\n在iPhone OS 3.0及之后的版本中，还应该重写viewDidUnload来释放对view的任何索引。\nviewDidLoad后调用数据Model。\n</p>\n<!--more-->\n\n###viewDidUnload方法\n<p>\n当系统内存吃紧的时候会调用该方法（注：viewController没有被dealloc）。\n内存吃紧时，在iPhone OS 3.0之前didReceiveMemoryWarning是释放无用内存的唯一方式，但是OS 3.0及以后viewDidUnload方法是更好的方式。\n在该方法中将所有IBOutlet（无论是property还是实例变量）置为nil（系统release view时已经将其release掉了）。\n在该方法中释放其他与view有关的对象、其他在运行时创建（但非系统必须）的对象、在viewDidLoad中被创建的对象、缓存数据等。\nrelease对象后，将对象置为nil（IBOutlet只需要将其置为nil，系统release view时已经将其release掉了）。\n一般认为viewDidUnload是viewDidLoad的镜像，因为当view被重新请求时，viewDidLoad还会重新被执行。\nviewDidUnload中被release的对象必须是很容易被重新创建的对象（比如在viewDidLoad或其他方法中创建的对象），不要release用户数据或其他很难被重新创建的对象。\n</p>\n\n###dealloc方法\n<p>\nviewDidUnload和dealloc方法没有关联，dealloc还是继续做它该做的事情。\n举例：\n</p>\n{% codeblock lang:objc %}\n /* * The view hierarchy for this controller has been torn down. This usually happens inresponse to low memory notifications. * All IBOutlets should be released by setting their property to nil in order to free upas much memory as possible. * This is also a good place to release other variables that can be recreated when needed. */\n - (void)viewDidUnload\n  { \n     self.startButton = nil;   \n     [setupViewController release];   \n     setupViewController = nil;\n   }\n   \n - (void)dealloc \n {    \n   [startButton release];  \n   [setupViewController release];   \n   [super dealloc];\n  } \n{% endcodeblock%}\n<p>\nloadView 手动加载view\nviewDidLoad用于nib文件加载后，进一步处理\nviewDidUnload是viewDidLoad的镜像\n</p>\n\n\n###一、loadView\n<p>\n永远不要主动调用这个函数。view controller会在view的property被请求并且当前view值为nil时调用这个函数。如果你手动创建view，你应该重载这个函数。如果你用IB创建view并初始化view controller，那就意味着你使用initWithNibName:bundle:方法，这时，你不应该重载loadView函数。\n\n这个方法的默认实现是这样：先寻找有关可用的nib文件的信息，根据这个信息来加载nib文件，如果没有有关nib文件的信息，默认实现会创建一个空白的UIView对象，然后让这个对象成为controller的主view。所以，重载这个函数时，你也应该这么做。并把子类的view赋给view属性(property)（你create的view必须是唯一的实例，并且不被其他任何controller共享），而且你重载的这个函数不应该调用super。\n\n如果你要进行进一步初始化你的views，你应该在viewDidLoad函数中去做。在iOS 3.0以及更高版本中，你应该重载viewDidUnload函数来释放任何对view的引用或者它里面的内容（子view等等）。这个网上的资料都说的很不全面，尤其是蓝色字部分。\n</p>\n\n\n###二、viewDidLoad\n<p>\n这个函数在controller加载了相关的views后被调用，而不论这些views存储在nib文件里还是在loadView函数中生成。而多数情况下是做nib文件的后续工作。网上资料对这个函数的描述则完全不对。\n</p>\n\n\n###三、viewDidUnload\n<p>\n这个函数是viewDidLoad的对立函数。在程序内存欠缺时，这个函数被controller调用（）。由于controller通常保存着与view（这里黑体的view指controller的view属性）相关的对象（一般是view的子view）或者其他运行时创建的对象的引用，所以你必须使用这个函数来放弃这些对象的所有权以便内存回收。但不要释放那些难以重建的数据（不要在这个函数中释放view）。\n\n通常controller会保存nib文件建立的views的引用，但是也可能会保存着loadView函数创建的对象的引用。最完美的方法是使用合成器方法：\nself.myCertainView = nil;\n\n这样合成器会release这个view，如果你没有使用property，那么你得自己显式释放这个view。网上对这个函数的描述含含糊糊，看了等于没看。\n\n另外：如果controller存储了其他object和view的引用，你还得在dealloc方法中释放这些内存。对于iOS2.x，你还必须在调用super dealloc方法前将这些引用置为nil。\n</p>\n\n\n\n###四、结论\n<p>\n所以流程应该是这样：\n(loadView/nib文件)来加载view到内存 ——>viewDidLoad函数进一步初始化这些view ——>内存不足时，调用viewDidUnload函数释放views\n—->当需要使用view时有回到第一步\n</p>\n\n\n \n\n\n\n\n","slug":"IOS/2013-04-23-ios-4chu-shi-hua-han-shu-de-guan-xi","updated":1416373854000,"excerpt":"<h3 id=\"init方法\">init方法</h3>\n<p><br>在init方法中实例化必要的对象（遵从LazyLoad思想）<br>init方法中初始化ViewController本身<br></p>\n\n<h3 id=\"loadView方法\">loadView方法</h3>\n<p><br>当view需要被展示而它却是nil时，viewController会调用该方法。不要直接调用该方法。<br>如果手工维护views，必须重写该方法。<br>如果使用IB维护views，必须不能重写该方法。<br>loadView和IB构建view<br></p>\n\n<h3 id=\"viewDidLoad方法\">viewDidLoad方法</h3>\n<p><br>重写该方法以进一步定制view。<br>在iPhone OS 3.0及之后的版本中，还应该重写viewDidUnload来释放对view的任何索引。<br>viewDidLoad后调用数据Model。<br></p><br>","_id":"8muoxryv28pb2mjh","tags":[],"photos":[],"link":""},{"layout":"post","title":"PDF内容流解析","date":1366703760000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<h3 id=\"PDF_Document_Parsing\">PDF Document Parsing</h3>\n<p>Quartz提供了让你检查PDF文档结构和内容流的方法。通过这些方法，你可以获取文档目录的条目和与每个条目相关的内容。一个PDF的内容流（contentstream）正如其名字所暗示的—一个连续的数据流 例如’BT 12 /F71 Tf (draw thistext) Tj . . . ‘此处PDF操作符以及他们的描述符都混有实际的PDF内容。检查内容流,你需要按顺序访问它。</p>\n\n<h3 id=\"PDF操作符\">PDF操作符</h3>\n<p></p><p>1). General graphics state(普通图形状态操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">w: 设置线的宽度</div><div class=\"line\">J: 设置线端点风格. Butt/Round/Projecting square </div><div class=\"line\">j: 设置线交叉风格. Miter/Round/Bevel</div><div class=\"line\">M: 设置Miter Limit</div><div class=\"line\">d: 设置虚线风格.</div><div class=\"line\">ri: 设置Rendering Intent(呈色意向)</div><div class=\"line\">i: 设置平面化容忍度.</div><div class=\"line\">gs: 设置图形状态参数.</div></pre></td></tr></table></figure>\n\n<p></p><p>2). Special graphics state(特殊图形状态操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">q: 保存当前图形状态</div><div class=\"line\">Q：回复图形状态.</div><div class=\"line\">cm：设置当前装换矩阵.</div></pre></td></tr></table></figure>\n\n<p></p><p>3). Path construction(路径构建操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">m: 移动当前指针到指定位置.</div><div class=\"line\">l: 添加一条连接当前指针到指定位置的线段.</div><div class=\"line\">c: 添加一条Bezier曲线， 有<span class=\"number\">2</span>个控制点，<span class=\"number\">2</span>个端点.</div><div class=\"line\">v: 添加一条Bezier曲线， <span class=\"number\">2</span>个控制点重合.</div><div class=\"line\">y: 添加一条Bezier曲线， 第二个控制点和第二个端点重合.</div><div class=\"line\">h: 闭合路径</div><div class=\"line\">re: 添加一个矩形.</div></pre></td></tr></table></figure><br><a id=\"more\"></a><br><br><p>4). Path painting(路径绘制操作符)</p><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">S: 描绘路径.</div><div class=\"line\">s: 闭合路径并描绘路径.</div><div class=\"line\">f: 填充路径，使用非零回转数规则确定区域，路径在填充之前闭合.</div><div class=\"line\">F: 等同f，为了兼容.</div><div class=\"line\">f*: 填充路径，使用奇偶规则确定区域.</div><div class=\"line\">B: 填充路径，使用非零回转数规则确定区域， 并描绘路径.</div><div class=\"line\">B*: 填充路径，使用奇偶规则确定区域， 并描绘路径.</div><div class=\"line\">b: 闭合路径, 填充路径，使用非零回转数规则确定区域， 并描绘路径.</div><div class=\"line\">b*: 闭合路径，使用奇偶规则确定区域， 并描绘路径.</div><div class=\"line\">n: 结束路径，不做任何描绘和填充.</div></pre></td></tr></table></figure>\n\n\n<p></p><p>5). Clipping paths(路径修剪操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">W: 将当前修剪区域和当前路径做交，使用非零回转数规则.</div><div class=\"line\">W*: 将当前修剪区域和当前路径做交，使用奇偶规则.</div></pre></td></tr></table></figure>\n\n\n<p></p><p>6). Text  objects(文本对象操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BT: 开始一个文本对象.</div><div class=\"line\">ET: 结束一个文本对象.</div></pre></td></tr></table></figure>\n\n\n<p></p><p>7). Text  state(文本状态操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tc: 设置字符间隔.</div><div class=\"line\">Tw: 设置单词间隔.</div><div class=\"line\">Tz: 设置水平缩放.</div><div class=\"line\">TL: 设置Leading.</div><div class=\"line\">Tf: 设置文本字体.</div><div class=\"line\">Tr: 设置Render(渲染)模式.</div><div class=\"line\">Ts: 设置Rise</div></pre></td></tr></table></figure>\n\n\n<p></p><p>8). Text  positioning(文本位置操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Td: 移动到下一行的开始，通过偏移(tx,ty).</div><div class=\"line\">TD: 移动到下一行的开始，通过偏移(tx,ty). 同时设置Leading为-ty.</div><div class=\"line\">Tm: 设置文本矩阵和文本线矩阵.</div><div class=\"line\">T*: 移动到下一行的开始位置. 和<span class=\"number\">0</span> Tl Td相同.</div></pre></td></tr></table></figure>\n\n\n<p></p><p>9). Text  showing(文本显示操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tj: 显示一个文本字符串.</div><div class=\"line\">TJ: 显示一个或者多个文本字符串，允许独立的制定各个字型的位置.</div><div class=\"line\">': 移动到下一行并显示一个文本字符串.</div><div class=\"line\">\": 移动到下一行并显示一个文本字符串. 并指定字符间距为ac, 单词间距为aw.</div></pre></td></tr></table></figure>\n\n\n<p></p><p>10). Type3 fonts(type3字体操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">d0:  设置字型的宽度.</div><div class=\"line\">d1: 设置字型的宽度及自行的bounding box(边界矩形).</div></pre></td></tr></table></figure>\n\n\n<p></p><p>11). Color(颜色操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">CS: 设置描绘颜色空间.</div><div class=\"line\">cs: 设置非描绘颜色空间.</div><div class=\"line\">SC: 设置描绘颜色值，针对一般颜色空间.</div><div class=\"line\">SCN: 设置描绘颜色值，允许特殊颜色空间.</div><div class=\"line\">sc: 设置非描绘颜色值，针对一般颜色空间.</div><div class=\"line\">scn: 设置非描绘颜色值，允许特殊颜色空间.</div><div class=\"line\">G: 设置描绘颜色空间为DeviceGray，并设置颜色值.</div><div class=\"line\">g: 设置非描绘颜色空间为DeviceGray, 并设置颜色值.</div><div class=\"line\">RG: 设置描绘颜色空间为DeviceRGB，并设置颜色值.</div><div class=\"line\">rg: 设置非描绘样色空间为DeviceRGB，并设置颜色值.</div><div class=\"line\">K: 设置描绘颜色空间为DeviceCMYK，并设置颜色值.</div><div class=\"line\">k: 设置非描绘颜色空间为DeviceCMYK，并设置颜色值.</div></pre></td></tr></table></figure>\n\n<p></p><p>12). Shading patterns(渐变样式操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh: 输出一个shading对象.</div></pre></td></tr></table></figure>\n\n<p></p><p>13). Inline images(内联图像操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">BI: 开始一个内联图像.</div><div class=\"line\">ID: 开始内联图像数据.</div><div class=\"line\">EI: 结束一个内敛图像.</div></pre></td></tr></table></figure>\n\n<p></p><p>14). XObjects(外部对象操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Do: 输出一个外部对象.</div></pre></td></tr></table></figure>\n\n<p></p><p>15). Marked content(标记内容操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">MP: 定义一个标记内容点.</div><div class=\"line\">DP: 定义一个带属性列表的标记内容点.</div><div class=\"line\">BMC: 开始一个标记内容序列.</div><div class=\"line\">BDC: 开始一个带属性列表的标记内容序列.</div><div class=\"line\">EMC: 结束一个标记内容序列.</div></pre></td></tr></table></figure>\n\n\n<p></p><p>16). Compatibility(兼容性操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BX: 开始一个兼容段.</div><div class=\"line\">EX: 结束一个兼容段.</div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-04-23-pdfnei-rong-liu-jie-xi.markdown","raw":"---\nlayout: post\ntitle: \"PDF内容流解析\"\ndate: 2013-04-23 15:56\ncomments: true\ncategories: IOS\n---\n\n###PDF Document Parsing \n\n<p>Quartz提供了让你检查PDF文档结构和内容流的方法。通过这些方法，你可以获取文档目录的条目和与每个条目相关的内容。一个PDF的内容流（contentstream）正如其名字所暗示的—一个连续的数据流 例如'BT 12 /F71 Tf (draw thistext) Tj . . . '此处PDF操作符以及他们的描述符都混有实际的PDF内容。检查内容流,你需要按顺序访问它。</p>\n\n###PDF操作符\n\n\n<p>1). General graphics state(普通图形状态操作符)</p>\n{% codeblock lang:c %}\n w: 设置线的宽度\n J: 设置线端点风格. Butt/Round/Projecting square \n j: 设置线交叉风格. Miter/Round/Bevel\n M: 设置Miter Limit\n d: 设置虚线风格.\n ri: 设置Rendering Intent(呈色意向)\n i: 设置平面化容忍度.\n gs: 设置图形状态参数.\n{% endcodeblock %}\n\n<p>2). Special graphics state(特殊图形状态操作符)</p>\n{% codeblock lang:c %}\n q: 保存当前图形状态\n Q：回复图形状态.\n cm：设置当前装换矩阵.\n{% endcodeblock %}\n\n<p>3). Path construction(路径构建操作符)</p>\n{% codeblock lang:c %}\n m: 移动当前指针到指定位置.\n l: 添加一条连接当前指针到指定位置的线段.\n c: 添加一条Bezier曲线， 有2个控制点，2个端点.\n v: 添加一条Bezier曲线， 2个控制点重合.\n y: 添加一条Bezier曲线， 第二个控制点和第二个端点重合.\n h: 闭合路径\n re: 添加一个矩形.\n{% endcodeblock %}\n<!--more-->\n\n<p>4). Path painting(路径绘制操作符)</p>\n{% codeblock lang:c %}\n S: 描绘路径.\n s: 闭合路径并描绘路径.\n f: 填充路径，使用非零回转数规则确定区域，路径在填充之前闭合.\n F: 等同f，为了兼容.\n f*: 填充路径，使用奇偶规则确定区域.\n B: 填充路径，使用非零回转数规则确定区域， 并描绘路径.\n B*: 填充路径，使用奇偶规则确定区域， 并描绘路径.\n b: 闭合路径, 填充路径，使用非零回转数规则确定区域， 并描绘路径.\n b*: 闭合路径，使用奇偶规则确定区域， 并描绘路径.\n n: 结束路径，不做任何描绘和填充.\n{% endcodeblock %}\n\n\n<p>5). Clipping paths(路径修剪操作符)</p>\n{% codeblock lang:c %}\n W: 将当前修剪区域和当前路径做交，使用非零回转数规则.\n W*: 将当前修剪区域和当前路径做交，使用奇偶规则.\n{% endcodeblock %}\n\n\n<p>6). Text  objects(文本对象操作符)</p>\n{% codeblock lang:c %}\n BT: 开始一个文本对象.\n ET: 结束一个文本对象.\n{% endcodeblock %}\n\n\n<p>7). Text  state(文本状态操作符)</p>\n{% codeblock lang:c %}\n Tc: 设置字符间隔.\n Tw: 设置单词间隔.\n Tz: 设置水平缩放.\n TL: 设置Leading.\n Tf: 设置文本字体.\n Tr: 设置Render(渲染)模式.\n Ts: 设置Rise\n{% endcodeblock %}\n\n\n<p>8). Text  positioning(文本位置操作符)</p>\n{% codeblock lang:c %}\n Td: 移动到下一行的开始，通过偏移(tx,ty).\n TD: 移动到下一行的开始，通过偏移(tx,ty). 同时设置Leading为-ty.\n Tm: 设置文本矩阵和文本线矩阵.\n T*: 移动到下一行的开始位置. 和0 Tl Td相同.\n{% endcodeblock %}\n\n\n<p>9). Text  showing(文本显示操作符)</p>\n{% codeblock lang:c %}\n Tj: 显示一个文本字符串.\n TJ: 显示一个或者多个文本字符串，允许独立的制定各个字型的位置.\n ': 移动到下一行并显示一个文本字符串.\n \": 移动到下一行并显示一个文本字符串. 并指定字符间距为ac, 单词间距为aw.\n{% endcodeblock %}\n\n\n<p>10). Type3 fonts(type3字体操作符)</p>\n{% codeblock lang:c %}\n d0:  设置字型的宽度.\n d1: 设置字型的宽度及自行的bounding box(边界矩形).\n{% endcodeblock %}\n\n\n<p>11). Color(颜色操作符)</p>\n{% codeblock lang:c %}\n CS: 设置描绘颜色空间.\n cs: 设置非描绘颜色空间.\n SC: 设置描绘颜色值，针对一般颜色空间.\n SCN: 设置描绘颜色值，允许特殊颜色空间.\n sc: 设置非描绘颜色值，针对一般颜色空间.\n scn: 设置非描绘颜色值，允许特殊颜色空间.\n G: 设置描绘颜色空间为DeviceGray，并设置颜色值.\n g: 设置非描绘颜色空间为DeviceGray, 并设置颜色值.\n RG: 设置描绘颜色空间为DeviceRGB，并设置颜色值.\n rg: 设置非描绘样色空间为DeviceRGB，并设置颜色值.\n K: 设置描绘颜色空间为DeviceCMYK，并设置颜色值.\n k: 设置非描绘颜色空间为DeviceCMYK，并设置颜色值.\n{% endcodeblock %}\n\n<p>12). Shading patterns(渐变样式操作符)</p>\n{% codeblock lang:c %}\n sh: 输出一个shading对象.\n{% endcodeblock %}\n\n<p>13). Inline images(内联图像操作符)</p>\n{% codeblock lang:c %}\n BI: 开始一个内联图像.\n ID: 开始内联图像数据.\n EI: 结束一个内敛图像.\n{% endcodeblock %}\n\n<p>14). XObjects(外部对象操作符)</p>\n{% codeblock lang:c %}\n Do: 输出一个外部对象.\n{% endcodeblock %}\n\n<p>15). Marked content(标记内容操作符)</p>\n{% codeblock lang:c %}\n MP: 定义一个标记内容点.\n DP: 定义一个带属性列表的标记内容点.\n BMC: 开始一个标记内容序列.\n BDC: 开始一个带属性列表的标记内容序列.\n EMC: 结束一个标记内容序列.\n{% endcodeblock %}\n\n\n<p>16). Compatibility(兼容性操作符)</p>\n{% codeblock lang:c %}\n BX: 开始一个兼容段.\n EX: 结束一个兼容段.\n{% endcodeblock %}","slug":"IOS/2013-04-23-pdfnei-rong-liu-jie-xi","updated":1416373854000,"excerpt":"<h3 id=\"PDF_Document_Parsing\">PDF Document Parsing</h3>\n<p>Quartz提供了让你检查PDF文档结构和内容流的方法。通过这些方法，你可以获取文档目录的条目和与每个条目相关的内容。一个PDF的内容流（contentstream）正如其名字所暗示的—一个连续的数据流 例如’BT 12 /F71 Tf (draw thistext) Tj . . . ‘此处PDF操作符以及他们的描述符都混有实际的PDF内容。检查内容流,你需要按顺序访问它。</p>\n\n<h3 id=\"PDF操作符\">PDF操作符</h3>\n<p></p><p>1). General graphics state(普通图形状态操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">w: 设置线的宽度</div><div class=\"line\">J: 设置线端点风格. Butt/Round/Projecting square </div><div class=\"line\">j: 设置线交叉风格. Miter/Round/Bevel</div><div class=\"line\">M: 设置Miter Limit</div><div class=\"line\">d: 设置虚线风格.</div><div class=\"line\">ri: 设置Rendering Intent(呈色意向)</div><div class=\"line\">i: 设置平面化容忍度.</div><div class=\"line\">gs: 设置图形状态参数.</div></pre></td></tr></table></figure>\n\n<p></p><p>2). Special graphics state(特殊图形状态操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">q: 保存当前图形状态</div><div class=\"line\">Q：回复图形状态.</div><div class=\"line\">cm：设置当前装换矩阵.</div></pre></td></tr></table></figure>\n\n<p></p><p>3). Path construction(路径构建操作符)</p><p></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">m: 移动当前指针到指定位置.</div><div class=\"line\">l: 添加一条连接当前指针到指定位置的线段.</div><div class=\"line\">c: 添加一条Bezier曲线， 有<span class=\"number\">2</span>个控制点，<span class=\"number\">2</span>个端点.</div><div class=\"line\">v: 添加一条Bezier曲线， <span class=\"number\">2</span>个控制点重合.</div><div class=\"line\">y: 添加一条Bezier曲线， 第二个控制点和第二个端点重合.</div><div class=\"line\">h: 闭合路径</div><div class=\"line\">re: 添加一个矩形.</div></pre></td></tr></table></figure><br>","_id":"e3iu6607k5kqs01g","tags":[],"photos":[],"link":""},{"layout":"post","title":"CGPDFBox","date":1366767000000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>A PDF describes the content and appearance of one or more pages. The exact size of that page is not as straightforward as you might think. There can be up to 5 different descriptions in a PDF that relate to its size. These are called the page boxes:</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> CGPDFBox {</div><div class=\"line\">   kCGPDFMediaBox = <span class=\"number\">0</span>,</div><div class=\"line\">   kCGPDFCropBox = <span class=\"number\">1</span>,</div><div class=\"line\">   kCGPDFBleedBox = <span class=\"number\">2</span>,</div><div class=\"line\">   kCGPDFTrimBox = <span class=\"number\">3</span>,</div><div class=\"line\">   kCGPDFArtBox = <span class=\"number\">4</span></div><div class=\"line\">};</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> CGPDFBox CGPDFBox;</div></pre></td></tr></table></figure>\n\n<h5 id=\"KCGPDFMediaBox\">KCGPDFMediaBox</h5>\n<p><br>The MediaBox is used to specify the width and height of the page. For the average user, this probably equals the actual page size. For prepress use, this is not the case as we prefer our pages to be defined slightly oversized so that we can see the bleed (Images or other elements touching an outer edge of a printed page need to extend beyond the edge of the paper to compensate for inaccuracies in trimming the page), the crop marks and useful information such as the file name or the date and time when the file was created. This means that PDF files used in graphic arts usually have a MediaBox which is larger then the trimmed page size. The MediaBox is the largest page box in a PDF. The other page boxes can equal the size of the MediaBox but they cannot be larger.<br></p>\n\n<h5 id=\"kCGPDFCropBox\">kCGPDFCropBox</h5>\n<p><br>The CropBox defines the region to which the page contents are to be clipped. Acrobat uses this size for screen display and printing. For prepress use, the CropBox is pretty irrelevant. The GWG industry association recommends not to use the CropBox at all.<br></p>\n\n <a id=\"more\"></a>\n\n<h5 id=\"kCGPDFBleedBox\">kCGPDFBleedBox</h5>\n<p><br>determines the region to which the page contents needs to be clipped when output in a production environment. Usually the BleedBox is 3 to 5 millimetres larger than the TrimBox. It is nice to know the size of the BleedBox but it isn’t that important in graphic arts. Most prepress systems allow you to define the amount of bleed yourself and ignore the BleedBox. By default the BleedBox equals the CropBox.<br></p> \n\n<h5 id=\"KCGPDFTrimeBox\">KCGPDFTrimeBox</h5>\n<p><br>The TrimBox defines the intended dimensions of the finished page. Contrary to the CropBox, the TrimBox is very important because it defines the actual page size. The imposition programs and workflows that I know all use the TrimBox as the basis for positioning pages on a press sheet. By default the TrimBox equals the CropBox. When creating PDFs that are PDF/X-1a or PDF/X-3 compliant it is a requirement that the MediaBox, TrimBox and BleedBox are properly defined in the PDF.<br></p>\n\n<h5 id=\"KCGPDFArtBox\">KCGPDFArtBox</h5>\n<p><br>is a bit of a special case. It can define a region within a page that is of special interest. It is rarely used by applications. One way in which it can be used is to handle ads: on a PDF of a page on which there is an advertisement, the ArtBox can define the size of that ad. This allows you to place that PDF on another page but only use the ad from that PDF.<br></p>\n\n<h5 id=\"How_to_see_the_presence_and/or_size_of_the_page_boxes\">How to see the presence and/or size of the page boxes</h5>\n<p><br>A PDF always has a MediaBox definition. All the other page boxes do not necessarily have to be present within the file.<br><br>If you crop pages in Adobe Acrobat 6 and later, the window that is shown displays the size of the various box sizes. Another option is to use the Preflight function in Acrobat Professional (version 6 and later). The pages boxes are shown in the Page information section.<br><br>There are a number of plug-ins that are a bit more user friendly than the Acrobat functions. I personally love the DocuBox plug-in which is a part of Agfa’s Apogee Prepress workflow.<br></p>\n\n\n<h5 id=\"How_to_change_page_boxes\">How to change page boxes</h5>\n<p><br>You can use the Crop Pages tool in Acrobat Professional to change the page boxes. A number of plug-ins offer more sophisticated control. Enfocus PitStop isn’t too bad but again I prefer the Agfa DocuBox plug-in. If you know about a good plug-in, add a comment to this page!<br></p>\n\n\n<h5 id=\"Do_I_even_need_to_worry_about_all_these_boxes?\">Do I even need to worry about all these boxes?</h5>\n<p><br>In the past: YES. Older applications did not define the trim box properly, forcing most prepress operators to center pages and hope everything worked out fine (which it usually did, by the way).<br><br>Nowadays applications are PDF-aware enough to get things right from the start. Take Adobe InDesign for example:<br><br>BleedBox information is sourced from the bleed settings in the marks &amp; bleeds section of the print dialog box.<br>The TrimBox is taken from the document setup.<br>The MediaBox size is defined by the media size to which you print. If the “paper”-size width and height are set to automatic, the MediaBox size will be equal to the BleedBox size.<br>The CropBox size is set to be the same as the Media size.<br></p>\n\n\n<h5 id=\"I_want_to_see_the_finished_trim_size_of_a_PDF\">I want to see the finished trim size of a PDF</h5>\n<p><br>To view a PDF at it’s finished (trim) size, set the CropBox to match the TrimBox. Some systems do this by default. This has users who are not familiar with PDF worry if there is any bleed in the document. They do not realise that there may be information available which simply isn’t visible on-screen. Acrobat plug-ins such as Enfocus PitStop allow you to alternate the PDF view between TrimBox and MediaBox.<br></p>\n\n<h5 id=\"Errors_referring_to_the_BBox\">Errors referring to the BBox</h5>\n<p><br>To view a PDF at it’s finished (trim) size, set the CropBox to match the TrimBox. Some systems do this by default. This has users who are not familiar with PDF worry if there is any bleed in the document. They do not realise that there may be information available which simply isn’t visible on-screen. Acrobat plug-ins such as Enfocus PitStop allow you to alternate the PDF view between TrimBox and MediaBox.<br></p>","source":"_posts/IOS/2013-04-24-cgpdfbox.markdown","raw":"---\nlayout: post\ntitle: \"CGPDFBox\"\ndate: 2013-04-24 09:30\ncomments: true\ncategories: IOS\n---\n<p>A PDF describes the content and appearance of one or more pages. The exact size of that page is not as straightforward as you might think. There can be up to 5 different descriptions in a PDF that relate to its size. These are called the page boxes:</p>\n\n{% codeblock lang:objc %}\nenum CGPDFBox {\n   kCGPDFMediaBox = 0,\n   kCGPDFCropBox = 1,\n   kCGPDFBleedBox = 2,\n   kCGPDFTrimBox = 3,\n   kCGPDFArtBox = 4\n};\ntypedef enum CGPDFBox CGPDFBox;\n{% endcodeblock %}\n\n#####KCGPDFMediaBox\n<p>\nThe MediaBox is used to specify the width and height of the page. For the average user, this probably equals the actual page size. For prepress use, this is not the case as we prefer our pages to be defined slightly oversized so that we can see the bleed (Images or other elements touching an outer edge of a printed page need to extend beyond the edge of the paper to compensate for inaccuracies in trimming the page), the crop marks and useful information such as the file name or the date and time when the file was created. This means that PDF files used in graphic arts usually have a MediaBox which is larger then the trimmed page size. The MediaBox is the largest page box in a PDF. The other page boxes can equal the size of the MediaBox but they cannot be larger.\n</p>\n\n#####kCGPDFCropBox\n<p>\nThe CropBox defines the region to which the page contents are to be clipped. Acrobat uses this size for screen display and printing. For prepress use, the CropBox is pretty irrelevant. The GWG industry association recommends not to use the CropBox at all.\n</p>\n\n <!--more-->\n\n#####kCGPDFBleedBox\n<p>\ndetermines the region to which the page contents needs to be clipped when output in a production environment. Usually the BleedBox is 3 to 5 millimetres larger than the TrimBox. It is nice to know the size of the BleedBox but it isn’t that important in graphic arts. Most prepress systems allow you to define the amount of bleed yourself and ignore the BleedBox. By default the BleedBox equals the CropBox.\n</p> \n\n#####KCGPDFTrimeBox\n<p>\nThe TrimBox defines the intended dimensions of the finished page. Contrary to the CropBox, the TrimBox is very important because it defines the actual page size. The imposition programs and workflows that I know all use the TrimBox as the basis for positioning pages on a press sheet. By default the TrimBox equals the CropBox. When creating PDFs that are PDF/X-1a or PDF/X-3 compliant it is a requirement that the MediaBox, TrimBox and BleedBox are properly defined in the PDF.\n</p>\n\n#####KCGPDFArtBox\n\n<p>\nis a bit of a special case. It can define a region within a page that is of special interest. It is rarely used by applications. One way in which it can be used is to handle ads: on a PDF of a page on which there is an advertisement, the ArtBox can define the size of that ad. This allows you to place that PDF on another page but only use the ad from that PDF.\n</p>\n\n#####How to see the presence and/or size of the page boxes\n\n<p>\nA PDF always has a MediaBox definition. All the other page boxes do not necessarily have to be present within the file.\n\nIf you crop pages in Adobe Acrobat 6 and later, the window that is shown displays the size of the various box sizes. Another option is to use the Preflight function in Acrobat Professional (version 6 and later). The pages boxes are shown in the Page information section.\n\nThere are a number of plug-ins that are a bit more user friendly than the Acrobat functions. I personally love the DocuBox plug-in which is a part of Agfa’s Apogee Prepress workflow.\n</p>\n\n\n#####How to change page boxes\n\n<p>\nYou can use the Crop Pages tool in Acrobat Professional to change the page boxes. A number of plug-ins offer more sophisticated control. Enfocus PitStop isn’t too bad but again I prefer the Agfa DocuBox plug-in. If you know about a good plug-in, add a comment to this page!\n</p>\n\n\n#####Do I even need to worry about all these boxes?\n\n<p>\nIn the past: YES. Older applications did not define the trim box properly, forcing most prepress operators to center pages and hope everything worked out fine (which it usually did, by the way).\n\nNowadays applications are PDF-aware enough to get things right from the start. Take Adobe InDesign for example:\n\nBleedBox information is sourced from the bleed settings in the marks & bleeds section of the print dialog box.\nThe TrimBox is taken from the document setup.\nThe MediaBox size is defined by the media size to which you print. If the “paper”-size width and height are set to automatic, the MediaBox size will be equal to the BleedBox size.\nThe CropBox size is set to be the same as the Media size.\n</p>\n\n\n#####I want to see the finished trim size of a PDF\n\n<p>\nTo view a PDF at it’s finished (trim) size, set the CropBox to match the TrimBox. Some systems do this by default. This has users who are not familiar with PDF worry if there is any bleed in the document. They do not realise that there may be information available which simply isn’t visible on-screen. Acrobat plug-ins such as Enfocus PitStop allow you to alternate the PDF view between TrimBox and MediaBox.\n</p>\n\n#####Errors referring to the BBox\n\n<p>\nTo view a PDF at it’s finished (trim) size, set the CropBox to match the TrimBox. Some systems do this by default. This has users who are not familiar with PDF worry if there is any bleed in the document. They do not realise that there may be information available which simply isn’t visible on-screen. Acrobat plug-ins such as Enfocus PitStop allow you to alternate the PDF view between TrimBox and MediaBox.\n</p>","slug":"IOS/2013-04-24-cgpdfbox","updated":1416373854000,"excerpt":"<p>A PDF describes the content and appearance of one or more pages. The exact size of that page is not as straightforward as you might think. There can be up to 5 different descriptions in a PDF that relate to its size. These are called the page boxes:</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> CGPDFBox {</div><div class=\"line\">   kCGPDFMediaBox = <span class=\"number\">0</span>,</div><div class=\"line\">   kCGPDFCropBox = <span class=\"number\">1</span>,</div><div class=\"line\">   kCGPDFBleedBox = <span class=\"number\">2</span>,</div><div class=\"line\">   kCGPDFTrimBox = <span class=\"number\">3</span>,</div><div class=\"line\">   kCGPDFArtBox = <span class=\"number\">4</span></div><div class=\"line\">};</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> CGPDFBox CGPDFBox;</div></pre></td></tr></table></figure>\n\n<h5 id=\"KCGPDFMediaBox\">KCGPDFMediaBox</h5>\n<p><br>The MediaBox is used to specify the width and height of the page. For the average user, this probably equals the actual page size. For prepress use, this is not the case as we prefer our pages to be defined slightly oversized so that we can see the bleed (Images or other elements touching an outer edge of a printed page need to extend beyond the edge of the paper to compensate for inaccuracies in trimming the page), the crop marks and useful information such as the file name or the date and time when the file was created. This means that PDF files used in graphic arts usually have a MediaBox which is larger then the trimmed page size. The MediaBox is the largest page box in a PDF. The other page boxes can equal the size of the MediaBox but they cannot be larger.<br></p>\n\n<h5 id=\"kCGPDFCropBox\">kCGPDFCropBox</h5>\n<p><br>The CropBox defines the region to which the page contents are to be clipped. Acrobat uses this size for screen display and printing. For prepress use, the CropBox is pretty irrelevant. The GWG industry association recommends not to use the CropBox at all.<br></p>\n\n ","_id":"qfyha3qx6n9yonzz","tags":[],"photos":[],"link":""},{"layout":"post","title":"Air Print","date":1366957740000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>Air Print</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawPageAtIndex:(<span class=\"built_in\">NSInteger</span>)pageIndex inRect:(<span class=\"built_in\">CGRect</span>)printableRect</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> pageRect = CGPDFPageGetBoxRect([_item openPage:pageIndex +<span class=\"number\">1</span>], kCGPDFMediaBox);</div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    CGContextSetRGBFillColor(context, <span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>);</div><div class=\"line\">    CGContextFillRect(context,printableRect);</div><div class=\"line\">    CGContextTranslateCTM(context, <span class=\"number\">0.0</span>, printableRect<span class=\"variable\">.size</span><span class=\"variable\">.height</span>);</div><div class=\"line\">    CGContextTranslateCTM(context, printableRect<span class=\"variable\">.origin</span><span class=\"variable\">.x</span>, printableRect<span class=\"variable\">.origin</span><span class=\"variable\">.y</span>);</div><div class=\"line\">    CGContextScaleCTM(context, printableRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>/pageRect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>, -printableRect<span class=\"variable\">.size</span><span class=\"variable\">.height</span>/pageRect<span class=\"variable\">.size</span><span class=\"variable\">.height</span>);</div><div class=\"line\">    CGContextSaveGState(context);</div><div class=\"line\">    CGContextDrawPDFPage(context, [_item openPage:pageIndex + <span class=\"number\">1</span>]);</div><div class=\"line\">    CGContextRestoreGState(context);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">} </div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-04-26-air-print.markdown","raw":"---\nlayout: post\ntitle: \"Air Print\"\ndate: 2013-04-26 14:29\ncomments: true\ncategories: IOS\n---\n<p>Air Print</p>\n\n{% codeblock lang:objc %}\n- (void)drawPageAtIndex:(NSInteger)pageIndex inRect:(CGRect)printableRect\n{\n    CGRect pageRect = CGPDFPageGetBoxRect([_item openPage:pageIndex +1], kCGPDFMediaBox);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextSetRGBFillColor(context, 1.0,1.0,1.0,1.0);\n    CGContextFillRect(context,printableRect);\n    CGContextTranslateCTM(context, 0.0, printableRect.size.height);\n    CGContextTranslateCTM(context, printableRect.origin.x, printableRect.origin.y);\n    CGContextScaleCTM(context, printableRect.size.width/pageRect.size.width, -printableRect.size.height/pageRect.size.height);\n    CGContextSaveGState(context);\n    CGContextDrawPDFPage(context, [_item openPage:pageIndex + 1]);\n    CGContextRestoreGState(context);\n\n\n} \n{%  endcodeblock %}","slug":"IOS/2013-04-26-air-print","updated":1416373854000,"excerpt":"","_id":"sg2e051wgxrlm52t","tags":[],"photos":[],"link":""},{"layout":"post","title":"Xcode 不进C++ 断点","date":1366964700000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>Xcode4.6的bug能进去oc函数的断点，但是c++函数没进去。<br></p>\n","source":"_posts/IOS/2013-04-26-xcode-bu-jin-c-plus-plus-duan-dian.markdown","raw":"---\nlayout: post\ntitle: \"Xcode 不进C++ 断点\"\ndate: 2013-04-26 16:25\ncomments: true\ncategories: IOS\n---\n<p>\nXcode4.6的bug能进去oc函数的断点，但是c++函数没进去。\n</p>\n","slug":"IOS/2013-04-26-xcode-bu-jin-c-plus-plus-duan-dian","updated":1416373854000,"excerpt":"","_id":"43apl1w2ywuzjbfb","tags":[],"photos":[],"link":""},{"layout":"post","title":"IOS 制作静态库","date":1367054280000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<h5 id=\"1-静态库工程的建立：\">1.静态库工程的建立：</h5>\n<p><br>Xcode New一个新的project，选择IOS下面的Framework&amp;Library，下面有一个Cocoa Touch Static Library。直接next去建立一个Print这样的工程。<br></p>","source":"_posts/IOS/2013-04-27-ios-zhi-zuo-jing-tai-ku.markdown","raw":"---\nlayout: post\ntitle: \"IOS 制作静态库\"\ndate: 2013-04-27 17:18\ncomments: true\ncategories: IOS\n---\n#####1.静态库工程的建立：\n<p>\nXcode New一个新的project，选择IOS下面的Framework&Library，下面有一个Cocoa Touch Static Library。直接next去建立一个Print这样的工程。\n</p>","slug":"IOS/2013-04-27-ios-zhi-zuo-jing-tai-ku","updated":1416373854000,"excerpt":"","_id":"c6du1bg1ha1cv6p3","tags":[],"photos":[],"link":""},{"layout":"post","title":"ARC","date":1367819100000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p>非ARC工程使用ARC文件时候，选中工程-&gt;TARGETS-&gt;相应的target然后选中右侧的“Build Phases”，向下就找到“Compile Sources”了。对相应的文件添加:-fobjc-arc参数。<br></p><br><p><br>ARC工程使用非ARC文件时候，选中工程-&gt;TARGETS-&gt;相应的target然后选中右侧的“Build Phases”，向下就找到“Compile Sources”了。对相应的文件添加:-fno-objc-arc参数。<br></p>\n","source":"_posts/IOS/2013-05-06-arc.markdown","raw":"---\nlayout: post\ntitle: \"ARC\"\ndate: 2013-05-06 13:45\ncomments: true\ncategories: IOS\n---\n<p>非ARC工程使用ARC文件时候，选中工程->TARGETS->相应的target然后选中右侧的“Build Phases”，向下就找到“Compile Sources”了。对相应的文件添加:-fobjc-arc参数。\n</p>\n<p>\nARC工程使用非ARC文件时候，选中工程->TARGETS->相应的target然后选中右侧的“Build Phases”，向下就找到“Compile Sources”了。对相应的文件添加:-fno-objc-arc参数。\n</p>\n","slug":"IOS/2013-05-06-arc","updated":1416373854000,"excerpt":"","_id":"xlpd2qy1p9k2l0jb","tags":[],"photos":[],"link":""},{"layout":"post","title":"系统UI本地化","date":1368505080000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>在iOS应用中，有时候会需要调用系统的一些UI控件，例如：<br><br>在UIWebView中长按会弹出系统的上下文菜单<br>在UIImagePickerController中会使用系统的照相机界面<br>在编译状态下的UITableViewCell，处于待删除时，会有一个系统的删除按钮。<br>以上这些UI控件中，其显示的语言并不是和你当前手机的系统语言一致的。而是根据你的App内部的语言设置来显示。结果就是，如果你没有设置恰当的话，你的中文App可能会出现一些英文的控件文字。<br></p>\n\n<p><br>用vim直接打开工程的Info.plist文件，在文件中增加如下内容即可：<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;CFBundleLocalizations&lt;/key&gt;</div><div class=\"line\">   &lt;array&gt;</div><div class=\"line\">           &lt;string&gt;zh_CN&lt;/string&gt;</div><div class=\"line\">           &lt;string&gt;en&lt;/string&gt;</div><div class=\"line\">   &lt;/array&gt;</div></pre></td></tr></table></figure>\n\n<p>from:<br><a href=\"http://blog.devtang.com/blog/2013/01/23/set-ios-system-ui-language/\" target=\"_blank\" rel=\"external\"><br>http://blog.devtang.com/blog/2013/01/23/set-ios-system-ui-language/<br></a><br></p>\n","source":"_posts/IOS/2013-05-14-xi-tong-uiben-di-hua.markdown","raw":"---\nlayout: post\ntitle: \"系统UI本地化\"\ndate: 2013-05-14 12:18\ncomments: true\ncategories: IOS\n---\n\n<p>\n在iOS应用中，有时候会需要调用系统的一些UI控件，例如：\n\n在UIWebView中长按会弹出系统的上下文菜单\n在UIImagePickerController中会使用系统的照相机界面\n在编译状态下的UITableViewCell，处于待删除时，会有一个系统的删除按钮。\n以上这些UI控件中，其显示的语言并不是和你当前手机的系统语言一致的。而是根据你的App内部的语言设置来显示。结果就是，如果你没有设置恰当的话，你的中文App可能会出现一些英文的控件文字。\n</p>\n\n<p>\n用vim直接打开工程的Info.plist文件，在文件中增加如下内容即可：\n</p>\n\n{% codeblock lang:objc %}\n<key>CFBundleLocalizations</key>\n   <array>\n           <string>zh_CN</string>\n           <string>en</string>\n   </array>\n{% endcodeblock %}\n\n<p>from:\n<a href=\"http://blog.devtang.com/blog/2013/01/23/set-ios-system-ui-language/\">\nhttp://blog.devtang.com/blog/2013/01/23/set-ios-system-ui-language/\n</a>\n</p>\n","slug":"IOS/2013-05-14-xi-tong-uiben-di-hua","updated":1416373854000,"excerpt":"","_id":"qehdnazlfnh43ul7","tags":[],"photos":[],"link":""},{"layout":"post","title":"FTP文件类型","date":1369187640000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>IOS FTP获取文件列表信息后。kCFFTPResourceType 对应的是文件类型。这个在 sys/dirent.h 头文件中有定义。<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#define\tDT_UNKNOWN\t 0</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_FIFO\t\t 1</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_CHR\t\t 2</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_DIR\t\t 4</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_BLK\t\t 6</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_REG\t\t 8</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_LNK\t\t10</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_SOCK\t\t12</span></div><div class=\"line\"><span class=\"preprocessor\">#define\tDT_WHT\t\t14</span></div></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">DT_UNKNOWN    未知类型</div><div class=\"line\"></div><div class=\"line\">DT_RET        普通文件</div><div class=\"line\"></div><div class=\"line\">DT_DIR        目录文件</div><div class=\"line\"></div><div class=\"line\">DT_FIFO       命名管道</div><div class=\"line\"></div><div class=\"line\">DT_SOCK       本地套接口</div><div class=\"line\"></div><div class=\"line\">DT_CHR        字符设备文件</div><div class=\"line\"></div><div class=\"line\">DT_BLK        块设备文件</div></pre></td></tr></table></figure>\n\n","source":"_posts/IOS/2013-05-22-ftpwen-jian-lei-xing.markdown","raw":"---\nlayout: post\ntitle: \"FTP文件类型\"\ndate: 2013-05-22 09:54\ncomments: true\ncategories: IOS\n---\n<p>\nIOS FTP获取文件列表信息后。kCFFTPResourceType 对应的是文件类型。这个在 sys/dirent.h 头文件中有定义。\n</p>\n\n{% codeblock lang:objc %}\n#define\tDT_UNKNOWN\t 0\n#define\tDT_FIFO\t\t 1\n#define\tDT_CHR\t\t 2\n#define\tDT_DIR\t\t 4\n#define\tDT_BLK\t\t 6\n#define\tDT_REG\t\t 8\n#define\tDT_LNK\t\t10\n#define\tDT_SOCK\t\t12\n#define\tDT_WHT\t\t14\n{% endcodeblock %}\n\n{% codeblock lang:objc %}\n\nDT_UNKNOWN    未知类型\n\nDT_RET        普通文件\n\nDT_DIR        目录文件\n\nDT_FIFO       命名管道\n\nDT_SOCK       本地套接口\n\nDT_CHR        字符设备文件\n\nDT_BLK        块设备文件\n{% endcodeblock %}\n\n","slug":"IOS/2013-05-22-ftpwen-jian-lei-xing","updated":1416373854000,"excerpt":"","_id":"g1uoemn5qy0ibobn","tags":[],"photos":[],"link":""},{"layout":"post","title":"后台请求多些时间","date":1369379700000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIApplication</span> *app = [<span class=\"built_in\">UIApplication</span> sharedApplication];</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">//一个后台任务标识符</span></div><div class=\"line\"> UIBackgroundTaskIdentifier taskID;</div><div class=\"line\"> taskID = [app beginBackgroundTaskWithExpirationHandler:^{</div><div class=\"line\">     <span class=\"comment\">//如果系统觉得我们还是运行了太久，将执行这个程序块，并停止运行应用程序</span></div><div class=\"line\">     [app endBackgroundTask:taskID];</div><div class=\"line\"> }];</div><div class=\"line\"> <span class=\"comment\">//UIBackgroundTaskInvalid表示系统没有为我们提供额外的时候</span></div><div class=\"line\"> <span class=\"keyword\">if</span> (taskID == UIBackgroundTaskInvalid) {</div><div class=\"line\">     <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Failed to start background task!\"</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span>;</div><div class=\"line\"> }</div><div class=\"line\"> <span class=\"keyword\">while</span> (app<span class=\"variable\">.backgroundTimeRemaining</span> &gt;<span class=\"number\">0.0</span>)</div><div class=\"line\"> {</div><div class=\"line\">     </div><div class=\"line\"> }</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Starting background task with %f seconds remaining\"</span>, app<span class=\"variable\">.backgroundTimeRemaining</span>);</div><div class=\"line\"> [<span class=\"built_in\">NSThread</span> sleepForTimeInterval:<span class=\"number\">10</span>];</div><div class=\"line\"> <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Finishing background task with %f seconds remaining\"</span>,app<span class=\"variable\">.backgroundTimeRemaining</span>);</div><div class=\"line\"> <span class=\"comment\">//告诉系统我们完成了</span></div><div class=\"line\"> [app endBackgroundTask:taskID];</div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-05-24-hou-tai-qing-qiu-duo-xie-shi-jian.markdown","raw":"---\nlayout: post\ntitle: \"后台请求多些时间\"\ndate: 2013-05-24 15:15\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n   UIApplication *app = [UIApplication sharedApplication];\n    \n    //一个后台任务标识符\n    UIBackgroundTaskIdentifier taskID;\n    taskID = [app beginBackgroundTaskWithExpirationHandler:^{\n        //如果系统觉得我们还是运行了太久，将执行这个程序块，并停止运行应用程序\n        [app endBackgroundTask:taskID];\n    }];\n    //UIBackgroundTaskInvalid表示系统没有为我们提供额外的时候\n    if (taskID == UIBackgroundTaskInvalid) {\n        NSLog(@\"Failed to start background task!\");\n        return;\n    }\n    while (app.backgroundTimeRemaining >0.0)\n    {\n        \n    }\n    NSLog(@\"Starting background task with %f seconds remaining\", app.backgroundTimeRemaining);\n    [NSThread sleepForTimeInterval:10];\n    NSLog(@\"Finishing background task with %f seconds remaining\",app.backgroundTimeRemaining);\n    //告诉系统我们完成了\n    [app endBackgroundTask:taskID];\n{% endcodeblock %}\n","slug":"IOS/2013-05-24-hou-tai-qing-qiu-duo-xie-shi-jian","updated":1416373854000,"excerpt":"","_id":"szf71yh0rylki0op","tags":[],"photos":[],"link":""},{"layout":"post","title":"压缩视频","date":1369367820000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>) lowQuailtyWithInputURL:(<span class=\"built_in\">NSURL</span>*)inputURL</div><div class=\"line\">                                   outputURL:(<span class=\"built_in\">NSURL</span>*)outputURL</div><div class=\"line\">                                     blockHandler:(<span class=\"keyword\">void</span> (^)(AVAssetExportSession*))handler</div><div class=\"line\">{</div><div class=\"line\">    AVURLAsset *asset = [AVURLAsset URLAssetWithURL:inputURL options:<span class=\"literal\">nil</span>];</div><div class=\"line\">    AVAssetExportSession *session = [[AVAssetExportSession alloc] initWithAsset:asset     presetName:AVAssetExportPresetMediumQuality];</div><div class=\"line\">    session<span class=\"variable\">.outputURL</span> = outputURL;</div><div class=\"line\">    session<span class=\"variable\">.outputFileType</span> = AVFileTypeQuickTimeMovie;</div><div class=\"line\">    [session exportAsynchronouslyWithCompletionHandler:^(<span class=\"keyword\">void</span>)</div><div class=\"line\">     {</div><div class=\"line\">         handler(session);</div><div class=\"line\">     }];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span> lowQuailtyWithInputURL:video outputURL:output blockHandler:^(AVAssetExportSession *session)</div><div class=\"line\">{</div><div class=\"line\">     <span class=\"keyword\">if</span> (session<span class=\"variable\">.status</span> == AVAssetExportSessionStatusCompleted)</div><div class=\"line\">     {</div><div class=\"line\">         </div><div class=\"line\">     }</div><div class=\"line\">     <span class=\"keyword\">else</span></div><div class=\"line\">     {</div><div class=\"line\">         </div><div class=\"line\">         </div><div class=\"line\">     }</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p><br>在block里面检测成功，失败，或者是取消，然后释放session.<br><br>期间可以通过不断的查看session的progress属性来获取转换的进度。<br><br>可以设置这些压缩质量<br><br>AVF_EXPORT NSString <em>const AVAssetExportPresetLowQuality        NS_AVAILABLE_IOS(4_0);<br>AVF_EXPORT NSString </em>const AVAssetExportPresetMediumQuality     NS_AVAILABLE_IOS(4_0);<br>AVF_EXPORT NSString *const AVAssetExportPresetHighestQuality    NS_AVAILABLE_IOS(4_0);<br></p>","source":"_posts/IOS/2013-05-24-ya-suo-shi-pin.markdown","raw":"---\nlayout: post\ntitle: \"压缩视频\"\ndate: 2013-05-24 11:57\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n- (void) lowQuailtyWithInputURL:(NSURL*)inputURL\n                                   outputURL:(NSURL*)outputURL\n                                     blockHandler:(void (^)(AVAssetExportSession*))handler\n{\n    AVURLAsset *asset = [AVURLAsset URLAssetWithURL:inputURL options:nil];\n    AVAssetExportSession *session = [[AVAssetExportSession alloc] initWithAsset:asset     presetName:AVAssetExportPresetMediumQuality];\n    session.outputURL = outputURL;\n    session.outputFileType = AVFileTypeQuickTimeMovie;\n    [session exportAsynchronouslyWithCompletionHandler:^(void)\n     {\n         handler(session);\n     }];\n}\n\n{% endcodeblock%}\n\n{% codeblock lang:objc %}\n[self lowQuailtyWithInputURL:video outputURL:output blockHandler:^(AVAssetExportSession *session)\n{\n     if (session.status == AVAssetExportSessionStatusCompleted)\n     {\n         \n     }\n     else\n     {\n         \n         \n     }\n}];\n\n{% endcodeblock%}\n\n<p>\n在block里面检测成功，失败，或者是取消，然后释放session.\n\n期间可以通过不断的查看session的progress属性来获取转换的进度。\n\n可以设置这些压缩质量\n\nAVF_EXPORT NSString *const AVAssetExportPresetLowQuality        NS_AVAILABLE_IOS(4_0);\nAVF_EXPORT NSString *const AVAssetExportPresetMediumQuality     NS_AVAILABLE_IOS(4_0);\nAVF_EXPORT NSString *const AVAssetExportPresetHighestQuality    NS_AVAILABLE_IOS(4_0);\n</p>","slug":"IOS/2013-05-24-ya-suo-shi-pin","updated":1416373854000,"excerpt":"","_id":"nq4ocav6xajdt42p","tags":[],"photos":[],"link":""},{"layout":"post","title":"删除目录下所有svn文件命令行","date":1369797840000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo find /Users/user/Desktop/svn目录/ -name <span class=\"string\">\".svn\"</span> -exec rm -r {} \\;</div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-05-29-shan-chu-mu-lu-xia-suo-you-svnwen-jian-ming-ling-xing.markdown","raw":"---\nlayout: post\ntitle: \"删除目录下所有svn文件命令行\"\ndate: 2013-05-29 11:24\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:c %}\nsudo find /Users/user/Desktop/svn目录/ -name \".svn\" -exec rm -r {} \\;\n\n{% endcodeblock%}\n","slug":"IOS/2013-05-29-shan-chu-mu-lu-xia-suo-you-svnwen-jian-ming-ling-xing","updated":1416373854000,"excerpt":"","_id":"ehcwt4uok9hwscjb","tags":[],"photos":[],"link":""},{"layout":"post","title":"只运行一次的代码","date":1369813020000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</div><div class=\"line\">      <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^{</div><div class=\"line\">          &lt;<span class=\"preprocessor\">#code to be executed once#&gt;</span></div><div class=\"line\">      });</div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-05-29-zhi-yun-xing-[?]-ci-de-dai-ma.markdown","raw":"---\nlayout: post\ntitle: \"只运行一次的代码\"\ndate: 2013-05-29 15:37\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n  static dispatch_once_t onceToken;\n        dispatch_once(&onceToken, ^{\n            <#code to be executed once#>\n        });\n{% endcodeblock %}\n","slug":"IOS/2013-05-29-zhi-yun-xing-[?]-ci-de-dai-ma","updated":1416373854000,"excerpt":"","_id":"1u1mhv6th98oom1i","tags":[],"photos":[],"link":""},{"layout":"post","title":"svn上传工程","date":1369892940000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p></p><p><br>svn上传工程前，除了删除build文件夹外还要删除一下工程文件里的两个文件。</p>\n<p>\n\n <img src=\"/images/img1.png\">\n\n</p>","source":"_posts/IOS/2013-05-30-svnshang-chuan-gong-cheng.markdown","raw":"---\nlayout: post\ntitle: \"svn上传工程\"\ndate: 2013-05-30 13:49\ncomments: true\ncategories: IOS\n---\n<p>\nsvn上传工程前，除了删除build文件夹外还要删除一下工程文件里的两个文件。\n<p>\n\n {% img /images/img1.png %}\n \n","slug":"IOS/2013-05-30-svnshang-chuan-gong-cheng","updated":1416373854000,"excerpt":"","_id":"t5tqsah00jph58ti","tags":[],"photos":[],"link":""},{"layout":"post","title":"工程重命名","date":1370307480000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":" <img src=\"/images/Project/img1.png\">\n\n <img src=\"/images/Project/img2.png\">\n\n <img src=\"/images/Project/img3.png\">\n\n<p> <img src=\"/images/Project/img4.png\"><br> </p><p><br> 如果要修改info.plist 和pch的路径<br>In the left side of the middle pane, select your app under “Targets”<br>Select the tab “Build Settings”<br>Search the following keywords: “info.plist” and “pch”<br>At this point it should be pretty clear which are the ones you need to modify.<br>Click on “Validate Settings” and you’re done.<br> </p><p></p>\n","source":"_posts/IOS/2013-06-04-gong-cheng-zhong-ming-ming.markdown","raw":"---\nlayout: post\ntitle: \"工程重命名\"\ndate: 2013-06-04 08:58\ncomments: true\ncategories: IOS\n---\n\n {% img /images/Project/img1.png %}\n \n {% img /images/Project/img2.png %}\n \n {% img /images/Project/img3.png %}\n \n {% img /images/Project/img4.png %}\n <p>\n 如果要修改info.plist 和pch的路径\nIn the left side of the middle pane, select your app under \"Targets\"\nSelect the tab \"Build Settings\"\nSearch the following keywords: \"info.plist\" and \"pch\"\nAt this point it should be pretty clear which are the ones you need to modify.\nClick on \"Validate Settings\" and you're done.\n </p>","slug":"IOS/2013-06-04-gong-cheng-zhong-ming-ming","updated":1416373854000,"excerpt":"","_id":"onm8d8e35p9uc10n","tags":[],"photos":[],"link":""},{"layout":"post","title":"单例的属性","date":1370504700000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>由于单例的生命周期是在整个程序的生命周期中的，所以单例的属性也是一样，要主要属性的更新。<br></p>\n","source":"_posts/IOS/2013-06-06-dan-li-de-shu-xing.markdown","raw":"---\nlayout: post\ntitle: \"单例的属性\"\ndate: 2013-06-06 15:45\ncomments: true\ncategories: IOS\n---\n\n<p>\n由于单例的生命周期是在整个程序的生命周期中的，所以单例的属性也是一样，要主要属性的更新。\n</p>\n","slug":"IOS/2013-06-06-dan-li-de-shu-xing","updated":1416373854000,"excerpt":"","_id":"sc6ij090769pztdm","tags":[],"photos":[],"link":""},{"layout":"post","title":"time out waiting for app to launch","date":1370592000000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>在真机器debug的时候不要使用企业证书。<br></p>\n","source":"_posts/IOS/2013-06-07-time-out-waiting-for-app-to-launch.markdown","raw":"---\nlayout: post\ntitle: \"time out waiting for app to launch\"\ndate: 2013-06-07 16:00\ncomments: true\ncategories: IOS\n---\n<p>\n在真机器debug的时候不要使用企业证书。\n</p>\n","slug":"IOS/2013-06-07-time-out-waiting-for-app-to-launch","updated":1416373854000,"excerpt":"","_id":"slucqks9u2mvlzj9","tags":[],"photos":[],"link":""},{"layout":"post","title":"UIImag Scale","date":1370583240000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIImage</span>*)scaleToSize:(<span class=\"built_in\">CGSize</span>)size {</div><div class=\"line\">    UIGraphicsBeginImageContext(size);</div><div class=\"line\">    </div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    CGContextTranslateCTM(context, <span class=\"number\">0.0</span>, size<span class=\"variable\">.height</span>);</div><div class=\"line\">    CGContextScaleCTM(context, <span class=\"number\">1.0</span>, -<span class=\"number\">1.0</span>);</div><div class=\"line\">    </div><div class=\"line\">    CGContextDrawImage(context, CGRectMake(<span class=\"number\">0.0</span>f, <span class=\"number\">0.0</span>f, size<span class=\"variable\">.width</span>, size<span class=\"variable\">.height</span> - <span class=\"number\">4.5</span>), <span class=\"keyword\">self</span><span class=\"variable\">.CGImage</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIImage</span>* scaledImage = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    </div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> scaledImage;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-06-07-uiimag-scale.markdown","raw":"---\nlayout: post\ntitle: \"UIImag Scale\"\ndate: 2013-06-07 13:34\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n- (UIImage*)scaleToSize:(CGSize)size {\n    UIGraphicsBeginImageContext(size);\n    \n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextTranslateCTM(context, 0.0, size.height);\n    CGContextScaleCTM(context, 1.0, -1.0);\n    \n    CGContextDrawImage(context, CGRectMake(0.0f, 0.0f, size.width, size.height - 4.5), self.CGImage);\n    \n    UIImage* scaledImage = UIGraphicsGetImageFromCurrentImageContext();\n    \n    UIGraphicsEndImageContext();\n    \n    return scaledImage;\n}\n{% endcodeblock%}\n","slug":"IOS/2013-06-07-uiimag-scale","updated":1416373854000,"excerpt":"","_id":"wgaifg55d7lsr5n0","tags":[],"photos":[],"link":""},{"layout":"post","title":"Line With Arrow","date":1371431940000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)drawLine: (<span class=\"built_in\">CGPoint</span>) from to: (<span class=\"built_in\">CGPoint</span>) to singleArrow:(<span class=\"built_in\">BOOL</span>)single</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> radian = <span class=\"number\">0.5</span>;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> length = <span class=\"number\">5</span>;</div><div class=\"line\"> </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> a = to<span class=\"variable\">.x</span> &gt; from<span class=\"variable\">.x</span>?-<span class=\"number\">1</span>:<span class=\"number\">1</span> ;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span>  x1 = to<span class=\"variable\">.x</span> + a*length*cos(atan((to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)/(to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>))- radian);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span>  y1 = to<span class=\"variable\">.y</span> + a*length*sin(atan((to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)/(to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>)) - radian);</div><div class=\"line\">    </div><div class=\"line\">   </div><div class=\"line\">    a = to<span class=\"variable\">.y</span> &gt; from<span class=\"variable\">.y</span>? -<span class=\"number\">1</span>:<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span>  x2 = to<span class=\"variable\">.x</span> + a*length*sin(atan((to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>)/(to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)) - radian);</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span>  y2 = to<span class=\"variable\">.y</span> + a*length*cos(atan((to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>)/(to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)) - radian);</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">       </div><div class=\"line\">    <span class=\"keyword\">if</span> (!single)</div><div class=\"line\">    {</div><div class=\"line\"></div><div class=\"line\">        a = to<span class=\"variable\">.y</span> &gt; from<span class=\"variable\">.y</span>?  <span class=\"number\">1</span>:-<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span>  x3 = from<span class=\"variable\">.x</span> +  a*length*sin(atan((to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>)/(to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)) - radian);</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span>  y3 = from<span class=\"variable\">.y</span> +  a*length*cos(atan((to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>)/(to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)) - radian);</div><div class=\"line\">        [_currentStroke<span class=\"variable\">.path</span> addLineToPoint:CGPointMake(x3,y3)];</div><div class=\"line\">        </div><div class=\"line\">         </div><div class=\"line\">         a = to<span class=\"variable\">.x</span> &gt; from<span class=\"variable\">.x</span>?<span class=\"number\">1</span>:-<span class=\"number\">1</span> ;</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span>  x4 = from<span class=\"variable\">.x</span> + a*length*cos(atan((to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)/(to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>)) - radian);</div><div class=\"line\">        <span class=\"built_in\">CGFloat</span>  y4 = from<span class=\"variable\">.y</span> + a*length*sin(atan((to<span class=\"variable\">.y</span> - from<span class=\"variable\">.y</span>)/(to<span class=\"variable\">.x</span> - from<span class=\"variable\">.x</span>)) - radian);</div><div class=\"line\">        </div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-06-17-line-with-arrow.markdown","raw":"---\nlayout: post\ntitle: \"Line With Arrow\"\ndate: 2013-06-17 09:19\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n- (void)drawLine: (CGPoint) from to: (CGPoint) to singleArrow:(BOOL)single\n{\n    CGFloat radian = 0.5;\n    CGFloat length = 5;\n \n    \n    int a = to.x > from.x?-1:1 ;\n    CGFloat  x1 = to.x + a*length*cos(atan((to.y - from.y)/(to.x - from.x))- radian);\n    CGFloat  y1 = to.y + a*length*sin(atan((to.y - from.y)/(to.x - from.x)) - radian);\n    \n   \n    a = to.y > from.y? -1:1;\n    CGFloat  x2 = to.x + a*length*sin(atan((to.x - from.x)/(to.y - from.y)) - radian);\n    CGFloat  y2 = to.y + a*length*cos(atan((to.x - from.x)/(to.y - from.y)) - radian);\n \n \n       \n    if (!single)\n    {\n\n        a = to.y > from.y?  1:-1;\n        CGFloat  x3 = from.x +  a*length*sin(atan((to.x - from.x)/(to.y - from.y)) - radian);\n        CGFloat  y3 = from.y +  a*length*cos(atan((to.x - from.x)/(to.y - from.y)) - radian);\n        [_currentStroke.path addLineToPoint:CGPointMake(x3,y3)];\n        \n         \n         a = to.x > from.x?1:-1 ;\n        CGFloat  x4 = from.x + a*length*cos(atan((to.y - from.y)/(to.x - from.x)) - radian);\n        CGFloat  y4 = from.y + a*length*sin(atan((to.y - from.y)/(to.x - from.x)) - radian);\n        \n    }\n}\n\n{% endcodeblock %}\n","slug":"IOS/2013-06-17-line-with-arrow","updated":1416373854000,"excerpt":"","_id":"v4gbryuajv1me4wo","tags":[],"photos":[],"link":""},{"layout":"post","title":"NSTimer的使用","date":1371433020000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>NSTimer 定时器，在编程的时候是十分常用的，但是其实很多时候都没有用对，我们经常都在Controller里创建NStimer,而期待在controller dealloc的时候，去停止定时器：<br></p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)dealloc</div><div class=\"line\">{</div><div class=\"line\">   <span class=\"keyword\">if</span>(_timer != <span class=\"literal\">nil</span>)</div><div class=\"line\">   {</div><div class=\"line\">     [_timer invalidate];</div><div class=\"line\">   }</div><div class=\"line\">   [<span class=\"keyword\">super</span> dealloc];</div><div class=\"line\">}</div></pre></td></tr></table></figure><br><p><br>但实际上contoller永远都不会调用dealloc，因为_timer会retaincontroller一次。<br>在NSTimer创建的时候、NSRunloop会retian NSTimer一次、已保证NSTimer在执行完之前NSTimer不会被dealloc。而且一般NSTimer创建的时候会有个回调的target、而为了保证回调的正常、NSTimer会<br>retian target一次、而我们经常使用controller作为target，这样controller就从来都不会释放了。造成内存泄露。<br></p>","source":"_posts/IOS/2013-06-17-nstimerde-shi-yong.markdown","raw":"---\nlayout: post\ntitle: \"NSTimer的使用\"\ndate: 2013-06-17 09:37\ncomments: true\ncategories: IOS\n---\n<p>\nNSTimer 定时器，在编程的时候是十分常用的，但是其实很多时候都没有用对，我们经常都在Controller里创建NStimer,而期待在controller dealloc的时候，去停止定时器：\n</p>\n{% codeblock lang:objc %}\n- (void)dealloc\n{\n   if(_timer != nil)\n   {\n     [_timer invalidate];\n   }\n   [super dealloc];\n}\n{% endcodeblock %}\n<p>\n但实际上contoller永远都不会调用dealloc，因为_timer会retaincontroller一次。\n在NSTimer创建的时候、NSRunloop会retian NSTimer一次、已保证NSTimer在执行完之前NSTimer不会被dealloc。而且一般NSTimer创建的时候会有个回调的target、而为了保证回调的正常、NSTimer会\nretian target一次、而我们经常使用controller作为target，这样controller就从来都不会释放了。造成内存泄露。\n</p>","slug":"IOS/2013-06-17-nstimerde-shi-yong","updated":1416373854000,"excerpt":"","_id":"gldhtwrftt8z3sw0","tags":[],"photos":[],"link":""},{"layout":"post","title":"Xcode 主题文件夹","date":1371517680000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>~/Library/Developer/Xcode/UserData/FontAndColorThemes<br></p>\n","source":"_posts/IOS/2013-06-18-xcode-zhu-ti-wen-jian-jia.markdown","raw":"---\nlayout: post\ntitle: \"Xcode 主题文件夹\"\ndate: 2013-06-18 09:08\ncomments: true\ncategories: IOS \n---\n<p>\n~/Library/Developer/Xcode/UserData/FontAndColorThemes\n</p>\n","slug":"IOS/2013-06-18-xcode-zhu-ti-wen-jian-jia","updated":1416373854000,"excerpt":"","_id":"fom78jajnjpo68yv","tags":[],"photos":[],"link":""},{"layout":"post","title":"Block","date":1371714900000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>IOS4后苹果开始使用block作为回调函数来取代传统的delegate。这种闭包函数可以是代码的逻辑更加清晰。精简大量的代码，但是由于block会隐藏式地retain在block中使用的变量 ，而没有注意这种情况的情况下，程序很容易出现内存泄露。<br></p>\n\n<p><br>假设我们有一个controller，有个view是加到这个controller的view上面，当view中的某些功能完成的时候，view回调原来设置好的block。但是你会发现这个controller和这个view都无法调用到dealloc了。<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">{</div><div class=\"line\">   [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">   View *view = [View alloc]initWithFrame:CGRectMake(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>)];</div><div class=\"line\">   view<span class=\"variable\">.OnComplete</span>= ^{</div><div class=\"line\">   [<span class=\"keyword\">self</span> print];</div><div class=\"line\">   };</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/************/</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span>(^Block) block;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span>(noautomatic,<span class=\"keyword\">copy</span>)block OnComplete;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> </div></pre></td></tr></table></figure>\n\n<p>上例中，view的语法块中访问self，所以view  retian self一次，所以但view没有调用[_OnComplete  release];之前，controller是不会被dealloc的，而view是在controller的view上面。如果controller不释放，view也不会被释放，这样就进入retain circle了。<br></p>","source":"_posts/IOS/2013-06-20-block.markdown","raw":"---\nlayout: post\ntitle: \"Block\"\ndate: 2013-06-20 15:55\ncomments: true\ncategories: IOS\n---\n<p>\nIOS4后苹果开始使用block作为回调函数来取代传统的delegate。这种闭包函数可以是代码的逻辑更加清晰。精简大量的代码，但是由于block会隐藏式地retain在block中使用的变量 ，而没有注意这种情况的情况下，程序很容易出现内存泄露。\n</p>\n\n<p>\n假设我们有一个controller，有个view是加到这个controller的view上面，当view中的某些功能完成的时候，view回调原来设置好的block。但是你会发现这个controller和这个view都无法调用到dealloc了。\n</p>\n\n{% codeblock lang:objc %}\n\n- (void)viewDidLoad\n{\n   [super viewDidLoad];\n   View *view = [View alloc]initWithFrame:CGRectMake(0,0,100,100)];\n   view.OnComplete= ^{\n   [self print];\n   };\n}\n\n/************/\ntypedef void(^Block) block;\n\n@property(noautomatic,copy)block OnComplete;\n\n\n {% endcodeblock %}\n\n<p>上例中，view的语法块中访问self，所以view  retian self一次，所以但view没有调用[_OnComplete  release];之前，controller是不会被dealloc的，而view是在controller的view上面。如果controller不释放，view也不会被释放，这样就进入retain circle了。\n</p>","slug":"IOS/2013-06-20-block","updated":1416373854000,"excerpt":"","_id":"jjnh86hxhc9zk61b","tags":[],"photos":[],"link":""},{"layout":"post","title":"阴影效率","date":1371716640000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>UIView 如果没有设置阴影的边框会导致、在旋转屏幕或者滑动的时候，界面卡顿，因为设置了阴影的view会不断地重新绘制。解决的方法:<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.layer</span><span class=\"variable\">.shadowColor</span> = [<span class=\"built_in\">UIColor</span> blackColor]<span class=\"variable\">.CGColor</span>;</div><div class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.layer</span><span class=\"variable\">.shadowOffset</span> = CGSizeMake(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.layer</span><span class=\"variable\">.shadowOpacity</span> = <span class=\"number\">0.6</span>;</div><div class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.layer</span><span class=\"variable\">.masksToBounds</span> = <span class=\"literal\">NO</span>;</div><div class=\"line\"><span class=\"comment\">/*********</span></div><div class=\"line\">   self.layer.shadowPath = [UIBezierPath bezierPathWithRect:self.bounds].CGPath;</div><div class=\"line\">   *********/</div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-06-20-yin-ying-xiao-lu.markdown","raw":"---\nlayout: post\ntitle: \"阴影效率\"\ndate: 2013-06-20 16:24\ncomments: true\ncategories: IOS\n---\n<p>\nUIView 如果没有设置阴影的边框会导致、在旋转屏幕或者滑动的时候，界面卡顿，因为设置了阴影的view会不断地重新绘制。解决的方法:\n</p>\n\n{% codeblock lang:objc %}\n        self.layer.shadowColor = [UIColor blackColor].CGColor;\n        self.layer.shadowOffset = CGSizeMake(0, 3);\n        self.layer.shadowOpacity = 0.6;\n        self.layer.masksToBounds = NO;\n        /*********\n           self.layer.shadowPath = [UIBezierPath bezierPathWithRect:self.bounds].CGPath;\n           *********/\n{% endcodeblock %}","slug":"IOS/2013-06-20-yin-ying-xiao-lu","updated":1416373854000,"excerpt":"","_id":"zq4mseas6gza5dp6","tags":[],"photos":[],"link":""},{"layout":"post","title":"Test Install","date":1372125180000,"comments":true,"categories":[],"content":"<p><a href=\"itms-services://?action=download-manifest&url=http://devilmaycry4.github.io/images/yun.plist\" target=\"_blank\" rel=\"external\">Install App</a></p>\n","source":"_posts/IOS/2013-06-25-test-install.markdown","raw":"---\nlayout: post\ntitle: \"Test Install\"\ndate: 2013-06-25 09:53\ncomments: true\ncategories: \n---\n<a href=\"itms-services://?action=download-manifest&url=http://devilmaycry4.github.io/images/yun.plist\">Install App</a>","slug":"IOS/2013-06-25-test-install","updated":1416373854000,"excerpt":"","_id":"z1a2zj93jqoenv0g","tags":[],"photos":[],"link":""},{"layout":"post","title":"Catalog添加属性","date":1372215000000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p><br>Category是Objective-C中常用的语法特性，通过它可以很方便的为已有的类来添加函数。但是Category不允许为已有的类添加新的属性或者成员变量。<br>一种常见的办法是通过runtime.h中objc_getAssociatedObject / objc_setAssociatedObject来访问和生成关联对象。通过这种方法来模拟生成属性。<br></p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//NSObject+IndieBandName.h</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">IndieBandName</span>)</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *indieBandName;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// NSObject+IndieBandName.m   </span></div><div class=\"line\"> <span class=\"preprocessor\">#import <span class=\"title\">\"NSObject+Extension.h\"</span></span></div><div class=\"line\"> <span class=\"preprocessor\">#import <span class=\"title\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *IndieBandNameKey = &amp;IndieBandNameKey;   </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">IndieBandName</span>)</span></div><div class=\"line\"><span class=\"keyword\">@dynamic</span> indieBandName;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)indieBandName {</div><div class=\"line\">    <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>, IndieBandNameKey);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setIndieBandName:(<span class=\"built_in\">NSString</span> *)indieBandName{</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, IndieBandNameKey, indieBandName, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span> DLIntrospection</div></pre></td></tr></table></figure><br><br><br><p><br>这个和Category无关，但是也是runtime.h的一种应用。DLIntrospection，是 一个NSObject Category。它为NSObject提供了一系列扩展函数：<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">DLIntrospection</span>)</span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">NSArray</span> *)classes;</div><div class=\"line\">+ (<span class=\"built_in\">NSArray</span> *)properties;</div><div class=\"line\">+ (<span class=\"built_in\">NSArray</span> *)instanceVariables;</div><div class=\"line\">+ (<span class=\"built_in\">NSArray</span> *)classMethods;</div><div class=\"line\">+ (<span class=\"built_in\">NSArray</span> *)instanceMethods;</div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">NSArray</span> *)protocols;</div><div class=\"line\">+ (<span class=\"built_in\">NSDictionary</span> *)descriptionForProtocol:(Protocol *)proto;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">NSString</span> *)parentClassHierarchy;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p><br>通过这些函数，你可以在调试时（通过po命令）或者运行时获得对象的各种信息。<br></p>","source":"_posts/IOS/2013-06-26-catalogtian-jia-shu-xing.markdown","raw":"---\nlayout: post\ntitle: \"Catalog添加属性\"\ndate: 2013-06-26 10:50\ncomments: true\ncategories: IOS\n---\n<p>\nCategory是Objective-C中常用的语法特性，通过它可以很方便的为已有的类来添加函数。但是Category不允许为已有的类添加新的属性或者成员变量。    \n一种常见的办法是通过runtime.h中objc_getAssociatedObject / objc_setAssociatedObject来访问和生成关联对象。通过这种方法来模拟生成属性。\n</p>\n{% codeblock lang:objc %}\n//NSObject+IndieBandName.h\n@interface NSObject (IndieBandName)\n@property (nonatomic, strong) NSString *indieBandName;\n@end\n\n// NSObject+IndieBandName.m   \n #import \"NSObject+Extension.h\"\n #import <objc/runtime.h>\nstatic const void *IndieBandNameKey = &IndieBandNameKey;   \n@implementation NSObject (IndieBandName)\n@dynamic indieBandName;\n\n- (NSString *)indieBandName {\n    return objc_getAssociatedObject(self, IndieBandNameKey);\n}\n\n- (void)setIndieBandName:(NSString *)indieBandName{\n    objc_setAssociatedObject(self, IndieBandNameKey, indieBandName, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n@end DLIntrospection\n\n{% endcodeblock %}\n\n\n<p>\n这个和Category无关，但是也是runtime.h的一种应用。DLIntrospection，是 一个NSObject Category。它为NSObject提供了一系列扩展函数： \n</p>\n\n{% codeblock lang:objc %}\n@interface NSObject (DLIntrospection)\n\n+ (NSArray *)classes;\n+ (NSArray *)properties;\n+ (NSArray *)instanceVariables;\n+ (NSArray *)classMethods;\n+ (NSArray *)instanceMethods;\n\n+ (NSArray *)protocols;\n+ (NSDictionary *)descriptionForProtocol:(Protocol *)proto;\n\n\n+ (NSString *)parentClassHierarchy;\n@end\n{% endcodeblock %}\n\n<p>\n通过这些函数，你可以在调试时（通过po命令）或者运行时获得对象的各种信息。\n</p>","slug":"IOS/2013-06-26-catalogtian-jia-shu-xing","updated":1416373854000,"excerpt":"","_id":"aiylbnpv9lwxtijh","tags":[],"photos":[],"link":""},{"layout":"post","title":"Xcode Debug","date":1372642980000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#ifdef DEBUG</span></div><div class=\"line\"><span class=\"preprocessor\">#   define NSSLog(fmt, ...) {NSLog((@<span class=\"title\">\"%s [Line %d] \"</span> fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);}</span></div><div class=\"line\"><span class=\"preprocessor\">#else</span></div><div class=\"line\"><span class=\"preprocessor\">#   define NSSLog(...)</span></div><div class=\"line\"><span class=\"preprocessor\">#endif</span></div></pre></td></tr></table></figure>\n","source":"_posts/IOS/2013-07-01-xcode-debug.markdown","raw":"---\nlayout: post\ntitle: \"Xcode Debug\"\ndate: 2013-07-01 09:43\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:objc %}\n#ifdef DEBUG\n#   define NSSLog(fmt, ...) {NSLog((@\"%s [Line %d] \" fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);}\n#else\n#   define NSSLog(...)\n#endif\n{% endcodeblock %}\n","slug":"IOS/2013-07-01-xcode-debug","updated":1416373854000,"excerpt":"","_id":"8mmgkec6iltr0s16","tags":[],"photos":[],"link":""},{"layout":"post","title":"Http Code","date":1372930440000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":" <img src=\"/images/Project/httpcode.png\">","source":"_posts/IOS/2013-07-04-http-code.markdown","raw":"---\nlayout: post\ntitle: \"Http Code\"\ndate: 2013-07-04 17:34\ncomments: true\ncategories: IOS\n---\n {% img /images/Project/httpcode.png %}","slug":"IOS/2013-07-04-http-code","updated":1416373854000,"excerpt":"","_id":"xdl91cofrh1vpxbb","tags":[],"photos":[],"link":""},{"layout":"post","title":"点击顶部状态栏、滚动到顶部","date":1372986840000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<p></p><p><br>将UIScrollView的scrollToTop属性设成YES的时候、点击顶部状态栏，scrollview会自己滚动到顶部。但是如果同时有两个scrollview的scrollToTop属性都是YES的时候，两个scrollview都不会滚动。<br></p>\n","source":"_posts/IOS/2013-07-05-dian-ji-ding-bu-zhuang-tai-lan-,-gun-dong-dao-ding-bu.markdown","raw":"---\nlayout: post\ntitle: \"点击顶部状态栏、滚动到顶部\"\ndate: 2013-07-05 09:14\ncomments: true\ncategories: IOS\n---\n<p>\n将UIScrollView的scrollToTop属性设成YES的时候、点击顶部状态栏，scrollview会自己滚动到顶部。但是如果同时有两个scrollview的scrollToTop属性都是YES的时候，两个scrollview都不会滚动。\n</p]>","slug":"IOS/2013-07-05-dian-ji-ding-bu-zhuang-tai-lan-,-gun-dong-dao-ding-bu","updated":1416373854000,"excerpt":"","_id":"5qnjx94t4qhukak6","tags":[],"photos":[],"link":""},{"layout":"post","title":"给目录下的所有文件添加前缀","date":1374716340000,"comments":true,"categories":["zbxxrq8bpowmj9w3"],"content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rename</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    path = input(<span class=\"string\">\"给目录下的文件添加前缀\"</span>)</div><div class=\"line\">    print(path)</div><div class=\"line\">    Prefix = <span class=\"string\">\"PRE_\"</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (path, dirs, files) <span class=\"keyword\">in</span> os.walk(path):<span class=\"comment\">#遍历目录树</span></div><div class=\"line\">        <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> files:</div><div class=\"line\">            ext = os.path.splitext(filename)[<span class=\"number\">1</span>]</div><div class=\"line\">            all = os.path.normpath(filename)</div><div class=\"line\">            oldpath = path + <span class=\"string\">\"/\"</span> + filename</div><div class=\"line\">            newpath = path + <span class=\"string\">\"/\"</span> + Prefix + filename</div><div class=\"line\">            os.rename(oldpath, newpath)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">\"给png文件添加@2x\"</span>)</div><div class=\"line\">    rename()</div><div class=\"line\">    print(<span class=\"string\">\"finish\"</span>)</div></pre></td></tr></table></figure>","source":"_posts/IOS/2013-07-25-gei-mu-lu-xia-de-suo-you-wen-jian-tian-jia-qian-zhui.markdown","raw":"---\nlayout: post\ntitle: \"给目录下的所有文件添加前缀\"\ndate: 2013-07-25 09:39\ncomments: true\ncategories: IOS\n---\n{% codeblock lang:python %}\nimport os\ndef rename():\n    path = input(\"给目录下的文件添加前缀\")\n    print(path)\n    Prefix = \"PRE_\"\n    for (path, dirs, files) in os.walk(path):#遍历目录树\n        for filename in files:\n            ext = os.path.splitext(filename)[1]\n            all = os.path.normpath(filename)\n            oldpath = path + \"/\" + filename\n            newpath = path + \"/\" + Prefix + filename\n            os.rename(oldpath, newpath)\n\n\n\nif __name__ == '__main__':\n    print(\"给png文件添加@2x\")\n    rename()\n    print(\"finish\")\n{% endcodeblock%}","slug":"IOS/2013-07-25-gei-mu-lu-xia-de-suo-you-wen-jian-tian-jia-qian-zhui","updated":1416373854000,"excerpt":"","_id":"xtlxuq1llcz7o9tr","tags":[],"photos":[],"link":""},{"title":"Block 内存","date":1381311075000,"tags":["i6a8xp2otmmlojjw"],"content":"<p></p><p><br>block调用自身在前面添加__block关键字<br></p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">IBAction</span>)grabURLInBackground:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">{</div><div class=\"line\">   <span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"http://allseeing-i.com\"</span>];</div><div class=\"line\">   __block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</div><div class=\"line\">   [request setCompletionBlock:^{</div><div class=\"line\">      <span class=\"comment\">// Use when fetching text data</span></div><div class=\"line\">      <span class=\"built_in\">NSString</span> *responseString = [request responseString];</div><div class=\"line\"> </div><div class=\"line\">      <span class=\"comment\">// Use when fetching binary data</span></div><div class=\"line\">      NSData *responseData = [request responseData];</div><div class=\"line\">   }];</div><div class=\"line\">   [request setFailedBlock:^{</div><div class=\"line\">      <span class=\"built_in\">NSError</span> *error = [request error];</div><div class=\"line\">   }];</div><div class=\"line\">   [request startAsynchronous];</div><div class=\"line\">}</div></pre></td></tr></table></figure>","source":"_posts/IOS/block-内存.md","raw":"title: Block 内存\ndate: 2013-10-09 17:31:15\ntags: IOS\n---\n<p>\nblock调用自身在前面添加__block关键字\n</p>\n{% codeblock lang:objc %}\n- (IBAction)grabURLInBackground:(id)sender\n{\n   NSURL *url = [NSURL URLWithString:@\"http://allseeing-i.com\"];\n   __block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];\n   [request setCompletionBlock:^{\n      // Use when fetching text data\n      NSString *responseString = [request responseString];\n \n      // Use when fetching binary data\n      NSData *responseData = [request responseData];\n   }];\n   [request setFailedBlock:^{\n      NSError *error = [request error];\n   }];\n   [request startAsynchronous];\n}\n{% endcodeblock %}","slug":"IOS/block-内存","updated":1416373854000,"excerpt":"","_id":"do0ugcln1z9k2ihu","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"ios7 tips","date":1382334995000,"tags":["i6a8xp2otmmlojjw"],"content":"<p>当以navigation的方式pushcontroller的时候，如果plist表的View controller-based status bar appearance = yes时、状态栏的显示隐藏由navgtion里的viewcontrollers自己控制、状态栏的风格由navigation自己控制<br></p><br><p><br>ios7如果某个item左右两边的items不相等，即使左右各放置一个UIBarButtonSystemItemFlexibleSpace也是没法使这个item居中的、可以放置一些隐藏的item使两边相等。<br></p>\n\n<p></p><p><br>调整viewcontroller适配ios7状态栏<br></p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= <span class=\"number\">7</span>) </div><div class=\"line\">{</div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.bounds</span> = CGRectMake(<span class=\"number\">0</span>, -<span class=\"number\">20</span>, <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.width</span>, <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.height</span> );</div><div class=\"line\">    }</div><div class=\"line\"> </div></pre></td></tr></table></figure>\n\n<p> </p><p><br> 参考：<a href=\"http://www.ifun.cc/blog/2013/09/28/gua-pei-ios7kai-fa/\" target=\"_blank\" rel=\"external\">http://www.ifun.cc/blog/2013/09/28/gua-pei-ios7kai-fa/</a><br> </p><p></p>\n","source":"_posts/IOS/ios7-tips.md","raw":"title: ios7 tips\ndate: 2013-10-21 13:56:35\ntags: IOS\n---\n<p>当以navigation的方式pushcontroller的时候，如果plist表的View controller-based status bar appearance = yes时、状态栏的显示隐藏由navgtion里的viewcontrollers自己控制、状态栏的风格由navigation自己控制\n</p>\n<p>\nios7如果某个item左右两边的items不相等，即使左右各放置一个UIBarButtonSystemItemFlexibleSpace也是没法使这个item居中的、可以放置一些隐藏的item使两边相等。\n</p>\n\n<p>\n调整viewcontroller适配ios7状态栏\n</p>\n{% codeblock lang:objc %}\nif ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7) \n{\n        self.view.bounds = CGRectMake(0, -20, self.view.frame.size.width, self.view.frame.size.height );\n    }\n {% endcodeblock %}\n \n <p>\n 参考：http://www.ifun.cc/blog/2013/09/28/gua-pei-ios7kai-fa/\n <p>","slug":"IOS/ios7-tips","updated":1416373854000,"excerpt":"","_id":"amobbm1ykslzlbq0","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"NSCoding","date":1379401148000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>实现序列化自定义对象。只要让该对象实现NSCoding协议。并用NSKeyedArchiver和NSKeyedUnarchiver序列化和反序列化。<br></p>","source":"_posts/IOS/nscoding.md","raw":"title: NSCoding\ndate: 2013-09-17 14:59:08\ntags: IOS\n---\n<p>\n实现序列化自定义对象。只要让该对象实现NSCoding协议。并用NSKeyedArchiver和NSKeyedUnarchiver序列化和反序列化。\n</p>","slug":"IOS/nscoding","updated":1416373854000,"excerpt":"","_id":"r6xa2mfoqyvta1lb","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"NSLayoutConstraint","date":1393985329000,"tags":["i6a8xp2otmmlojjw"],"content":"<p></p><p><br>ios6之后开始使用自动约束布局NSLayoutConstraint，这个可以解决对于不同的ios设备、autoresizingMask的不足。<br></p><br> <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">{</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    _originV = [[<span class=\"built_in\">UIView</span> alloc] init];</div><div class=\"line\">    _originV<span class=\"variable\">.backgroundColor</span> = [<span class=\"built_in\">UIColor</span> redColor];</div><div class=\"line\">    _originV<span class=\"variable\">.translatesAutoresizingMaskIntoConstraints</span> = <span class=\"literal\">NO</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:_originV];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:[NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeWidth relatedBy:NSLayoutRelationEqual  toItem:<span class=\"keyword\">self</span><span class=\"variable\">.view</span> attribute:NSLayoutAttributeWidth multiplier:<span class=\"number\">1</span> constant:-<span class=\"number\">40</span>]];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:[NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeHeight relatedBy:NSLayoutRelationEqual  toItem:<span class=\"keyword\">self</span><span class=\"variable\">.view</span> attribute:NSLayoutAttributeHeight multiplier:<span class=\"number\">1</span> constant:-<span class=\"number\">40</span>]];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:[NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeCenterY relatedBy:NSLayoutRelationEqual  toItem:<span class=\"keyword\">self</span><span class=\"variable\">.view</span> attribute:NSLayoutAttributeCenterY multiplier:<span class=\"number\">1</span> constant:<span class=\"number\">0</span>]];</div><div class=\"line\">    </div><div class=\"line\">    _constran = [NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeCenterX relatedBy:NSLayoutRelationEqual toItem:<span class=\"keyword\">self</span><span class=\"variable\">.view</span> attribute:NSLayoutAttributeCenterX multiplier:<span class=\"number\">1</span> constant:<span class=\"number\">0</span>];</div><div class=\"line\">  </div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:_constran];</div><div class=\"line\">    </div><div class=\"line\">    _but = [<span class=\"built_in\">UIButton</span> buttonWithType:UIButtonTypeRoundedRect];</div><div class=\"line\">    _but<span class=\"variable\">.backgroundColor</span> =[<span class=\"built_in\">UIColor</span> blueColor];</div><div class=\"line\">    _but<span class=\"variable\">.translatesAutoresizingMaskIntoConstraints</span> = <span class=\"literal\">NO</span>;</div><div class=\"line\">    [_but addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(changeButton:) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:_but];</div><div class=\"line\">   </div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeLeft relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeLeft multiplier:<span class=\"number\">1</span> constant:<span class=\"number\">30</span>]];</div><div class=\"line\">    </div><div class=\"line\">      [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeTop relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeTop multiplier:<span class=\"number\">1</span> constant:<span class=\"number\">30</span>]];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeRight relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeRight multiplier:<span class=\"number\">1</span> constant: -<span class=\"number\">30</span>]];</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeBottom relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeBottom multiplier:<span class=\"number\">1</span> constant:-<span class=\"number\">30</span>]];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)changeButton:(<span class=\"built_in\">UIButton</span> *)button</div><div class=\"line\">{</div><div class=\"line\">    _constran<span class=\"variable\">.constant</span> += <span class=\"number\">5</span>;</div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> updateConstraintsIfNeeded];</div><div class=\"line\">}</div><div class=\"line\"> </div></pre></td></tr></table></figure><p></p>\n","source":"_posts/IOS/nslayoutconstraint.md","raw":"title: NSLayoutConstraint\ndate: 2014-03-05 10:08:49\ntags: IOS\n---\n<p>\nios6之后开始使用自动约束布局NSLayoutConstraint，这个可以解决对于不同的ios设备、autoresizingMask的不足。\n</p>\n {% codeblock lang:objc %}\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    _originV = [[UIView alloc] init];\n    _originV.backgroundColor = [UIColor redColor];\n    _originV.translatesAutoresizingMaskIntoConstraints = NO;\n    [self.view addSubview:_originV];\n    \n    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeWidth relatedBy:NSLayoutRelationEqual  toItem:self.view attribute:NSLayoutAttributeWidth multiplier:1 constant:-40]];\n    \n    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeHeight relatedBy:NSLayoutRelationEqual  toItem:self.view attribute:NSLayoutAttributeHeight multiplier:1 constant:-40]];\n    \n    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeCenterY relatedBy:NSLayoutRelationEqual  toItem:self.view attribute:NSLayoutAttributeCenterY multiplier:1 constant:0]];\n    \n    _constran = [NSLayoutConstraint constraintWithItem:_originV attribute:NSLayoutAttributeCenterX relatedBy:NSLayoutRelationEqual toItem:self.view attribute:NSLayoutAttributeCenterX multiplier:1 constant:0];\n  \n    [self.view addConstraint:_constran];\n    \n    _but = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n    _but.backgroundColor =[UIColor blueColor];\n    _but.translatesAutoresizingMaskIntoConstraints = NO;\n    [_but addTarget:self action:@selector(changeButton:) forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:_but];\n   \n    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeLeft relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeLeft multiplier:1 constant:30]];\n    \n      [self.view addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeTop relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeTop multiplier:1 constant:30]];\n    \n    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeRight relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeRight multiplier:1 constant: -30]];\n    \n    [self.view addConstraint:[NSLayoutConstraint constraintWithItem:_but attribute:NSLayoutAttributeBottom relatedBy:NSLayoutRelationEqual toItem:_originV attribute:NSLayoutAttributeBottom multiplier:1 constant:-30]];\n}\n\n- (void)changeButton:(UIButton *)button\n{\n    _constran.constant += 5;\n    [self.view updateConstraintsIfNeeded];\n}\n {% endcodeblock %}","slug":"IOS/nslayoutconstraint","updated":1416373854000,"excerpt":"","_id":"td6n8xdtzuyrq9er","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"OpenFire","date":1398241079000,"tags":["i6a8xp2otmmlojjw"],"content":"<p>先到<a href=\"http://dev.mysql.com/downloads/mysql\" target=\"_blank\" rel=\"external\">http://dev.mysql.com/downloads/mysql</a>下载对应的mysql版本。<br>安装并启动mysql、</p>\n<p>二、打开终端，定义mysql别名</p><br><p>输入alias命令</p><br><pre>alias mysql=/usr/local/mysql/bin/mysql</pre><br><p>回车，再输入</p><br><pre>alias mysqladmin=/usr/local/mysql/bin/mysqladmin</pre><br><p>三、设置mysql root帐号的密码</p><br><pre>mysqladmin -u root password 初始密码</pre><br><br><p>2.如果设置完密码后，需要修改，执行命令</p><br><pre>mysqladmin -u root -p  password 最新密码</pre><br><br><p>接着会提示输入密码，此时输入旧密码，回车</p><br><p>&nbsp;四、连接数据库</p><br><pre>mysql -u root -p</pre><br><br><p>然后提示输入密码，输入三中设置的初始密码</p><br><p>2.如果登陆远程主机上的mysql数据库</p><br><pre>mysql -h 主机地址 -u 用户名 -p 用户密码</pre><br><br><p>&nbsp;</p><br><p>五、执行常用的mysql数据库操作</p><br><p>注意：以下操作都发现在，连接数据库之后，进入mysql环境，之后执行的命令都必须带有分号&ldquo;;&rdquo;</p><br><p>首先，以root权限连接mysql</p><br><pre>mysql -u root -p</pre><br><br><p>然后，输入root的密码</p>\n\n<p></p><p>1、增加新用户</p><p></p>\n<p></p><p>格式如下：</p><p></p>\n<pre>grant 操作权限 on 数据库.* to 用户名@登陆主机地址 identified by <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">密码</span><span style=\"color: #800000;\">';</span></pre>\n\n<p></p><p>意思是：授予，某主机上的某用户（附带该用户的登陆密码）在某数据库上，执行某些操作的权限</p><p></p>\n<p></p><p>(1)比如：任意主机上(“%”)，用户（用户名：test1，密码：adc）在所有数据库上，执行任意操作的权限（很危险）</p><p></p>\n<pre>grant all privileges on *.* to test1<span style=\"color: #800000;\">@\"</span><span style=\"color: #800000;\">%</span><span style=\"color: #800000;\">\"</span> identified by <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">abc</span><span style=\"color: #800000;\">\"</span>;</pre>\n\n<p></p><p>其中all privileges表示查询，插入，修改，删除的权限：select,insert,update,delete</p><p></p>\n<p></p><p>以上命令等价于：</p><p></p>\n<pre>grant <span style=\"color: #0000ff;\">select</span>,insert,update,delete on *.* to test1<span style=\"color: #800000;\">@\"</span><span style=\"color: #800000;\">%</span><span style=\"color: #800000;\">\"</span> identified by <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">abc</span><span style=\"color: #800000;\">\"</span>;</pre>\n\n<p></p><p>然后刷新权限</p><p></p>\n<pre>flush privileges;</pre>\n\n<p></p><p>&nbsp;(2)比如：授权本地主机上的用户操作数据库的权限</p><p></p>\n<p></p><p><span style=\"color: #ff0000;\">创建数据库</span>(比如：openfire)</p><p></p>\n<pre>create database openfire;</pre>\n\n<p></p><p>授予本地主机用户（用户名：test2，密码：123）访问数据库(数据库名称：openfire)的操作权限</p><p></p>\n<pre>grant all privileges on openfire.* to test2@localhost identified by <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123</span><span style=\"color: #800000;\">\"</span>;</pre>\n\n<pre>flush privileges;</pre>\n\n<p></p><p>&nbsp;之后，就可以用新的用户，访问openfire数据库了</p><p></p>\n<p></p><p>2.更新指定帐户的密码（用户名：test1，新密码：1234）</p><p></p>\n<pre>update mysql.user set password=password(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1234</span><span style=\"color: #800000;\">'</span>) where User=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test1</span><span style=\"color: #800000;\">\"</span> and Host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>;</pre>\n\n<p></p><p>&nbsp;3.删除用户</p><p></p>\n<p></p><p>先使用mysql数据库</p><p></p>\n<pre>use mysql;</pre>\n\n<p></p><p>删除mysql数据库中user表中的某个本地用户（test7）</p><p></p>\n<pre>delete from user where User=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test7</span><span style=\"color: #800000;\">\"</span> and Host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>;</pre>\n\n<p></p><p>&nbsp;4.显示命令</p><p></p>\n<p></p><p>（1）显示所有数据库列表</p><p></p>\n<pre>show databases;</pre>\n\n<p></p><p>初始化只有两个数据库，mysql和test</p><p></p>\n<p></p><p><span>注意：MYSQL的系统信息都存储在mysql库中，比如：修改密码和新增用户，实际上就是用这个库进行操作</span></p><p></p>\n<p></p><p><span>（2）打开某个数据库(比如数据库：openfire)</span></p><p></p>\n<pre>use openfire;</pre>\n\n<p></p><p>（3）显示本库中的所有表</p><p></p>\n<pre>show tables;</pre>\n\n<p></p><p>（4）显示某表（table1）的结构</p><p></p>\n<pre>describe table1;</pre>\n\n<p></p><p>（5）建库</p><p></p>\n<pre>create database 库名;</pre>\n\n<p></p><p>（6）建表</p><p></p>\n<pre><span style=\"color: #000000;\">use 库名；\ncreate table 表名 (字段设定列表);</span></pre>\n\n<p></p><p>（7）删库</p><p></p>\n<pre>drop database 库名;</pre>\n\n<p></p><p>（8）删表</p><p></p>\n<pre>drop table 表名;</pre>\n\n<p></p><p>（9）将表中的记录清空</p><p></p>\n<pre>delete from 表名;</pre>\n\n<p></p><p>（10）显示表中的记录</p><p></p>\n<pre><span style=\"color: #0000ff;\">select</span> * from 表名;</pre>\n\n<p></p><p>六、退出mysql</p><p></p>\n<pre>exit</pre>\n\n<p></p><p>&nbsp;七、启动和停止MySQL<span style=\"font-size: 14px; line-height: 1.5;\">&nbsp;</span></p><p></p>\n<p></p><p>启动</p><p></p>\n<pre>/usr/local/mysql/share/mysql.server start</pre>\n\n<p></p><p>停止</p><p></p>\n<pre>/usr/local/mysql/bin/mysqladmin -u root -p shutdown</pre>\n\n<p></p><p>输入root密码</p><p></p>\n<p></p><p><strong>安装openfire</strong></p><p></p>\n<p></p><p>到<a href=\"http://www.igniterealtime.org/downloads/index.jsp\" target=\"_blank\" rel=\"external\">http://www.igniterealtime.org/downloads/index.jsp</a>下载对应的openfire安装包</p><p></p>\n<p></p><p>设置主机的访问ip地址</p><br><img src=\"/img/openfire1.png\" alt=\"\">  <p></p>\n<p></p><p>数据库url设置为:<strong>jdbc:mysql://localhost:3306/openfire?useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8</strong></p><p></p>\n<p></p><p><strong>导入openfire数据库表</strong></p><p></p>\n<p></p><p>先修改读取权限sudo chmod 777 /usr/local/openfire</p><p></p>\n<p></p><p>&lt;2&gt;在终端中，登陆MySQL</p><p></p>\n<pre>mysql -u root -p</pre>\n\n<p></p><p>然后输入数据库的root密码</p><p></p>\n<p></p><p>&lt;3&gt;创建数据库openfire</p><p></p>\n<pre>create database openfire;</pre>\n\n<p></p><p>&lt;4&gt;导入openfire资源文件夹<span>&nbsp;</span><tt>resources/database下的数据表</tt>在导入前修改/usr/local/openfire/resources/database/openfire_mysql.sql中创建ofRoster的语句，把</p>\n<pre>jid       VARCHAR(1024)   NOT NULL</pre>中的1024改为767<p></p>\n<pre>use openfire;</pre>\n<pre>source /usr/local/openfire/resources/database/openfire_mysql.sql</pre>\n\n<p></p><p>&nbsp;在终端出现一排导入过程</p><p></p>\n<p></p><p>&nbsp;&lt;5&gt;刷新权限</p><p></p>\n<pre>flush privileges;</pre>\n\n<p></p><p>&lt;6&gt;退出MySQL</p><p></p>\n<pre>exit</pre>\n\n<p></p><p>（4）用户名和密码</p><p></p>\n<p></p><p>这里的用户名密码，是访问MySQL数据库时使用的帐号：root，和安装MySQL设置的root密码</p><p></p>\n<p></p><p>5.特性设置</p><p></p>\n<p></p><p>如果不打算使用LDAP，则保持默认设置</p><br><img src=\"/img/openfire2.png\" alt=\"\">  <p></p>\n<p></p><p>&nbsp;6.设置openfire服务器管理员的帐号和密码</p><p></p>\n<p></p><p>可以随便填写一个管理员邮箱，输入要设置的密码</p><p></p>\n<p></p><p>完成注册</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p><span style=\"font-size: 14px; line-height: 1.5;\">7.登陆管理控制台</span></p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p>默认的管理员帐号是&ldquo;admin&rdquo;，默认管理员密码&ldquo;admin&rdquo;，如果上面设置了新密码，则管理员密码是新密码</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p>如果想去掉默认的admin帐号，并自定义，需要如下操作</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p>（1）在终端中，登陆具体的数据库（openfire）</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<pre>mysql -u root -p openfire</pre>\n\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p>然后输入数据库的root密码</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p>（2）删除表&ldquo;ofUser&rdquo;中的admin帐户</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<pre>delete from ofUser where username=<span>'</span><span>admin</span><span>'</span>;</pre>\n\n<p></p><p>&nbsp;</p><p></p>\n<p></p><p>（3）创建自定义管理员（用户名：user1，密码：123）</p><p></p>\n<p></p><p>&nbsp;</p><p></p>\n<pre>INSERT INTO ofUser (username, plainPassword, encryptedPassword, name, email, creationDate, modificationDate) VALUES (<span>'</span><span>user1</span><span>'</span>,<span>'</span><span>123',</span><span>'</span><span>123</span><span>'</span><span>,</span><span>'</span>Administrator<span>'</span><span>,</span><span>'</span>user1@sunyard.com<span>'</span><span>,</span><span>'</span><span>0</span><span>'</span><span>,</span><span>'</span><span>0</span><span>'</span><span>);</span></pre>\n\n<p></p><p>&nbsp; 注意：如果重设了用户名，必须重启openfire服务器</p><p></p>\n<p></p><p>三、卸载openfire</p><p></p>\n<p></p><p>1.停止服务</p><p></p>\n<p></p><p>在系统偏好设置的其他里，打开openfire偏好设置</p><p></p>\n<p></p><p>点击Stop Openfire按钮，停止服务</p><p></p>\n<p></p><p>2.删除文件</p><p></p>\n<p></p><p>打开终端，输入以下命令</p><p></p>\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">rm</span> -rf /Library/PreferencePanes/Openfire.prefPane</pre>\n\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">rm</span> -rf /usr/local/openfire</pre>\n\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">rm</span> -rf /Library/LaunchDaemons/org.jivesoftware.openfire.plist</pre>\n\n<p></p><p>其中第一条命令之后，需要输入本机管理员密码</p><div id=\"MySignature\"><p></p>\n</div>","source":"_posts/IOS/openfire.md","raw":"title: OpenFire\ndate: 2014-04-23 16:17:59\ntags: IOS\n---\n先到<a href='http://dev.mysql.com/downloads/mysql'>http://dev.mysql.com/downloads/mysql</a>下载对应的mysql版本。\n安装并启动mysql、\n<p>二、打开终端，定义mysql别名</p>\r\n<p>输入alias命令</p>\r\n<pre>alias mysql=/usr/local/mysql/bin/mysql</pre>\r\n<p>回车，再输入</p>\r\n<pre>alias mysqladmin=/usr/local/mysql/bin/mysqladmin</pre>\r\n<p>三、设置mysql root帐号的密码</p>\r\n<pre>mysqladmin -u root password 初始密码</pre>\r\n\r\n<p>2.如果设置完密码后，需要修改，执行命令</p>\r\n<pre>mysqladmin -u root -p  password 最新密码</pre>\r\n\r\n<p>接着会提示输入密码，此时输入旧密码，回车</p>\r\n<p>&nbsp;四、连接数据库</p>\r\n<pre>mysql -u root -p</pre>\r\n\r\n<p>然后提示输入密码，输入三中设置的初始密码</p>\r\n<p>2.如果登陆远程主机上的mysql数据库</p>\r\n<pre>mysql -h 主机地址 -u 用户名 -p 用户密码</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p>五、执行常用的mysql数据库操作</p>\r\n<p>注意：以下操作都发现在，连接数据库之后，进入mysql环境，之后执行的命令都必须带有分号&ldquo;;&rdquo;</p>\r\n<p>首先，以root权限连接mysql</p>\r\n<pre>mysql -u root -p</pre>\r\n\r\n<p>然后，输入root的密码</p>\n \r\n<p>1、增加新用户</p>\r\n<p>格式如下：</p>\r\n<pre>grant 操作权限 on 数据库.* to 用户名@登陆主机地址 identified by <span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">密码</span><span style=\"color: #800000;\">';</span></pre>\r\n\r\n<p>意思是：授予，某主机上的某用户（附带该用户的登陆密码）在某数据库上，执行某些操作的权限</p>\r\n<p>(1)比如：任意主机上(\"%\")，用户（用户名：test1，密码：adc）在所有数据库上，执行任意操作的权限（很危险）</p>\r\n<pre>grant all privileges on *.* to test1<span style=\"color: #800000;\">@\"</span><span style=\"color: #800000;\">%</span><span style=\"color: #800000;\">\"</span> identified by <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">abc</span><span style=\"color: #800000;\">\"</span>;</pre>\r\n\r\n<p>其中all privileges表示查询，插入，修改，删除的权限：select,insert,update,delete</p>\r\n<p>以上命令等价于：</p>\r\n<pre>grant <span style=\"color: #0000ff;\">select</span>,insert,update,delete on *.* to test1<span style=\"color: #800000;\">@\"</span><span style=\"color: #800000;\">%</span><span style=\"color: #800000;\">\"</span> identified by <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">abc</span><span style=\"color: #800000;\">\"</span>;</pre>\r\n\r\n<p>然后刷新权限</p>\r\n<pre>flush privileges;</pre>\r\n\r\n<p>&nbsp;(2)比如：授权本地主机上的用户操作数据库的权限</p>\r\n<p><span style=\"color: #ff0000;\">创建数据库</span>(比如：openfire)</p>\r\n<pre>create database openfire;</pre>\r\n\r\n<p>授予本地主机用户（用户名：test2，密码：123）访问数据库(数据库名称：openfire)的操作权限</p>\r\n<pre>grant all privileges on openfire.* to test2@localhost identified by <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">123</span><span style=\"color: #800000;\">\"</span>;</pre>\r\n\r\n<pre>flush privileges;</pre>\r\n\r\n<p>&nbsp;之后，就可以用新的用户，访问openfire数据库了</p>\r\n<p>2.更新指定帐户的密码（用户名：test1，新密码：1234）</p>\r\n<pre>update mysql.user set password=password(<span style=\"color: #800000;\">'</span><span style=\"color: #800000;\">1234</span><span style=\"color: #800000;\">'</span>) where User=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test1</span><span style=\"color: #800000;\">\"</span> and Host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>;</pre>\r\n\r\n<p>&nbsp;3.删除用户</p>\r\n<p>先使用mysql数据库</p>\r\n<pre>use mysql;</pre>\r\n\r\n<p>删除mysql数据库中user表中的某个本地用户（test7）</p>\r\n<pre>delete from user where User=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">test7</span><span style=\"color: #800000;\">\"</span> and Host=<span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">localhost</span><span style=\"color: #800000;\">\"</span>;</pre>\r\n\r\n<p>&nbsp;4.显示命令</p>\r\n<p>（1）显示所有数据库列表</p>\r\n<pre>show databases;</pre>\r\n\r\n<p>初始化只有两个数据库，mysql和test</p>\r\n<p><span>注意：MYSQL的系统信息都存储在mysql库中，比如：修改密码和新增用户，实际上就是用这个库进行操作</span></p>\r\n<p><span>（2）打开某个数据库(比如数据库：openfire)</span></p>\r\n<pre>use openfire;</pre>\r\n\r\n<p>（3）显示本库中的所有表</p>\r\n<pre>show tables;</pre>\r\n\r\n<p>（4）显示某表（table1）的结构</p>\r\n<pre>describe table1;</pre>\r\n\r\n<p>（5）建库</p>\r\n<pre>create database 库名;</pre>\r\n\r\n<p>（6）建表</p>\r\n<pre><span style=\"color: #000000;\">use 库名；\r\ncreate table 表名 (字段设定列表);</span></pre>\r\n\r\n<p>（7）删库</p>\r\n<pre>drop database 库名;</pre>\r\n\r\n<p>（8）删表</p>\r\n<pre>drop table 表名;</pre>\r\n\r\n<p>（9）将表中的记录清空</p>\r\n<pre>delete from 表名;</pre>\r\n\r\n<p>（10）显示表中的记录</p>\r\n<pre><span style=\"color: #0000ff;\">select</span> * from 表名;</pre>\r\n\r\n<p>六、退出mysql</p>\r\n<pre>exit</pre>\r\n\r\n<p>&nbsp;七、启动和停止MySQL<span style=\"font-size: 14px; line-height: 1.5;\">&nbsp;</span></p>\r\n<p>启动</p>\r\n<pre>/usr/local/mysql/share/mysql.server start</pre>\r\n\r\n<p>停止</p>\r\n<pre>/usr/local/mysql/bin/mysqladmin -u root -p shutdown</pre>\r\n\r\n<p>输入root密码</p>\n<p><strong>安装openfire</strong></p>\n<p>到<a href='http://www.igniterealtime.org/downloads/index.jsp'>http://www.igniterealtime.org/downloads/index.jsp</a>下载对应的openfire安装包</p>\n<p>设置主机的访问ip地址</p>\n![](/img/openfire1.png)  \n<p>数据库url设置为:<strong>jdbc:mysql://localhost:3306/openfire?useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8</strong></p>\n<p><strong>导入openfire数据库表</strong></p>\n<p>先修改读取权限sudo chmod 777 /usr/local/openfire</p>\n<p>&lt;2&gt;在终端中，登陆MySQL</p>\r\n<pre>mysql -u root -p</pre>\r\n\r\n<p>然后输入数据库的root密码</p>\r\n<p>&lt;3&gt;创建数据库openfire</p>\r\n<pre>create database openfire;</pre>\r\n\r\n<p>&lt;4&gt;导入openfire资源文件夹<span>&nbsp;</span><tt>resources/database下的数据表</tt>在导入前修改/usr/local/openfire/resources/database/openfire_mysql.sql中创建ofRoster的语句，把\n<pre>jid       VARCHAR(1024)   NOT NULL</pre>中的1024改为767</p>\r\n<pre>use openfire;</pre>\r\n<pre>source /usr/local/openfire/resources/database/openfire_mysql.sql</pre>\r\n\r\n<p>&nbsp;在终端出现一排导入过程</p>\r\n<p>&nbsp;&lt;5&gt;刷新权限</p>\r\n<pre>flush privileges;</pre>\r\n\r\n<p>&lt;6&gt;退出MySQL</p>\r\n<pre>exit</pre>\r\n\r\n<p>（4）用户名和密码</p>\r\n<p>这里的用户名密码，是访问MySQL数据库时使用的帐号：root，和安装MySQL设置的root密码</p>\r\n<p>5.特性设置</p>\r\n<p>如果不打算使用LDAP，则保持默认设置</p>\r\n![](/img/openfire2.png)  \r\n<p>&nbsp;6.设置openfire服务器管理员的帐号和密码</p>\r\n<p>可以随便填写一个管理员邮箱，输入要设置的密码</p>\r\n<p>完成注册</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size: 14px; line-height: 1.5;\">7.登陆管理控制台</span></p>\r\n<p>&nbsp;</p>\r\n<p>默认的管理员帐号是&ldquo;admin&rdquo;，默认管理员密码&ldquo;admin&rdquo;，如果上面设置了新密码，则管理员密码是新密码</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>如果想去掉默认的admin帐号，并自定义，需要如下操作</p>\r\n<p>&nbsp;</p>\r\n<p>（1）在终端中，登陆具体的数据库（openfire）</p>\r\n<p>&nbsp;</p>\r\n<pre>mysql -u root -p openfire</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p>然后输入数据库的root密码</p>\r\n<p>&nbsp;</p>\r\n<p>（2）删除表&ldquo;ofUser&rdquo;中的admin帐户</p>\r\n<p>&nbsp;</p>\r\n<pre>delete from ofUser where username=<span>'</span><span>admin</span><span>'</span>;</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p>（3）创建自定义管理员（用户名：user1，密码：123）</p>\r\n<p>&nbsp;</p>\r\n<pre>INSERT INTO ofUser (username, plainPassword, encryptedPassword, name, email, creationDate, modificationDate) VALUES (<span>'</span><span>user1</span><span>'</span>,<span>'</span><span>123',</span><span>'</span><span>123</span><span>'</span><span>,</span><span>'</span>Administrator<span>'</span><span>,</span><span>'</span>user1@sunyard.com<span>'</span><span>,</span><span>'</span><span>0</span><span>'</span><span>,</span><span>'</span><span>0</span><span>'</span><span>);</span></pre>\r\n\r\n<p>&nbsp; 注意：如果重设了用户名，必须重启openfire服务器</p>\r\n<p>三、卸载openfire</p>\r\n<p>1.停止服务</p>\r\n<p>在系统偏好设置的其他里，打开openfire偏好设置</p>\r\n<p>点击Stop Openfire按钮，停止服务</p>\r\n<p>2.删除文件</p>\r\n<p>打开终端，输入以下命令</p>\r\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">rm</span> -rf /Library/PreferencePanes/Openfire.prefPane</pre>\r\n\r\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">rm</span> -rf /usr/local/openfire</pre>\r\n\r\n<pre><span style=\"color: #0000ff;\">sudo</span> <span style=\"color: #0000ff;\">rm</span> -rf /Library/LaunchDaemons/org.jivesoftware.openfire.plist</pre>\r\n\r\n<p>其中第一条命令之后，需要输入本机管理员密码</p><div id=\"MySignature\">\r\r","slug":"IOS/openfire","updated":1416373854000,"excerpt":"","_id":"9v4xe2c5cx7cgcfy","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"runtime","date":1397111575000,"tags":["i6a8xp2otmmlojjw"],"content":"<p></p><p><br>关联对象<br></p><p></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *alertKey = <span class=\"string\">\"alertKey\"</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">void</span> (^Block)(<span class=\"keyword\">int</span>);</div><div class=\"line\"></div><div class=\"line\">UIAlertView *alert = [[UIAlertView alloc] initWithTitle:<span class=\"string\">@\"\"</span> message:<span class=\"string\">@\"test\"</span> delegate:<span class=\"keyword\">self</span> cancelButtonTitle:<span class=\"string\">@\"取消\"</span> otherButtonTitles:<span class=\"string\">@\"确定\"</span>, <span class=\"literal\">nil</span>];</div><div class=\"line\">  </div><div class=\"line\">    </div><div class=\"line\">      Block block  = ^(<span class=\"built_in\">NSInteger</span> index ){</div><div class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>)</div><div class=\"line\">        {</div><div class=\"line\">          <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1\"</span>);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2\"</span>);</div><div class=\"line\">        }</div><div class=\"line\">    };</div><div class=\"line\"></div><div class=\"line\">    objc_setAssociatedObject(alert, alertKey, block, OBJC_ASSOCIATION_COPY);</div><div class=\"line\">    [alert show];</div><div class=\"line\">    </div><div class=\"line\">    </div></pre></td></tr></table></figure>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(<span class=\"built_in\">NSInteger</span>)buttonIndex</div><div class=\"line\">{</div><div class=\"line\">     Block block = objc_getAssociatedObject(alertView, alertKey);</div><div class=\"line\">    block(buttonIndex);</div><div class=\"line\">}</div></pre></td></tr></table></figure>","source":"_posts/IOS/runtime.md","raw":"title: runtime\ndate: 2014-04-10 14:32:55\ntags: IOS\n---\n<p>\n关联对象\n</p>\n{% codeblock lang:objc %}\nstatic void *alertKey = \"alertKey\";\ntypedef void (^Block)(int);\n\nUIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"\" message:@\"test\" delegate:self cancelButtonTitle:@\"取消\" otherButtonTitles:@\"确定\", nil];\n  \n    \n      Block block  = ^(NSInteger index ){\n        if (index == 0)\n        {\n          NSLog(@\"1\");\n        }\n        else\n        {\n            NSLog(@\"2\");\n        }\n    };\n\n    objc_setAssociatedObject(alert, alertKey, block, OBJC_ASSOCIATION_COPY);\n    [alert show];\n    \n    \n{% endcodeblock %}\n\n{% codeblock lang:objc %}\n- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n     Block block = objc_getAssociatedObject(alertView, alertKey);\n    block(buttonIndex);\n}\n{% endcodeblock %}","slug":"IOS/runtime","updated":1416373854000,"excerpt":"","_id":"gmkm0w9ygcfbtlwt","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Thread Safety","date":1397790655000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>from: <a href=\"http://www.objc.io/issue-2/thread-safe-class-design.html\" target=\"_blank\" rel=\"external\">http://www.objc.io/issue-2/thread-safe-class-design.html</a><br></p><p><br> </p><p>This article will focus on <em>practical</em> tips, design patterns, and anti-patterns with regard to writing thread-safe classes and using Grand Central Dispatch (GCD).</p>\n\n<h2 id=\"thread_safety\">Thread Safety</h2>\n\n<h3 id=\"apples_frameworks\">Apple&#8217;s Frameworks</h3>\n\n<p>First, let&#8217;s have a look at Apple&#8217;s frameworks. In general, unless declared otherwise, most classes are not thread-safe by default. For some this is expected; for others it&#8217;s quite interesting.</p>\n\n<p>One of the most common mistakes even experienced iOS/Mac developers make is accessing parts of UIKit/AppKit on background threads. It&#8217;s very easy to make the mistake of setting properties like <code>image</code> from a background thread, because their content is being requested from the network in the background anyway. Apple&#8217;s code is performance-optimized and will not warn you if you change properties from different threads.</p>\n\n<p>In the case of an image, a common symptom is that your change is picked up with a delay. But if two threads set the image at the same time, it&#8217;s likely that your app will simply crash, because the currently set image could be released twice. Since this is timing dependent, it usually will crash when used by your customers and not during development.</p>\n\n<p>There are no <em>official</em> tools to find such errors, but there are some tricks that will do the job just fine. The <a href=\"https://gist.github.com/steipete/5664345\" target=\"_blank\" rel=\"external\">UIKit Main Thread Guard</a> is a small source file that will patch any calls to UIView&#8217;s <code>setNeedsLayout</code> and <code>setNeedsDisplay</code> and check for being executed on the main thread before forwarding the call. Since these two methods are called for a lot of UIKit setters (including image), this will catch many thread-related mistakes. Although this trick does not use private API, we don&#8217;t recommend using this in production apps &#8211; it&#8217;s great during development though.</p>\n\n<p>It&#8217;s a conscious design decision from Apple&#8217;s side to not have UIKit be thread-safe. Making it thread-safe wouldn&#8217;t buy you much in terms of performance; it would in fact make many things slower. And the fact that UIKit is tied to the main thread makes it very easy to write concurrent programs and use UIKit. All you have to do is make sure that calls into UIKit are always made on the main thread.</p>\n\n<h4 id=\"why_isnt_uikit_thread_safe\">Why Isn&#8217;t UIKit Thread Safe?</h4>\n\n<p>Ensuring thread safety for a big framework like UIKit would be a major undertaking and would come at a great cost. Changing non-atomic to atomic properties would only be a tiny part of the changes required. Usually you want to change several properties at once, and only then see the changed result. For this, Apple would have to expose a method much like CoreData&#8217;s <code>performBlock:</code> and <code>performBlockAndWait:</code> to synchronize changes. And if you consider that most calls to UIKit classes are about <em>configuration</em>, it&#8217;s even more pointless to make them thread-safe.</p>\n\n<p>However, even calls that are not about configuration shared internal state and thus weren&#8217;t thread-safe. If you already wrote apps back in the dark ages of iOS3.2 and before, you surely experienced random crashes when using NSString&#8217;s <code>drawInRect:withFont:</code> while preparing background images. Thankfully, with iOS4, <a href=\"http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html\" target=\"_blank\" rel=\"external\">Apple made most drawing methods and classes like <code>UIColor</code> and <code>UIFont</code> usable on background threads</a>.</p>\n\n<p>Unfortunately, Apple&#8217;s documentation is lacking on the subject of thread safety. They recommend access on the main thread only, and even for drawing methods they don&#8217;t explicitly guarantee thread safety - so it&#8217;s always a good idea to read the <a href=\"http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html\" target=\"_blank\" rel=\"external\">iOS Release Notes</a> as well.</p>\n\n<p>For the most part, UIKit classes should be used only from the application’s main thread. This is particularly true either for classes derived from UIResponder or those that involve manipulating your application’s user interface in any way.</p>\n\n<h4 id=\"the_deallocation_problem\">The Deallocation Problem</h4>\n\n<p>Another danger when using UIKit objects in the background is called &#8220;The Deallocation Problem.&#8221; Apple outlines the issue in <a href=\"http://developer.apple.com/library/ios/#technotes/tn2109/_index.html\" target=\"_blank\" rel=\"external\">TN2109</a> and presents various solutions. The problem is that UI objects should be deallocated on the main thread, because some of them might perform changes to the view hierarchy in <code>dealloc</code>. As we know, such calls to UIKit need to happen on the main thread.</p>\n\n<p>Since it&#8217;s common that a secondary thread, operation, or block retains the caller, this is very easy to get wrong and quite hard to find/fix. This was also <a href=\"https://github.com/AFNetworking/AFNetworking/issues/56\" target=\"_blank\" rel=\"external\">a long-standing bug in AFNetworking</a>, simply because not a lot of people know about this issue and &#8211; as usual &#8211; it manifests itself in rare, hard-to-reproduce crashes. Consistent use of __weak and not accessing ivars in async blocks/operations helps.</p>\n\n<h4 id=\"collection_classes\">Collection Classes</h4>\n\n<p>Apple has a good overview document for both <a href=\"https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1\" target=\"_blank\" rel=\"external\">iOS and Mac</a> listing thread safety for the most common foundation classes. In general, immutable classes like <code>NSArray</code> are thread-safe, while their mutable variants like <code>NSMutableArray</code> are not. In fact, it&#8217;s fine to use them from different threads, as long as access is serialized within a queue. Remember that methods might return a mutable variant of a collection object even if they declare their return type as immutable. It&#8217;s good practice to write something like <code>return [array copy]</code> to ensure the returned object is in fact immutable.</p>\n\n<p>Unlike in languages like <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html\" target=\"_blank\" rel=\"external\">Java</a>, the Foundation framework doesn&#8217;t offer thread-safe collection classes out of the box. This is actually very reasonable, because in most cases you want to apply your locks higher up anyway to avoid too many locking operations. A notable exception are caches, where a mutable dictionary might hold immutable data &#8211; here Apple added <code>NSCache</code> in iOS4 that not only locks access, but also purges its content in low-memory situations.</p>\n\n<p>That said, there might be valid cases in your application where a thread-safe, mutable dictionary can be handy. And thanks to the class cluster approach, <a href=\"https://gist.github.com/steipete/5928916\" target=\"_blank\" rel=\"external\">it&#8217;s easy to write one</a>.</p>\n\n<h3 id=\"atomic_properties\">Atomic Properties</h3>\n\n<p>Ever wondered how Apple is handling atomic setting/getting of properties? By now you have likely heard about spinlocks, semaphores, locks, @synchronized - so what&#8217;s Apple using? Thankfully, <a href=\"http://www.opensource.apple.com/source/objc4/\" target=\"_blank\" rel=\"external\">the Objective-C runtime is public</a>, so we can take a look behind the curtain.</p>\n\n<p>A nonatomic property setter might look like this:</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> - (<span class=\"keyword\">void</span>)setUserName:(<span class=\"built_in\">NSString</span> *)userName {</div><div class=\"line\">      <span class=\"keyword\">if</span> (userName != _userName) {</div><div class=\"line\">          [userName retain];</div><div class=\"line\">          [_userName release];</div><div class=\"line\">          _userName = userName;</div><div class=\"line\">      }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>This is the variant with manual retain/release; however, the ARC-generated code looks similar. When we look at this code it&#8217;s obvious why this means trouble when <code>setUserName:</code> is called concurrently. We could end up releasing <code>_userName</code> twice, which can corrupt memory and lead to hard-to-find bugs.</p>\n\n<p>What&#8217;s happening internally for any property that&#8217;s not manually implemented is that the compiler generates a call to <a href=\"https://github.com/opensource-apple/objc4/blob/master/runtime/Accessors.subproj/objc-accessors.mm#L127\" target=\"_blank\" rel=\"external\"><code>objc_setProperty_non_gc(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy)</code></a>. In our example, the call parameters would look like this:</p>\n\n<pre><code>objc_setProperty_non_gc(self, _cmd, \n  (ptrdiff_t)(&amp;_userName) - (ptrdiff_t)(self), userName, NO, NO);`</code></pre>\n\n<p>The ptrdiff_t might look weird to you, but in the end it&#8217;s simple pointer arithmetic, since an Objective-C class is just another C struct.</p>\n\n<p><code>objc_setProperty</code> calls down to following method:</p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> reallySetProperty(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"keyword\">id</span> newValue, </div><div class=\"line\">  ptrdiff_t offset, <span class=\"keyword\">bool</span> atomic, <span class=\"keyword\">bool</span> <span class=\"keyword\">copy</span>, <span class=\"keyword\">bool</span> mutableCopy) </div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">id</span> oldValue;</div><div class=\"line\">    <span class=\"keyword\">id</span> *slot = (<span class=\"keyword\">id</span>*) ((<span class=\"keyword\">char</span>*)<span class=\"keyword\">self</span> + offset);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">copy</span>) {</div><div class=\"line\">        newValue = [newValue copyWithZone:<span class=\"literal\">NULL</span>];</div><div class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mutableCopy) {</div><div class=\"line\">        newValue = [newValue mutableCopyWithZone:<span class=\"literal\">NULL</span>];</div><div class=\"line\">    } <span class=\"keyword\">else</span> {</div><div class=\"line\">        <span class=\"keyword\">if</span> (*slot == newValue) <span class=\"keyword\">return</span>;</div><div class=\"line\">        newValue = objc_retain(newValue);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!atomic) {</div><div class=\"line\">        oldValue = *slot;</div><div class=\"line\">        *slot = newValue;</div><div class=\"line\">    } <span class=\"keyword\">else</span> {</div><div class=\"line\">        spin_lock_t *slotlock = &amp;amp;PropertyLocks[GOODHASH(slot)];</div><div class=\"line\">        _spin_lock(slotlock);</div><div class=\"line\">        oldValue = *slot;</div><div class=\"line\">        *slot = newValue;        </div><div class=\"line\">        _spin_unlock(slotlock);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    objc_release(oldValue);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>Aside from the rather funny name, this method is actually fairly straightforward and uses one of the 128 available spinlocks in <code>PropertyLocks</code>. This is a pragmatic and fast approach &#8211; the worst case scenario is that a setter might have to wait for an unrelated setter to finish because of a hash collision.</p>\n\n<p>While those methods aren&#8217;t declared in any public header, it is possible to call them manually. I&#8217;m not saying this is a good idea, but it&#8217;s interesting to know and could be quite useful if you want atomic properties <em>and</em> to implement the setter at the same time.</p>\n\n<pre><code>// Manually declare runtime methods.\nextern void objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, \n  id newValue, BOOL atomic, BOOL shouldCopy);\nextern id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, \n  BOOL atomic);\n\n#define PSTAtomicRetainedSet(dest, src) objc_setProperty(self, _cmd, \n  (ptrdiff_t)(&amp;dest) - (ptrdiff_t)(self), src, YES, NO) \n#define PSTAtomicAutoreleasedGet(src) objc_getProperty(self, _cmd, \n  (ptrdiff_t)(&amp;src) - (ptrdiff_t)(self), YES)</code></pre>\n\n<p><a href=\"https://gist.github.com/steipete/5928690\" target=\"_blank\" rel=\"external\">Refer to this gist</a> for the full snippet including code to handle structs. But keep in mind that we don&#8217;t recommend using this.</p>\n\n<h4 id=\"what_about_synchronized\">What about @synchronized?</h4>\n\n<p>You might be curious why Apple isn&#8217;t using <code>@synchronized(self)</code> for property locking, an already existing runtime feature. Once you <a href=\"https://github.com/opensource-apple/objc4/blob/master/runtime/objc-sync.mm#L291\" target=\"_blank\" rel=\"external\">look at the source</a>, you&#8217;ll see that there&#8217;s a lot more going on. Apple is using <a href=\"http://googlemac.blogspot.co.at/2006/10/synchronized-swimming.html\" target=\"_blank\" rel=\"external\">up to three lock/unlock sequences</a>, partly because they also add <a href=\"https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW3\" target=\"_blank\" rel=\"external\">exception unwinding</a>. This would be a slowdown compared to the much faster spinlock approach. Since setting the property usually is quite fast, spinlocks are perfect for the job. <code>@synchonized(self)</code> is good when you need to ensure that exception can be thrown without the code deadlocking.</p>\n\n<h3 id=\"your_own_classes\">Your Own Classes</h3>\n\n<p>Using atomic properties alone won&#8217;t make your classes thread-safe. It will only protect you against <a href=\"/issue-2/concurrency-apis-and-pitfalls.html#shared_resources\">race conditions</a> in the setter, but won&#8217;t protect your application logic. Consider the following snippet:</p>\n\n<pre><code>if (self.contents) {\n    CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, \n      (__bridge CFStringRef)self.contents, NULL);\n    // draw string\n}</code></pre>\n\n<p>I&#8217;ve made this mistake early on in <a href=\"http://pspdfkit.com\" target=\"_blank\" rel=\"external\">PSPDFKit</a>. From time to time, the application crashed with a EXC_BAD_ACCESS, when the <code>contents</code> property was set to nil after the check. A simple fix for this issue would be to capture the variable:</p>\n\n<pre><code>NSString *contents = self.contents;\nif (contents) {\n    CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, \n      (__bridge CFStringRef)contents, NULL);\n    // draw string\n}</code></pre>\n\n<p>This would solve the issue here, but in most cases it&#8217;s not that simple. Imagine that we also have a <code>textColor</code> property and we change both properties on one thread. Then our render thread could end up using the new content along with the old color value and we get a weird combination. This is one reason why Core Data binds model objects to one thread or queue.</p>\n\n<p>There&#8217;s no one-size-fits-all solution for this problem. Using <a href=\"http://www.cocoawithlove.com/2008/04/value-of-immutable-values.html\" target=\"_blank\" rel=\"external\">immutable models</a> is a solution, but it has its own problems. Another way is to limit changes to existing objects to the main thread or a specific queue and to generate copies before using them on worker threads. I recommend Jonathan Sterling&#8217;s article about <a href=\"http://www.jonmsterling.com/posts/2012-12-27-a-pattern-for-immutability.html\" target=\"_blank\" rel=\"external\">Lightweight Immutability in Objective-C</a> for even more ideas on solving this problem.</p>\n\n<p>The simple solution is to use @synchronize. Anything else is very, very likely to get you into trouble. Way smarter people have failed again and again at doing so.</p>\n\n<h4 id=\"practical_threadsafe_design\">Practical Thread-Safe Design</h4>\n\n<p>Before trying to make something thread-safe, think hard if it&#8217;s necessary. Make sure it&#8217;s not premature optimization. If it&#8217;s anything like a configuration class, there&#8217;s no point in thinking about thread safety. A much better approach is to throw some asserts in to ensure it&#8217;s used correctly:</p>\n\n<pre><code>void PSPDFAssertIfNotMainThread(void) {\n    NSAssert(NSThread.isMainThread, \n      @&quot;Error: Method needs to be called on the main thread. %@&quot;, \n      [NSThread callStackSymbols]);\n}</code></pre>\n\n<p>Now there&#8217;s code that definitely should be thread-safe; a good example is a caching class. A good approach is to use a concurrent dispatch_queue as read/write lock to maximize performance and try to only lock the areas that are really necessary. Once you start using multiple queues for locking different parts, things get tricky really fast.</p>\n\n<p>Sometimes you can also rewrite your code so that special locks are not required. Consider this snippet that is a form of a multicast delegate. (In many cases, using NSNotifications would be better, but there are <a href=\"https://code.google.com/r/riky-adsfasfasf/source/browse/Utilities/GCDMulticastDelegate.h\" target=\"_blank\" rel=\"external\">valid use cases for multicast delegates.</a>)</p>\n\n<pre><code>// header\n@property (nonatomic, strong) NSMutableSet *delegates;\n\n// in init\n_delegateQueue = dispatch_queue_create(&quot;com.PSPDFKit.cacheDelegateQueue&quot;, \n  DISPATCH_QUEUE_CONCURRENT);\n\n- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate {\n    dispatch_barrier_async(_delegateQueue, ^{\n        [self.delegates addObject:delegate];\n    });\n}\n\n- (void)removeAllDelegates {\n    dispatch_barrier_async(_delegateQueue, ^{\n        self.delegates removeAllObjects];\n    });\n}\n\n- (void)callDelegateForX {\n    dispatch_sync(_delegateQueue, ^{\n        [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) {\n            // Call delegate\n        }];\n    });\n}</code></pre>\n\n<p>Unless <code>addDelegate:</code> or <code>removeDelegate:</code> is called thousand times per second, a simpler and cleaner approach is the following:</p>\n\n<pre><code>// header\n@property (atomic, copy) NSSet *delegates;\n\n- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate {\n    @synchronized(self) {\n        self.delegates = [self.delegates setByAddingObject:delegate];\n    }\n}\n\n- (void)removeAllDelegates {\n    self.delegates = nil;\n}\n\n- (void)callDelegateForX {\n    [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) {\n        // Call delegate\n    }];\n}</code></pre>\n\n<p>Granted, this example is a bit constructed and one could simply confine changes to the main thread. But for many data structures, it might be worth it to create immutable copies in the modifier methods, so that the general application logic doesn&#8217;t have to deal with excessive locking. Notice how we still have to apply locking in <code>addDelegate:</code>, since otherwise delegate objects might get lost if called from different threads concurrently.</p>\n\n<h2 id=\"pitfalls_of_gcd\">Pitfalls of GCD</h2>\n\n<p>For most of your locking needs, GCD is perfect. It&#8217;s simple, it&#8217;s fast, and its block-based API makes it much harder to accidentally do imbalanced locks. However, there are quite a few pitfalls, some of which we are going to explore here.</p>\n\n<h3 id=\"using_gcd_as_a_recursive_lock\">Using GCD as a Recursive Lock</h3>\n\n<p>GCD is a queue to serialize access to shared resources. This can be used for locking, but it&#8217;s quite different than <code>@synchronized</code>. GCD queues are not reentrant - this would break the queue characteristics. Many people tried working around this with using <code>dispatch_get_current_queue()</code>, which is <a href=\"https://gist.github.com/steipete/3713233\" target=\"_blank\" rel=\"external\">a bad idea</a>, and Apple had its reasons for deprecating this method in iOS6.</p>\n\n<pre><code>// This is a bad idea.\ninline void pst_dispatch_sync_reentrant(dispatch_queue_t queue, \n  dispatch_block_t block) \n{\n    dispatch_get_current_queue() == queue ? block() \n                                          : dispatch_sync(queue, block);\n}</code></pre>\n\n<p>Testing for the current queue might work for simple solutions, but it fails as soon as your code gets more complex, and you might have multiple queues locked at the same time. Once you are there, you almost certainly will get a <a href=\"/issue-2/concurrency-apis-and-pitfalls.html#dead_locks\">deadlock</a>. Sure, one could use <code>dispatch_get_specific()</code>, which will traverse the whole queue hierarchy to test for specific queues. For that you would have to write custom queue constructors that apply this metadata. Don&#8217;t go that way. There are use cases where a <code>NSRecursiveLock</code> is the better solution.</p>\n\n<h3 id=\"fixing_timing_issues_with_dispatch_async\">Fixing Timing Issues with dispatch_async</h3>\n\n<p>Having some timing-issues in UIKit? Most of the time, this will be the perfect &#8220;fix:&#8221;</p>\n\n<pre><code>dispatch_async(dispatch_get_main_queue(), ^{\n    // Some UIKit call that had timing issues but works fine \n    // in the next runloop.\n    [self updatePopoverSize];\n});</code></pre>\n\n<p>Don&#8217;t do this, trust me. This will haunt you later as your app gets larger. It&#8217;s super hard to debug and soon things will fall apart when you need to dispatch more and more because of &#8220;timing issues.&#8221; Look through your code and find the proper place for the call (e.g. viewWillAppear instead of viewDidLoad). I still have some of those hacks in my codebase, but most of them are properly documented and an issue is filed.</p>\n\n<p>Remember that this isn&#8217;t really GCD-specific, but it&#8217;s a common anti-pattern and just very easy to do with GCD. You can apply the same wisdom for <code>performSelector:afterDelay:</code>, where the delay is 0.f for the next runloop.</p>\n\n<h3 id=\"mixing_dispatch_sync_and_dispatch_async_in_performance_critical_code\">Mixing dispatch_sync and dispatch_async in Performance Critical Code</h3>\n\n<p>That one took me a while to figure out. In <a href=\"http://pspdfkit.com\" target=\"_blank\" rel=\"external\">PSPDFKit</a> there is a caching class that uses a LRU list to track image access. When you scroll through the pages, this is called <em>a lot</em>. The initial implementation used dispatch_sync for availability access, and dispatch_async to update the LRU position. This resulted in a frame rate far from the goal of 60 FPS.</p>\n\n<p>When other code running in your app is blocking GCD&#8217;s threads, it might take a while until the dispatch manager finds a thread to perform the dispatch_async code &#8211; until then, your sync call will be blocked. Even when, as in this example, the order of execution for the async case isn&#8217;t important, there&#8217;s no easy way to tell that to GCD. Read/Write locks won&#8217;t help you there, since the async process most definitely needs to perform a barrier write and all your readers will be locked during that. Lesson: <code>dispatch_async</code> can be expensive if it&#8217;s misused. Be careful when using it for locking.</p>\n\n<h3 id=\"using_dispatch_async_to_dispatch_memoryintensive_operations\">Using dispatch_async to Dispatch Memory-Intensive Operations</h3>\n\n<p>We already talked a lot about NSOperations, and that it&#8217;s usually a good idea to use the more high-level API. This is especially true if you deal with blocks of work that do memory-intensive operations.</p>\n\n<p>In an old version of PSPDFKit, I used a GCD queue to dispatch writing cached JPG images to disk. When the retina iPad came out, this started causing trouble. The resolution doubled, and it took much longer to encode the image data than it took to render it. Consequently, operations piled up in the queue and when the system was busy it could crash of memory exhaustion.</p>\n\n<p>There&#8217;s no way to see how many operations are queued (unless you manually add code to track this), and there&#8217;s also no built-in way to cancel operations in case of a low-memory notification. Switching to NSOperations made the code a lot more debuggable and allowed all this without writing manual management code.</p>\n\n<p>Of course there are some caveats; for example you can&#8217;t set a target queue on your <code>NSOperationQueue</code> (like <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> for throttled I/O). But that&#8217;s a small price for debuggability, and it also prevents you from running into problem like <a href=\"/issue-2/concurrency-apis-and-pitfalls.html#priority_inversion\">priority inversion</a>. I even recommend against the nice <code>NSBlockOperation</code> API and suggest real subclasses of NSOperation, including an implementation of description. It&#8217;s more work, but later on, having a way to print all running/pending operations is insanely useful.</p>","source":"_posts/IOS/thread-safety.md","raw":"title: Thread Safety\ndate: 2014-04-18 11:10:55\ntags: IOS\n---\n<p>\nfrom: http://www.objc.io/issue-2/thread-safe-class-design.html\n<p>\n <p>This article will focus on <em>practical</em> tips, design patterns, and anti-patterns with regard to writing thread-safe classes and using Grand Central Dispatch (GCD).</p>\n\n<h2 id='thread_safety'>Thread Safety</h2>\n\n<h3 id='apples_frameworks'>Apple&#8217;s Frameworks</h3>\n\n<p>First, let&#8217;s have a look at Apple&#8217;s frameworks. In general, unless declared otherwise, most classes are not thread-safe by default. For some this is expected; for others it&#8217;s quite interesting.</p>\n\n<p>One of the most common mistakes even experienced iOS/Mac developers make is accessing parts of UIKit/AppKit on background threads. It&#8217;s very easy to make the mistake of setting properties like <code>image</code> from a background thread, because their content is being requested from the network in the background anyway. Apple&#8217;s code is performance-optimized and will not warn you if you change properties from different threads.</p>\n\n<p>In the case of an image, a common symptom is that your change is picked up with a delay. But if two threads set the image at the same time, it&#8217;s likely that your app will simply crash, because the currently set image could be released twice. Since this is timing dependent, it usually will crash when used by your customers and not during development.</p>\n\n<p>There are no <em>official</em> tools to find such errors, but there are some tricks that will do the job just fine. The <a href='https://gist.github.com/steipete/5664345'>UIKit Main Thread Guard</a> is a small source file that will patch any calls to UIView&#8217;s <code>setNeedsLayout</code> and <code>setNeedsDisplay</code> and check for being executed on the main thread before forwarding the call. Since these two methods are called for a lot of UIKit setters (including image), this will catch many thread-related mistakes. Although this trick does not use private API, we don&#8217;t recommend using this in production apps &#8211; it&#8217;s great during development though.</p>\n\n<p>It&#8217;s a conscious design decision from Apple&#8217;s side to not have UIKit be thread-safe. Making it thread-safe wouldn&#8217;t buy you much in terms of performance; it would in fact make many things slower. And the fact that UIKit is tied to the main thread makes it very easy to write concurrent programs and use UIKit. All you have to do is make sure that calls into UIKit are always made on the main thread.</p>\n\n<h4 id='why_isnt_uikit_thread_safe'>Why Isn&#8217;t UIKit Thread Safe?</h4>\n\n<p>Ensuring thread safety for a big framework like UIKit would be a major undertaking and would come at a great cost. Changing non-atomic to atomic properties would only be a tiny part of the changes required. Usually you want to change several properties at once, and only then see the changed result. For this, Apple would have to expose a method much like CoreData&#8217;s <code>performBlock:</code> and <code>performBlockAndWait:</code> to synchronize changes. And if you consider that most calls to UIKit classes are about <em>configuration</em>, it&#8217;s even more pointless to make them thread-safe.</p>\n\n<p>However, even calls that are not about configuration shared internal state and thus weren&#8217;t thread-safe. If you already wrote apps back in the dark ages of iOS3.2 and before, you surely experienced random crashes when using NSString&#8217;s <code>drawInRect:withFont:</code> while preparing background images. Thankfully, with iOS4, <a href='http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html'>Apple made most drawing methods and classes like <code>UIColor</code> and <code>UIFont</code> usable on background threads</a>.</p>\n\n<p>Unfortunately, Apple&#8217;s documentation is lacking on the subject of thread safety. They recommend access on the main thread only, and even for drawing methods they don&#8217;t explicitly guarantee thread safety - so it&#8217;s always a good idea to read the <a href='http://developer.apple.com/library/ios/#releasenotes/General/WhatsNewIniOS/Articles/iPhoneOS4.html'>iOS Release Notes</a> as well.</p>\n\n<p>For the most part, UIKit classes should be used only from the application’s main thread. This is particularly true either for classes derived from UIResponder or those that involve manipulating your application’s user interface in any way.</p>\n\n<h4 id='the_deallocation_problem'>The Deallocation Problem</h4>\n\n<p>Another danger when using UIKit objects in the background is called &#8220;The Deallocation Problem.&#8221; Apple outlines the issue in <a href='http://developer.apple.com/library/ios/#technotes/tn2109/_index.html'>TN2109</a> and presents various solutions. The problem is that UI objects should be deallocated on the main thread, because some of them might perform changes to the view hierarchy in <code>dealloc</code>. As we know, such calls to UIKit need to happen on the main thread.</p>\n\n<p>Since it&#8217;s common that a secondary thread, operation, or block retains the caller, this is very easy to get wrong and quite hard to find/fix. This was also <a href='https://github.com/AFNetworking/AFNetworking/issues/56'>a long-standing bug in AFNetworking</a>, simply because not a lot of people know about this issue and &#8211; as usual &#8211; it manifests itself in rare, hard-to-reproduce crashes. Consistent use of __weak and not accessing ivars in async blocks/operations helps.</p>\n\n<h4 id='collection_classes'>Collection Classes</h4>\n\n<p>Apple has a good overview document for both <a href='https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafetySummary/ThreadSafetySummary.html#//apple_ref/doc/uid/10000057i-CH12-SW1'>iOS and Mac</a> listing thread safety for the most common foundation classes. In general, immutable classes like <code>NSArray</code> are thread-safe, while their mutable variants like <code>NSMutableArray</code> are not. In fact, it&#8217;s fine to use them from different threads, as long as access is serialized within a queue. Remember that methods might return a mutable variant of a collection object even if they declare their return type as immutable. It&#8217;s good practice to write something like <code>return [array copy]</code> to ensure the returned object is in fact immutable.</p>\n\n<p>Unlike in languages like <a href='http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html'>Java</a>, the Foundation framework doesn&#8217;t offer thread-safe collection classes out of the box. This is actually very reasonable, because in most cases you want to apply your locks higher up anyway to avoid too many locking operations. A notable exception are caches, where a mutable dictionary might hold immutable data &#8211; here Apple added <code>NSCache</code> in iOS4 that not only locks access, but also purges its content in low-memory situations.</p>\n\n<p>That said, there might be valid cases in your application where a thread-safe, mutable dictionary can be handy. And thanks to the class cluster approach, <a href='https://gist.github.com/steipete/5928916'>it&#8217;s easy to write one</a>.</p>\n\n<h3 id='atomic_properties'>Atomic Properties</h3>\n\n<p>Ever wondered how Apple is handling atomic setting/getting of properties? By now you have likely heard about spinlocks, semaphores, locks, @synchronized - so what&#8217;s Apple using? Thankfully, <a href='http://www.opensource.apple.com/source/objc4/'>the Objective-C runtime is public</a>, so we can take a look behind the curtain.</p>\n\n<p>A nonatomic property setter might look like this:</p>\n\n{% codeblock lang:objc  %}\n - (void)setUserName:(NSString *)userName {\n      if (userName != _userName) {\n          [userName retain];\n          [_userName release];\n          _userName = userName;\n      }\n}\n{% endcodeblock %}\n\n<p>This is the variant with manual retain/release; however, the ARC-generated code looks similar. When we look at this code it&#8217;s obvious why this means trouble when <code>setUserName:</code> is called concurrently. We could end up releasing <code>_userName</code> twice, which can corrupt memory and lead to hard-to-find bugs.</p>\n\n<p>What&#8217;s happening internally for any property that&#8217;s not manually implemented is that the compiler generates a call to <a href='https://github.com/opensource-apple/objc4/blob/master/runtime/Accessors.subproj/objc-accessors.mm#L127'><code>objc_setProperty_non_gc(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy)</code></a>. In our example, the call parameters would look like this:</p>\n\n<pre><code>objc_setProperty_non_gc(self, _cmd, \n  (ptrdiff_t)(&amp;_userName) - (ptrdiff_t)(self), userName, NO, NO);`</code></pre>\n\n<p>The ptrdiff_t might look weird to you, but in the end it&#8217;s simple pointer arithmetic, since an Objective-C class is just another C struct.</p>\n\n<p><code>objc_setProperty</code> calls down to following method:</p>\n\n{% codeblock lang:objc  %} \nstatic inline void reallySetProperty(id self, SEL _cmd, id newValue, \n  ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy) \n{\n    id oldValue;\n    id *slot = (id*) ((char*)self + offset);\n\n    if (copy) {\n        newValue = [newValue copyWithZone:NULL];\n    } else if (mutableCopy) {\n        newValue = [newValue mutableCopyWithZone:NULL];\n    } else {\n        if (*slot == newValue) return;\n        newValue = objc_retain(newValue);\n    }\n\n    if (!atomic) {\n        oldValue = *slot;\n        *slot = newValue;\n    } else {\n        spin_lock_t *slotlock = &amp;PropertyLocks[GOODHASH(slot)];\n        _spin_lock(slotlock);\n        oldValue = *slot;\n        *slot = newValue;        \n        _spin_unlock(slotlock);\n    }\n\n    objc_release(oldValue);\n}\n{% endcodeblock %}\n\n<p>Aside from the rather funny name, this method is actually fairly straightforward and uses one of the 128 available spinlocks in <code>PropertyLocks</code>. This is a pragmatic and fast approach &#8211; the worst case scenario is that a setter might have to wait for an unrelated setter to finish because of a hash collision.</p>\n\n<p>While those methods aren&#8217;t declared in any public header, it is possible to call them manually. I&#8217;m not saying this is a good idea, but it&#8217;s interesting to know and could be quite useful if you want atomic properties <em>and</em> to implement the setter at the same time.</p>\n\n<pre><code>// Manually declare runtime methods.\nextern void objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, \n  id newValue, BOOL atomic, BOOL shouldCopy);\nextern id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, \n  BOOL atomic);\n\n#define PSTAtomicRetainedSet(dest, src) objc_setProperty(self, _cmd, \n  (ptrdiff_t)(&amp;dest) - (ptrdiff_t)(self), src, YES, NO) \n#define PSTAtomicAutoreleasedGet(src) objc_getProperty(self, _cmd, \n  (ptrdiff_t)(&amp;src) - (ptrdiff_t)(self), YES)</code></pre>\n\n<p><a href='https://gist.github.com/steipete/5928690'>Refer to this gist</a> for the full snippet including code to handle structs. But keep in mind that we don&#8217;t recommend using this.</p>\n\n<h4 id='what_about_synchronized'>What about @synchronized?</h4>\n\n<p>You might be curious why Apple isn&#8217;t using <code>@synchronized(self)</code> for property locking, an already existing runtime feature. Once you <a href='https://github.com/opensource-apple/objc4/blob/master/runtime/objc-sync.mm#L291'>look at the source</a>, you&#8217;ll see that there&#8217;s a lot more going on. Apple is using <a href='http://googlemac.blogspot.co.at/2006/10/synchronized-swimming.html'>up to three lock/unlock sequences</a>, partly because they also add <a href='https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW3'>exception unwinding</a>. This would be a slowdown compared to the much faster spinlock approach. Since setting the property usually is quite fast, spinlocks are perfect for the job. <code>@synchonized(self)</code> is good when you need to ensure that exception can be thrown without the code deadlocking.</p>\n\n<h3 id='your_own_classes'>Your Own Classes</h3>\n\n<p>Using atomic properties alone won&#8217;t make your classes thread-safe. It will only protect you against <a href='/issue-2/concurrency-apis-and-pitfalls.html#shared_resources'>race conditions</a> in the setter, but won&#8217;t protect your application logic. Consider the following snippet:</p>\n\n<pre><code>if (self.contents) {\n    CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, \n      (__bridge CFStringRef)self.contents, NULL);\n    // draw string\n}</code></pre>\n\n<p>I&#8217;ve made this mistake early on in <a href='http://pspdfkit.com'>PSPDFKit</a>. From time to time, the application crashed with a EXC_BAD_ACCESS, when the <code>contents</code> property was set to nil after the check. A simple fix for this issue would be to capture the variable:</p>\n\n<pre><code>NSString *contents = self.contents;\nif (contents) {\n    CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, \n      (__bridge CFStringRef)contents, NULL);\n    // draw string\n}</code></pre>\n\n<p>This would solve the issue here, but in most cases it&#8217;s not that simple. Imagine that we also have a <code>textColor</code> property and we change both properties on one thread. Then our render thread could end up using the new content along with the old color value and we get a weird combination. This is one reason why Core Data binds model objects to one thread or queue.</p>\n\n<p>There&#8217;s no one-size-fits-all solution for this problem. Using <a href='http://www.cocoawithlove.com/2008/04/value-of-immutable-values.html'>immutable models</a> is a solution, but it has its own problems. Another way is to limit changes to existing objects to the main thread or a specific queue and to generate copies before using them on worker threads. I recommend Jonathan Sterling&#8217;s article about <a href='http://www.jonmsterling.com/posts/2012-12-27-a-pattern-for-immutability.html'>Lightweight Immutability in Objective-C</a> for even more ideas on solving this problem.</p>\n\n<p>The simple solution is to use @synchronize. Anything else is very, very likely to get you into trouble. Way smarter people have failed again and again at doing so.</p>\n\n<h4 id='practical_threadsafe_design'>Practical Thread-Safe Design</h4>\n\n<p>Before trying to make something thread-safe, think hard if it&#8217;s necessary. Make sure it&#8217;s not premature optimization. If it&#8217;s anything like a configuration class, there&#8217;s no point in thinking about thread safety. A much better approach is to throw some asserts in to ensure it&#8217;s used correctly:</p>\n\n<pre><code>void PSPDFAssertIfNotMainThread(void) {\n    NSAssert(NSThread.isMainThread, \n      @&quot;Error: Method needs to be called on the main thread. %@&quot;, \n      [NSThread callStackSymbols]);\n}</code></pre>\n\n<p>Now there&#8217;s code that definitely should be thread-safe; a good example is a caching class. A good approach is to use a concurrent dispatch_queue as read/write lock to maximize performance and try to only lock the areas that are really necessary. Once you start using multiple queues for locking different parts, things get tricky really fast.</p>\n\n<p>Sometimes you can also rewrite your code so that special locks are not required. Consider this snippet that is a form of a multicast delegate. (In many cases, using NSNotifications would be better, but there are <a href='https://code.google.com/r/riky-adsfasfasf/source/browse/Utilities/GCDMulticastDelegate.h'>valid use cases for multicast delegates.</a>)</p>\n\n<pre><code>// header\n@property (nonatomic, strong) NSMutableSet *delegates;\n\n// in init\n_delegateQueue = dispatch_queue_create(&quot;com.PSPDFKit.cacheDelegateQueue&quot;, \n  DISPATCH_QUEUE_CONCURRENT);\n\n- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate {\n    dispatch_barrier_async(_delegateQueue, ^{\n        [self.delegates addObject:delegate];\n    });\n}\n\n- (void)removeAllDelegates {\n    dispatch_barrier_async(_delegateQueue, ^{\n        self.delegates removeAllObjects];\n    });\n}\n\n- (void)callDelegateForX {\n    dispatch_sync(_delegateQueue, ^{\n        [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) {\n            // Call delegate\n        }];\n    });\n}</code></pre>\n\n<p>Unless <code>addDelegate:</code> or <code>removeDelegate:</code> is called thousand times per second, a simpler and cleaner approach is the following:</p>\n\n<pre><code>// header\n@property (atomic, copy) NSSet *delegates;\n\n- (void)addDelegate:(id&lt;PSPDFCacheDelegate&gt;)delegate {\n    @synchronized(self) {\n        self.delegates = [self.delegates setByAddingObject:delegate];\n    }\n}\n\n- (void)removeAllDelegates {\n    self.delegates = nil;\n}\n\n- (void)callDelegateForX {\n    [self.delegates enumerateObjectsUsingBlock:^(id&lt;PSPDFCacheDelegate&gt; delegate, NSUInteger idx, BOOL *stop) {\n        // Call delegate\n    }];\n}</code></pre>\n\n<p>Granted, this example is a bit constructed and one could simply confine changes to the main thread. But for many data structures, it might be worth it to create immutable copies in the modifier methods, so that the general application logic doesn&#8217;t have to deal with excessive locking. Notice how we still have to apply locking in <code>addDelegate:</code>, since otherwise delegate objects might get lost if called from different threads concurrently.</p>\n\n<h2 id='pitfalls_of_gcd'>Pitfalls of GCD</h2>\n\n<p>For most of your locking needs, GCD is perfect. It&#8217;s simple, it&#8217;s fast, and its block-based API makes it much harder to accidentally do imbalanced locks. However, there are quite a few pitfalls, some of which we are going to explore here.</p>\n\n<h3 id='using_gcd_as_a_recursive_lock'>Using GCD as a Recursive Lock</h3>\n\n<p>GCD is a queue to serialize access to shared resources. This can be used for locking, but it&#8217;s quite different than <code>@synchronized</code>. GCD queues are not reentrant - this would break the queue characteristics. Many people tried working around this with using <code>dispatch_get_current_queue()</code>, which is <a href='https://gist.github.com/steipete/3713233'>a bad idea</a>, and Apple had its reasons for deprecating this method in iOS6.</p>\n\n<pre><code>// This is a bad idea.\ninline void pst_dispatch_sync_reentrant(dispatch_queue_t queue, \n  dispatch_block_t block) \n{\n    dispatch_get_current_queue() == queue ? block() \n                                          : dispatch_sync(queue, block);\n}</code></pre>\n\n<p>Testing for the current queue might work for simple solutions, but it fails as soon as your code gets more complex, and you might have multiple queues locked at the same time. Once you are there, you almost certainly will get a <a href='/issue-2/concurrency-apis-and-pitfalls.html#dead_locks'>deadlock</a>. Sure, one could use <code>dispatch_get_specific()</code>, which will traverse the whole queue hierarchy to test for specific queues. For that you would have to write custom queue constructors that apply this metadata. Don&#8217;t go that way. There are use cases where a <code>NSRecursiveLock</code> is the better solution.</p>\n\n<h3 id='fixing_timing_issues_with_dispatch_async'>Fixing Timing Issues with dispatch_async</h3>\n\n<p>Having some timing-issues in UIKit? Most of the time, this will be the perfect &#8220;fix:&#8221;</p>\n\n<pre><code>dispatch_async(dispatch_get_main_queue(), ^{\n    // Some UIKit call that had timing issues but works fine \n    // in the next runloop.\n    [self updatePopoverSize];\n});</code></pre>\n\n<p>Don&#8217;t do this, trust me. This will haunt you later as your app gets larger. It&#8217;s super hard to debug and soon things will fall apart when you need to dispatch more and more because of &#8220;timing issues.&#8221; Look through your code and find the proper place for the call (e.g. viewWillAppear instead of viewDidLoad). I still have some of those hacks in my codebase, but most of them are properly documented and an issue is filed.</p>\n\n<p>Remember that this isn&#8217;t really GCD-specific, but it&#8217;s a common anti-pattern and just very easy to do with GCD. You can apply the same wisdom for <code>performSelector:afterDelay:</code>, where the delay is 0.f for the next runloop.</p>\n\n<h3 id='mixing_dispatch_sync_and_dispatch_async_in_performance_critical_code'>Mixing dispatch_sync and dispatch_async in Performance Critical Code</h3>\n\n<p>That one took me a while to figure out. In <a href='http://pspdfkit.com'>PSPDFKit</a> there is a caching class that uses a LRU list to track image access. When you scroll through the pages, this is called <em>a lot</em>. The initial implementation used dispatch_sync for availability access, and dispatch_async to update the LRU position. This resulted in a frame rate far from the goal of 60 FPS.</p>\n\n<p>When other code running in your app is blocking GCD&#8217;s threads, it might take a while until the dispatch manager finds a thread to perform the dispatch_async code &#8211; until then, your sync call will be blocked. Even when, as in this example, the order of execution for the async case isn&#8217;t important, there&#8217;s no easy way to tell that to GCD. Read/Write locks won&#8217;t help you there, since the async process most definitely needs to perform a barrier write and all your readers will be locked during that. Lesson: <code>dispatch_async</code> can be expensive if it&#8217;s misused. Be careful when using it for locking.</p>\n\n<h3 id='using_dispatch_async_to_dispatch_memoryintensive_operations'>Using dispatch_async to Dispatch Memory-Intensive Operations</h3>\n\n<p>We already talked a lot about NSOperations, and that it&#8217;s usually a good idea to use the more high-level API. This is especially true if you deal with blocks of work that do memory-intensive operations.</p>\n\n<p>In an old version of PSPDFKit, I used a GCD queue to dispatch writing cached JPG images to disk. When the retina iPad came out, this started causing trouble. The resolution doubled, and it took much longer to encode the image data than it took to render it. Consequently, operations piled up in the queue and when the system was busy it could crash of memory exhaustion.</p>\n\n<p>There&#8217;s no way to see how many operations are queued (unless you manually add code to track this), and there&#8217;s also no built-in way to cancel operations in case of a low-memory notification. Switching to NSOperations made the code a lot more debuggable and allowed all this without writing manual management code.</p>\n\n<p>Of course there are some caveats; for example you can&#8217;t set a target queue on your <code>NSOperationQueue</code> (like <code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> for throttled I/O). But that&#8217;s a small price for debuggability, and it also prevents you from running into problem like <a href='/issue-2/concurrency-apis-and-pitfalls.html#priority_inversion'>priority inversion</a>. I even recommend against the nice <code>NSBlockOperation</code> API and suggest real subclasses of NSOperation, including an implementation of description. It&#8217;s more work, but later on, having a way to print all running/pending operations is insanely useful.</p>","slug":"IOS/thread-safety","updated":1416373854000,"excerpt":"","_id":"gz5vpg0tmwjd6xh1","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"UIImageView不调用drawAtRect","date":1379909649000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>UIImageView 不会调用drawAtRect这个函数、因为它是专门用来做图像显示的控件、苹果对这个控件做了最优显示。<br></p>","source":"_posts/IOS/uiimageview不调用drawatrect.md","raw":"title: UIImageView不调用drawAtRect\ndate: 2013-09-23 12:14:09\ntags: IOS\n---\n<p>\nUIImageView 不会调用drawAtRect这个函数、因为它是专门用来做图像显示的控件、苹果对这个控件做了最优显示。\n</p>","slug":"IOS/uiimageview不调用drawatrect","updated":1416373854000,"excerpt":"","_id":"8x8uvydwhlnxfa9n","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"UITabbarItem 定制","date":1382767487000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>设置item的标题颜色：<br></p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[UITabBarItem appearance] setTitleTextAttributes:@{ UITextAttributeTextColor : [<span class=\"built_in\">UIColor</span> grayColor] }</div><div class=\"line\">                                         forState:UIControlStateNormal];</div><div class=\"line\">[[UITabBarItem appearance] setTitleTextAttributes:@{ UITextAttributeTextColor : [<span class=\"built_in\">UIColor</span> redColor] }</div><div class=\"line\">                                         forState:UIControlStateSelected];</div></pre></td></tr></table></figure><br><br><p><br>设置选中和没有选中时候都图片：<br></p><br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//for ios7 before</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setFinishedSelectedImage:(<span class=\"built_in\">UIImage</span> *)selectedImage withFinishedUnselectedImage:(<span class=\"built_in\">UIImage</span> *)unselectedImage ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//for ios7 and later</span></div><div class=\"line\"><span class=\"comment\">//tips:设置图片的时候要用</span></div><div class=\"line\"><span class=\"comment\">//[[UIImage imageNamed:@\"ImageName\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]</span></div><div class=\"line\">- (instancetype)initWithTitle:(<span class=\"built_in\">NSString</span> *)title image:(<span class=\"built_in\">UIImage</span> *)image selectedImage:(<span class=\"built_in\">UIImage</span> *)selectedImage;</div></pre></td></tr></table></figure><br><p><br>ios7 去掉默认都选中颜色<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">self</span><span class=\"variable\">.tabBar</span><span class=\"variable\">.tintColor</span> = [<span class=\"built_in\">UIColor</span> clearColor];</div></pre></td></tr></table></figure>\n\n<p><br>ios7之前去掉选中的时候都mask方块<br></p>\n\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//empty.png 是一张透明都png图</span></div><div class=\"line\">     <span class=\"keyword\">self</span><span class=\"variable\">.tabBar</span><span class=\"variable\">.selectionIndicatorImage</span> = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"empty.png\"</span>];</div><div class=\"line\">     <span class=\"keyword\">self</span><span class=\"variable\">.tabBar</span><span class=\"variable\">.selectedImageTintColor</span> = [<span class=\"built_in\">UIColor</span> clearColor];</div></pre></td></tr></table></figure>","source":"_posts/IOS/uitabbaritem-定制.md","raw":"title: UITabbarItem 定制\ndate: 2013-10-26 14:04:47\ntags: IOS\n---\n<p>\n设置item的标题颜色：\n</p>\n{% codeblock lang:objc %}\n        [[UITabBarItem appearance] setTitleTextAttributes:@{ UITextAttributeTextColor : [UIColor grayColor] }\n                                                 forState:UIControlStateNormal];\n        [[UITabBarItem appearance] setTitleTextAttributes:@{ UITextAttributeTextColor : [UIColor redColor] }\n                                                 forState:UIControlStateSelected];\n{% endcodeblock %}\n\n<p>\n设置选中和没有选中时候都图片：\n</p>\n{% codeblock lang:objc %}\n//for ios7 before\n- (void)setFinishedSelectedImage:(UIImage *)selectedImage withFinishedUnselectedImage:(UIImage *)unselectedImage ;\n\n//for ios7 and later\n//tips:设置图片的时候要用\n//[[UIImage imageNamed:@\"ImageName\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]\n- (instancetype)initWithTitle:(NSString *)title image:(UIImage *)image selectedImage:(UIImage *)selectedImage;\n\n{% endcodeblock %}\n<p>\nios7 去掉默认都选中颜色\n</p>\n\n{% codeblock lang:objc %}\n   self.tabBar.tintColor = [UIColor clearColor];\n{% endcodeblock %}\n\n<p>\nios7之前去掉选中的时候都mask方块\n</p>\n\n{% codeblock lang:objc %}\n//empty.png 是一张透明都png图\n     self.tabBar.selectionIndicatorImage = [UIImage imageNamed:@\"empty.png\"];\n     self.tabBar.selectedImageTintColor = [UIColor clearColor];\n{% endcodeblock %}","slug":"IOS/uitabbaritem-定制","updated":1416373854000,"excerpt":"","_id":"mw5o0vkk1oloozr7","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Xcode 使用git","date":1382426945000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>Xcode 中使用Github<br>第一步：为你的mac添加认证，使得它能够连接到github。<br><br> 参考<a href=\"http://help.github.com/mac-set-up-git/\" target=\"_blank\" rel=\"external\">http://help.github.com/mac-set-up-git/</a>  一步一步操作即可<br>====================================================================<br>第二步：新建项目<br> 先在github里面添加一个Repository，通过<a href=\"http://github.com/首页的new\" target=\"_blank\" rel=\"external\">http://github.com/首页的new</a> Repository连接进入，填写相关的项目信息，创建即可。创建后会跳转到初始项目界面，先暂停，在第三步再使用这个界面。<br> 在mac上使用xcode新建一个项目，为项目使用git，创建过程中使用 create local git repository for this project，指定要存储的目录即可。<br>====================================================================<br>第三步：初始化提交项目<br> 回到第二步github创建项目后的界面。初始化有几种方式，这里我们选择从已有仓库提交代码。执行下面的代码即可。<br>  Existing Git Repo?<br>   cd existing_git_repo<br>   git remote add origin git@github.com:your_account/your_project.git<br>   git push -u origin master<br>上面的代码将本地的仓库连接到远程仓库，并且将代码提交到master分支上。<br>====================================================================<br>第四步：提交代码<br>   新建的文件，XCode会提示一个A标签，表示是added的。<br>   编辑的文件，XCode会提示一个M标签，表示是Modified的。<br>   选中要更新的文件，右键—&gt;Source Control—&gt;Commit Selected Files 通过此操作将变更提交到本地的仓库中。<br>   选中要更新的文件，File菜单—&gt;Source Control—&gt;Push 将本地变化存储到远程服务器中。<br><br>from：<a href=\"http://qiufangzhou.blog.163.com/blog/static/506421802011924102515390/\" target=\"_blank\" rel=\"external\">http://qiufangzhou.blog.163.com/blog/static/506421802011924102515390/</a><br></p>","source":"_posts/IOS/xcode-使用git.md","raw":"title: Xcode 使用git\ndate: 2013-10-22 15:29:05\ntags: IOS\n---\n<p>\nXcode 中使用Github\n第一步：为你的mac添加认证，使得它能够连接到github。\n\n 参考http://help.github.com/mac-set-up-git/  一步一步操作即可\n====================================================================\n第二步：新建项目\n 先在github里面添加一个Repository，通过http://github.com/首页的new Repository连接进入，填写相关的项目信息，创建即可。创建后会跳转到初始项目界面，先暂停，在第三步再使用这个界面。\n 在mac上使用xcode新建一个项目，为项目使用git，创建过程中使用 create local git repository for this project，指定要存储的目录即可。\n====================================================================\n第三步：初始化提交项目\n 回到第二步github创建项目后的界面。初始化有几种方式，这里我们选择从已有仓库提交代码。执行下面的代码即可。\n  Existing Git Repo?\n   cd existing_git_repo    \n   git remote add origin git@github.com:your_account/your_project.git   \n   git push -u origin master\n上面的代码将本地的仓库连接到远程仓库，并且将代码提交到master分支上。\n====================================================================\n第四步：提交代码\n   新建的文件，XCode会提示一个A标签，表示是added的。\n   编辑的文件，XCode会提示一个M标签，表示是Modified的。\n   选中要更新的文件，右键-->Source Control-->Commit Selected Files 通过此操作将变更提交到本地的仓库中。\n   选中要更新的文件，File菜单-->Source Control-->Push 将本地变化存储到远程服务器中。\n\nfrom：http://qiufangzhou.blog.163.com/blog/static/506421802011924102515390/\n</p>","slug":"IOS/xcode-使用git","updated":1416373854000,"excerpt":"","_id":"gnovvkzptekn2h6g","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"xcode使用github","date":1382767338000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>Xcode 中使用Github<br>第一步：为你的mac添加认证，使得它能够连接到github。<br><br>参考<a href=\"http://help.github.com/mac-set-up-git/\" target=\"_blank\" rel=\"external\">http://help.github.com/mac-set-up-git/</a> 一步一步操作即可<br>====================================================================<br>第二步：新建项目<br>先在github里面添加一个Repository，通过<a href=\"http://github.com/首页的new\" target=\"_blank\" rel=\"external\">http://github.com/首页的new</a> Repository连接进入，填写相关的项目信息，创建即可。创建后会跳转到初始项目界面，先暂停，在第三步再使用这个界面。<br>在mac上使用xcode新建一个项目，为项目使用git，创建过程中使用 create local git repository for this project，指定要存储的目录即可。<br>====================================================================<br>第三步：初始化提交项目<br>回到第二步github创建项目后的界面。初始化有几种方式，这里我们选择从已有仓库提交代码。执行下面的代码即可。<br>Existing Git Repo?<br>cd existing_git_repo<br>git remote add origin git@github.com:your_account/your_project.git<br>git push -u origin master<br>上面的代码将本地的仓库连接到远程仓库，并且将代码提交到master分支上。<br>====================================================================<br>第四步：提交代码<br>新建的文件，XCode会提示一个A标签，表示是added的。<br>编辑的文件，XCode会提示一个M标签，表示是Modified的。<br>选中要更新的文件，右键—&gt;Source Control—&gt;Commit Selected Files 通过此操作将变更提交到本地的仓库中。<br>选中要更新的文件，File菜单—&gt;Source Control—&gt;Push 将本地变化存储到远程服务器中。<br><br></p><br><p><br>from:<a href=\"http://qiufangzhou.blog.163.com/blog/static/506421802011924102515390/\" target=\"_blank\" rel=\"external\">http://qiufangzhou.blog.163.com/blog/static/506421802011924102515390/</a><br></p>","source":"_posts/IOS/xcode使用github.md","raw":"title: xcode使用github\ndate: 2013-10-26 14:02:18\ntags: IOS\n---\n<p>\nXcode 中使用Github\n第一步：为你的mac添加认证，使得它能够连接到github。\n\n参考http://help.github.com/mac-set-up-git/ 一步一步操作即可\n====================================================================\n第二步：新建项目\n先在github里面添加一个Repository，通过http://github.com/首页的new Repository连接进入，填写相关的项目信息，创建即可。创建后会跳转到初始项目界面，先暂停，在第三步再使用这个界面。\n在mac上使用xcode新建一个项目，为项目使用git，创建过程中使用 create local git repository for this project，指定要存储的目录即可。\n====================================================================\n第三步：初始化提交项目\n回到第二步github创建项目后的界面。初始化有几种方式，这里我们选择从已有仓库提交代码。执行下面的代码即可。\nExisting Git Repo?\ncd existing_git_repo\ngit remote add origin git@github.com:your_account/your_project.git\ngit push -u origin master\n上面的代码将本地的仓库连接到远程仓库，并且将代码提交到master分支上。\n====================================================================\n第四步：提交代码\n新建的文件，XCode会提示一个A标签，表示是added的。\n编辑的文件，XCode会提示一个M标签，表示是Modified的。\n选中要更新的文件，右键—>Source Control—>Commit Selected Files 通过此操作将变更提交到本地的仓库中。\n选中要更新的文件，File菜单—>Source Control—>Push 将本地变化存储到远程服务器中。\n\n</p>\n<p>\nfrom:http://qiufangzhou.blog.163.com/blog/static/506421802011924102515390/\n</p>","slug":"IOS/xcode使用github","updated":1416373854000,"excerpt":"","_id":"w3mzi4jeti44xtt0","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用Adobe Acrobat Pro查看pdf的文件结构","date":1392265336000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><img src=\"/img/pdf1.png\" alt=\"\"><br><img src=\"/img/pdf2.png\" alt=\"\"><br> <img src=\"/img/pdf3.png\" alt=\"\">  </p>\n","source":"_posts/IOS/使用adobe-acrobat-pro查看pdf的文件结构.md","raw":"title: 使用Adobe Acrobat Pro查看pdf的文件结构\ndate: 2014-02-13 12:22:16\ntags: IOS\n---\n![](/img/pdf1.png)  \n![](/img/pdf2.png)  \n ![](/img/pdf3.png)  ","slug":"IOS/使用adobe-acrobat-pro查看pdf的文件结构","updated":1416373854000,"excerpt":"","_id":"ko4v4upjxtc4rkfk","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"多参数函数","date":1393819010000,"tags":["i6a8xp2otmmlojjw"],"content":"<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)method:(<span class=\"built_in\">NSString</span> *)arg,...</div><div class=\"line\">{</div><div class=\"line\">    va_list list;</div><div class=\"line\">    va_start(list, arg);</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">YES</span>)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *value = va_arg(list, <span class=\"built_in\">NSString</span>*);</div><div class=\"line\">        <span class=\"keyword\">if</span> (value)</div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"value %@\"</span>,value);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    va_end(list);</div><div class=\"line\">}</div></pre></td></tr></table></figure>","source":"_posts/IOS/多参数函数.md","raw":"title: 多参数函数\ndate: 2014-03-03 11:56:50\ntags: IOS\t\t\n---\n{% codeblock lang:objc %}\n- (void)method:(NSString *)arg,...\n{\n    va_list list;\n    va_start(list, arg);\n    while (YES)\n    {\n        NSString *value = va_arg(list, NSString*);\n        if (value)\n        {\n            NSLog(@\"value %@\",value);\n        }\n        else\n        {\n            break;\n        }\n    }\n    va_end(list);\n}\n{% endcodeblock %}","slug":"IOS/多参数函数","updated":1416373854000,"excerpt":"","_id":"n0quu9li3014qh0o","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"添加字体","date":1381993907000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>3.2以后添加新的字体库只要在info.plist中添加UIAppFonts属性，然后添加库名。使用[UIFont fontWithName:size] 方法是可以的。<br></p>","source":"_posts/IOS/添加字体.md","raw":"title: 添加字体\ndate: 2013-10-17 15:11:47\ntags: IOS\n---\n<p>\n3.2以后添加新的字体库只要在info.plist中添加UIAppFonts属性，然后添加库名。使用[UIFont fontWithName:size] 方法是可以的。\n</p>","slug":"IOS/添加字体","updated":1416373854000,"excerpt":"","_id":"hu6alzx0b38bii2p","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"layout":"post","title":"github搭建自己的博客","date":1366524240000,"comments":true,"categories":["vus43xjcy0td8m28"],"content":"<p>登陆<a herf=\"https://github.com/\">github</a>，创建一个个人账号。假设叫做：rubyonchina。</p><br><p><a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"external\">按照github的指示</a>添加ssh key</p><br><p>新建一个目录 dev.cd 到这个目录下<pre><code>cd  ~/dev/<br>git clone git://github.com/imathis/octopress.git rubyonchina.github.com<br>cd  ~/dev/rubyonchina.github.com</code></pre></p><br><p>安装ruby,rvm</p><br><p>修改默认的.rvmrc文件的内容为:</p><br><p><pre><code> rvm use 1.9.2@rails31</code></pre></p><br><p>安装相应的gem:</p><br><p><pre><code>bundle update</code></pre></p><br><p>然后生成模版文件:</p><br><p><pre>rake install</pre></p><br><p> 分发到github上。分发之前，假设你已经注册用户名为rubyonchina的github.com账号，已经创建名为rubyonchina.github.com项目。</p><br><a id=\"more\"></a><br><p><pre><code>cd ~/dev/rubyonchina.github.com<br>git remote add rubyonchina git@github.com:rubyonchina/rubyonchina.github.com.git</code></pre></p><br><p>新增一篇测试博客:</p><br><p><pre><code>rake new_post[“post title”]</code></pre></p><br><p>生成静态站点</p><br><p><pre><code>rake generate</code></pre></p><br><p>在浏览器中输入:</p><br><p><pre><code>127.0.0.1:4000</code></pre></p><br><p>配置octopress与github的连接</p><br><p><pre><code>rake setup_github_pages</code></pre></p><br><p>按照提示填入你的github项目的网址,比如比例是:</p><br><p><pre><code> git@github.com:rubyonchina/rubyonchina.github.com.git </code></pre></p><br><p>分发到github上:</p><br><p><pre><code>rake deploy</code></pre></p><br><p> 第一次运行时，会询问是否建立对github的授权，输入：yes。然后将站点更新的内容推送到github上。从github上pull过数据就也可能不出现.如果没出现后面push的可以不输.</p><br><p><pre><code>git push -u rubyonchina master</code></pre></p><br><p>OK!现在你拥有自己的站点了.</p>","source":"_posts/OSX/2013-04-21-githubda-jian-zi-ji-de-bo-ke.markdown","raw":"---\nlayout: post\ntitle: \"github搭建自己的博客\"\ndate: 2013-04-21 14:04\ncomments: true\ncategories: OSX\n---\n<p>登陆<a herf=\"https://github.com/\">github</a>，创建一个个人账号。假设叫做：rubyonchina。</p>\n<p><a href=\"https://help.github.com/articles/generating-ssh-keys\">按照github的指示</a>添加ssh key</p>\n<p>新建一个目录 dev.cd 到这个目录下<pre><code>cd  ~/dev/\ngit clone git://github.com/imathis/octopress.git rubyonchina.github.com\ncd  ~/dev/rubyonchina.github.com</code></pre></p>\n<p>安装ruby,rvm</p>\n<p>修改默认的.rvmrc文件的内容为:</p>\n<p><pre><code> rvm use 1.9.2@rails31</code></pre></p>\n<p>安装相应的gem:</p>\n<p><pre><code>bundle update</code></pre></p>\n<p>然后生成模版文件:</p>\n<p><pre>rake install</pre></p>\n<p> 分发到github上。分发之前，假设你已经注册用户名为rubyonchina的github.com账号，已经创建名为rubyonchina.github.com项目。</p>\n<!--more-->\n<p><pre><code>cd ~/dev/rubyonchina.github.com\ngit remote add rubyonchina git@github.com:rubyonchina/rubyonchina.github.com.git</code></pre></p>\n<p>新增一篇测试博客:</p>\n<p><pre><code>rake new_post[\"post title\"]</code></pre></p>\n<p>生成静态站点</p>\n<p><pre><code>rake generate</code></pre></p>\n<p>在浏览器中输入:</p>\n<p><pre><code>127.0.0.1:4000</code></pre></p>\n<p>配置octopress与github的连接</p>\n<p><pre><code>rake setup_github_pages</code></pre></p>\n<p>按照提示填入你的github项目的网址,比如比例是:</p>\n<p><pre><code> git@github.com:rubyonchina/rubyonchina.github.com.git </code></pre></p>\n<p>分发到github上:</p>\n<p><pre><code>rake deploy</code></pre></p>\n<p> 第一次运行时，会询问是否建立对github的授权，输入：yes。然后将站点更新的内容推送到github上。从github上pull过数据就也可能不出现.如果没出现后面push的可以不输.</p>\n<p><pre><code>git push -u rubyonchina master</code></pre></p>\n<p>OK!现在你拥有自己的站点了.</p>","slug":"OSX/2013-04-21-githubda-jian-zi-ji-de-bo-ke","updated":1416373854000,"excerpt":"<p>登陆<a herf=\"https://github.com/\">github</a>，创建一个个人账号。假设叫做：rubyonchina。</p><br><p><a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"external\">按照github的指示</a>添加ssh key</p><br><p>新建一个目录 dev.cd 到这个目录下<pre><code>cd  ~/dev/<br>git clone git://github.com/imathis/octopress.git rubyonchina.github.com<br>cd  ~/dev/rubyonchina.github.com</code></pre></p><br><p>安装ruby,rvm</p><br><p>修改默认的.rvmrc文件的内容为:</p><br><p><pre><code> rvm use 1.9.2@rails31</code></pre></p><br><p>安装相应的gem:</p><br><p><pre><code>bundle update</code></pre></p><br><p>然后生成模版文件:</p><br><p><pre>rake install</pre></p><br><p> 分发到github上。分发之前，假设你已经注册用户名为rubyonchina的github.com账号，已经创建名为rubyonchina.github.com项目。</p><br>","_id":"y7nghfayosme496b","tags":[],"photos":[],"link":""},{"layout":"post","title":"进入google.com","date":1366768260000,"comments":true,"categories":["a23y7an31iknjy7n"],"content":"<p></p><p>怎么进入www.google.com而不是www.google.com/hk,很简单，进这个地址：<br><a href=\"http://www.google.com/intl/zh-EN/\" target=\"_blank\" rel=\"external\">http://www.google.com/intl/zh-EN/</a> 打开中文google后,<br>点击下面的:<a href=\"http://www.google.com/ncr\" target=\"_blank\" rel=\"external\">http://www.google.com/ncr</a>就可以了。</p><br>&lt;!-103844721&gt;<p></p>\n","source":"_posts/Other/2013-04-24-jin-ru-google-dot-com.markdown","raw":"---\nlayout: post\ntitle: \"进入google.com\"\ndate: 2013-04-24 09:51\ncomments: true\ncategories: Other\n---\n<p>怎么进入www.google.com而不是www.google.com/hk,很简单，进这个地址： \n<a href=\"http://www.google.com/intl/zh-EN/\">http://www.google.com/intl/zh-EN/</a> 打开中文google后,\n点击下面的:<a href=\"http://www.google.com/ncr\">http://www.google.com/ncr</a>就可以了。</p>\n<!-103844721>","slug":"Other/2013-04-24-jin-ru-google-dot-com","updated":1416373854000,"excerpt":"","_id":"ka1vijrx1g468n8k","tags":[],"photos":[],"link":""},{"layout":"post","title":"python 去掉@2x脚本","date":1369799220000,"comments":true,"categories":["a23y7an31iknjy7n"],"content":"<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rename</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    path = input(<span class=\"string\">\"请输入要处理的文件夹路径\"</span>)</div><div class=\"line\">    print(path)</div><div class=\"line\">    old_ext = <span class=\"string\">\"@2x.png\"</span></div><div class=\"line\">    new_ext = <span class=\"string\">\".png\"</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (path, dirs, files) <span class=\"keyword\">in</span> os.walk(path):<span class=\"comment\">#遍历目录树</span></div><div class=\"line\">        <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> files:</div><div class=\"line\">            ext = os.path.splitext(filename)[<span class=\"number\">1</span>]</div><div class=\"line\">            all = os.path.normpath(filename)</div><div class=\"line\">            a = all.find(old_ext)</div><div class=\"line\">            <span class=\"keyword\">if</span>(a != -<span class=\"number\">1</span>):</div><div class=\"line\">                newname = filename.replace(old_ext,new_ext)</div><div class=\"line\">                oldpath = path + <span class=\"string\">\"/\"</span> + filename</div><div class=\"line\">                newpath = path + <span class=\"string\">\"/\"</span> + newname</div><div class=\"line\">                os.rename(oldpath, newpath)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">\"去掉png文件命中的@2x\"</span>)</div><div class=\"line\">    rename()</div><div class=\"line\">    print(<span class=\"string\">\"finish\"</span>)</div></pre></td></tr></table></figure>\n","source":"_posts/Other/2013-05-29-python-qu-diao-at-2xjiao-ben.markdown","raw":"---\nlayout: post\ntitle: \"python 去掉@2x脚本\"\ndate: 2013-05-29 11:47\ncomments: true\ncategories: Other\n---\n{%  codeblock lang:py %}\nimport os\ndef rename():\n    path = input(\"请输入要处理的文件夹路径\")\n    print(path)\n    old_ext = \"@2x.png\"\n    new_ext = \".png\"\n    for (path, dirs, files) in os.walk(path):#遍历目录树\n        for filename in files:\n            ext = os.path.splitext(filename)[1]\n            all = os.path.normpath(filename)\n            a = all.find(old_ext)\n            if(a != -1):\n                newname = filename.replace(old_ext,new_ext)\n                oldpath = path + \"/\" + filename\n                newpath = path + \"/\" + newname\n                os.rename(oldpath, newpath)\n\n\nif __name__ == '__main__':\n    print(\"去掉png文件命中的@2x\")\n    rename()\n    print(\"finish\")\n{% endcodeblock %}\n","slug":"Other/2013-05-29-python-qu-diao-at-2xjiao-ben","updated":1416373854000,"excerpt":"","_id":"6f0ig9hxbysy69fm","tags":[],"photos":[],"link":""},{"layout":"post","title":"python给png文件添加@2x","date":1369799520000,"comments":true,"categories":["a23y7an31iknjy7n"],"content":"<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rename</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    path = input(<span class=\"string\">\"请输入要处理的文件夹路径\"</span>)</div><div class=\"line\">    print(path)</div><div class=\"line\">    old_ext = <span class=\"string\">\".png\"</span></div><div class=\"line\">    new_ext = <span class=\"string\">\"@2x.png\"</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (path, dirs, files) <span class=\"keyword\">in</span> os.walk(path):<span class=\"comment\">#遍历目录树</span></div><div class=\"line\">        <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> files:</div><div class=\"line\">            ext = os.path.splitext(filename)[<span class=\"number\">1</span>]</div><div class=\"line\">            all = os.path.normpath(filename)</div><div class=\"line\">            a = all.find(old_ext)</div><div class=\"line\">            <span class=\"keyword\">if</span>(a != -<span class=\"number\">1</span>):</div><div class=\"line\">                newname = filename.replace(old_ext,new_ext)</div><div class=\"line\">                oldpath = path + <span class=\"string\">\"/\"</span> + filename</div><div class=\"line\">                newpath = path + <span class=\"string\">\"/\"</span> + newname</div><div class=\"line\">                os.rename(oldpath, newpath)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">\"给png文件添加@2x\"</span>)</div><div class=\"line\">    rename()</div><div class=\"line\">    print(<span class=\"string\">\"finish\"</span>)</div></pre></td></tr></table></figure>","source":"_posts/Other/2013-05-29-pythongei-pngwen-jian-tian-jia-at-2x.markdown","raw":"---\nlayout: post\ntitle: \"python给png文件添加@2x\"\ndate: 2013-05-29 11:52\ncomments: true\ncategories: Other\n---\n\n{%  codeblock lang:py %}\nimport os\ndef rename():\n    path = input(\"请输入要处理的文件夹路径\")\n    print(path)\n    old_ext = \".png\"\n    new_ext = \"@2x.png\"\n    for (path, dirs, files) in os.walk(path):#遍历目录树\n        for filename in files:\n            ext = os.path.splitext(filename)[1]\n            all = os.path.normpath(filename)\n            a = all.find(old_ext)\n            if(a != -1):\n                newname = filename.replace(old_ext,new_ext)\n                oldpath = path + \"/\" + filename\n                newpath = path + \"/\" + newname\n                os.rename(oldpath, newpath)\n\n\nif __name__ == '__main__':\n    print(\"给png文件添加@2x\")\n    rename()\n    print(\"finish\")\n{% endcodeblock %}","slug":"Other/2013-05-29-pythongei-pngwen-jian-tian-jia-at-2x","updated":1416373854000,"excerpt":"","_id":"3lrr5t62b876fvod","tags":[],"photos":[],"link":""},{"layout":"post","title":"wifi","date":1371536760000,"comments":true,"categories":["a23y7an31iknjy7n"],"content":"<p><br>netsh wlan set hostednexx ork mode=allow ssid=SoftAP key=99887766回车 netsh wlan start hosted<br></p>\n","source":"_posts/Other/2013-06-18-wifi.markdown","raw":"---\nlayout: post\ntitle: \"wifi\"\ndate: 2013-06-18 14:26\ncomments: true\ncategories: Other\n---\n<p>\nnetsh wlan set hostednexx ork mode=allow ssid=SoftAP key=99887766回车 netsh wlan start hosted\n</p>\n","slug":"Other/2013-06-18-wifi","updated":1416373854000,"excerpt":"","_id":"69bmfpuc74nwkmfa","tags":[],"photos":[],"link":""},{"layout":"post","title":"Mac 虚拟机搭建 WP8开发环境","date":1366548000000,"comments":true,"categories":["c9ovoo03cf11bsnn"],"content":"<p>使用Vmware Fusion 5 安装win8 pro<br>打开虚拟机文件包，在<em>*</em>.vmx文件中添加<br>hypervisor.cpuid.v0 = “FALSE”<br>vhv.enable = ”TRUE“<br>在虚拟机设置——&gt;高级中,首选虚拟化引擎选项选择 带有拓展页面表的 Intel VT-X<br>处理器和内存设置选项，chu处理器核心选择2个以上<br>并在高级选项中选中 在此虚拟机中启用虚拟化管理程序</p>","source":"_posts/WindowsPhone/2013-04-21-mac-xu-ni-ji-da-jian-wp8kai-fa-huan-jing.markdown","raw":"---\nlayout: post\ntitle: \"Mac 虚拟机搭建 WP8开发环境\"\ndate: 2013-04-21 20:40\ncomments: true\ncategories: windowsphone\n---\n<p>使用Vmware Fusion 5 安装win8 pro \n打开虚拟机文件包，在***.vmx文件中添加\nhypervisor.cpuid.v0 = “FALSE”\nvhv.enable = ”TRUE“\n在虚拟机设置---->高级中,首选虚拟化引擎选项选择 带有拓展页面表的 Intel VT-X\n处理器和内存设置选项，chu处理器核心选择2个以上\n并在高级选项中选中 在此虚拟机中启用虚拟化管理程序</p>","slug":"WindowsPhone/2013-04-21-mac-xu-ni-ji-da-jian-wp8kai-fa-huan-jing","updated":1416373854000,"excerpt":"","_id":"ecsu2ga6ikzp3z53","tags":[],"photos":[],"link":""},{"layout":"post","title":"C# 接口","date":1366873860000,"comments":true,"categories":["c9ovoo03cf11bsnn"],"content":"<p><br>定义接口，里面包含方法，但没有方法具体实现的代码，然后在继承该接口的类里面要实现接口的所有方法的代码。<br></p>\n\n<p>定义接口<br><br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IBark</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">void</span> Bark();</div><div class=\"line\">}</div></pre></td></tr></table></figure><br><br></p><p><br>再定义一个类,继承于IBark,并且必需实现其中的Bark()方法。<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Dog:IBark</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title\">Dog</span>()</div><div class=\"line\">    {}</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Bark</span>()</div><div class=\"line\">    {</div><div class=\"line\">       Consol.write(<span class=\"string\">\"汪汪\"</span>);</div><div class=\"line\">     }</div><div class=\"line\">}</div></pre></td></tr></table></figure>","source":"_posts/WindowsPhone/2013-04-25-c-number-jie-kou.markdown","raw":"---\nlayout: post\ntitle: \"C# 接口\"\ndate: 2013-04-25 15:11\ncomments: true\ncategories: windowsphone\n---\n<p>\n定义接口，里面包含方法，但没有方法具体实现的代码，然后在继承该接口的类里面要实现接口的所有方法的代码。\n</p>\n\n<p>定义接口</p]>\n\n{% codeblock lang:csharp %}\npublic interface IBark\n{\n    void Bark();\n}\n{% endcodeblock %}\n\n<p>\n再定义一个类,继承于IBark,并且必需实现其中的Bark()方法。\n</p>\n\n{% codeblock lang:csharp %}\npublic class Dog:IBark\n{\n    public Dog()\n    {}\n    public void Bark()\n    {\n       Consol.write(\"汪汪\");\n     }\n}\n{% endcodeblock %}","slug":"WindowsPhone/2013-04-25-c-number-jie-kou","updated":1416373854000,"excerpt":"","_id":"oxe22kvwqlifsk4t","tags":[],"photos":[],"link":""},{"layout":"post","title":"C#abstrace跟virtua的区别","date":1366939800000,"comments":true,"categories":["c9ovoo03cf11bsnn"],"content":"<h5 id=\"一、Virtual方法（虚方法）\">一、Virtual方法（虚方法）</h5>\n<p><br>virtual 关键字用于在基类中修饰方法。virtual的使用会有两种情况：<br><br>     情况1：在基类中定义了virtual方法，但在派生类中没有重写该虚方法。那么在对派生类实例的调用中，该虚方法使用的是基类定义的方法。<br><br>     情况2：在基类中定义了virtual方法，然后在派生类中使用override重写该方法。那么在对派生类实例的调用中，该虚方法使用的是派生重写的方法。<br></p><br>#####二、Abstract方法（抽象方法）<br><p><br> abstract关键字只能用在抽象类中修饰方法，并且没有具体的实现。抽象方法的实现必须在派生类中使用override关键字来实现。<br><br>接口和抽象类:<br><br>最本质的区别：抽象类是一个不完全的类，是对对象的抽象，而接口是一种行为规范。<br><br> C# 是面向对象的程序设计语言，每一个函数都属于一个类。<br>Static：当一个方法被声明为Static时，这个方法是一个静态方法，编译器会在编译时保留这个方法的实现。也就是说，这个方法属于类，但是不属于任何成员，不管这个类的实例是否存在，它们都会存在。就像入口函数Static void Main，因为它是静态函数，所以可以直接被调用。</p><br><p><br>Virtua：当一个方法被声明为Virtual时，它是一个虚拟方法，直到你使用ClassName variable = new ClassName();声明一个类的实例之前，它都不存在于真实的内存空间中。这个关键字在类的继承中非常常用，用来提供类方法的多态性支持。<br>overrride：表示重写 这个类是继承于Shape类<br>public override double Area 这个属性再shape中肯定存在 但是这里我们不想用shape中的 所以要重写<br>virtual，abstract是告诉其它想继承于他的类 你可以重写我的这个方法或属性，否则不允许。<br>一个生动的例子 :老爸表示基类（被继承的类） 儿子表示子类（继承的类）<br>老爸用virtual告诉儿子:”孩子,你要继承我的事业,在这块上面可以自己继续发展你自己的”<br>儿子用override告诉全世界:”这个我可不是直接拿我爸的,他只是指个路给我,是我自己奋斗出来的”<br></p><br><p><br>abstract：抽象方法声明使用，是必须被派生类覆写的方法，抽象类就是用来被继承的；可以看成是没有实现体的虚方法；如果类中包含抽象方法，那么类就必须定义为抽象类，不论是否还包含其他一般方法；抽象类不能有实体的。<br>实例解答:<br>interface:用来声明接口<br></p>\n\n<p><br>1.只提供一些方法规约，不提供方法主体. 如:<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IPerson</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">void</span> getName();<span class=\"comment\">//不包含方法主体</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br>2.方法不能用public abstract等修饰,无字段变量，无构造函数。<br></p>\n\n\n<p><br>3.方法可包含参数。 如:<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IPerson</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">void</span> getAge(<span class=\"keyword\">string</span> s);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p><br>一个例子(例1)：<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IPerson</div><div class=\"line\">{</div><div class=\"line\">IPerson(); <span class=\"comment\">//错误</span></div><div class=\"line\"><span class=\"keyword\">string</span> name; <span class=\"comment\">//错误</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getIDcard</span>();<span class=\"comment\">//错误</span></div><div class=\"line\"><span class=\"keyword\">void</span> getName(); <span class=\"comment\">//right</span></div><div class=\"line\"><span class=\"keyword\">void</span> getAge(<span class=\"keyword\">string</span> s); <span class=\"comment\">//right</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p><br>实现interface的类<br>1.与继承类的格式一致，如 public class Chinese:IPerson{}<br>2.必须实现 interface 中的各个方法<br>例2，继承例1<br></p>\n\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Chinese:IPerson</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">Chinese</span>(){} <span class=\"comment\">//添加构造</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getName</span>(){} <span class=\"comment\">//实现getName()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getAge</span>(<span class=\"keyword\">string</span> s){} <span class=\"comment\">//实现getAge()</span></div><div class=\"line\">}</div></pre></td></tr></table></figure><br><a id=\"more\"></a><br><br><p><br>abstract:声明抽象类、抽象方法<br></p><br><p><br>1.抽象方法所在类必须为抽象类<br></p><br><p><br>2.抽象类不能直接实例化，必须由其派生类实现。<br></p><br><p><br>3.抽象方法不包含方法主体，必须由派生类以override方式实现此方法,这点跟interface中的方法类似<br>如<br></p><br><br><br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Book</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span>()</div><div class=\"line\">{</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrice</span>(); <span class=\"comment\">//抽象方法，不含主体</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">getName</span>() //虚方法，可覆盖</div><div class=\"line\">{</div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"this is a test:virtual getName()\"</span>);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">getContent</span>() //虚方法，可覆盖</div><div class=\"line\">{</div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"this is a test:virtual getContent()\"</span>);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getDate</span>() //一般方法，若在派生类中重写，须使用<span class=\"keyword\">new</span>关键字</div><div class=\"line\">{</div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"this is a test: void getDate()\"</span>);</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> JavaBook:Book</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">getPrice</span>() //实现抽象方法，必须实现</div><div class=\"line\">{</div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"this is a test:JavaBook override abstract getPrice()\"</span>);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">getName</span>() //覆盖原方法，不是必须的</div><div class=\"line\">{</div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"this is a test:JavaBook override virtual getName()\"</span>);</div><div class=\"line\">}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p><br>测试如下：<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> test</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">test</span>()</div><div class=\"line\">{</div><div class=\"line\">JavaBook jbook=<span class=\"keyword\">new</span> JavaBook();</div><div class=\"line\">jbook.getPrice(); <span class=\"comment\">//将调用JavaBook中getPrice()</span></div><div class=\"line\">jbook.getName(); <span class=\"comment\">//将调用JavaBook中getName()</span></div><div class=\"line\">jbook.getContent(); <span class=\"comment\">//将调用Book中getContent()</span></div><div class=\"line\">jbook.getDate(); <span class=\"comment\">//将调用Book中getDate()</span></div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</div><div class=\"line\">{</div><div class=\"line\">test t=<span class=\"keyword\">new</span> test();</div><div class=\"line\">}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p><br>virtual:标记方法为虚方法<br>1.可在派生类中以override覆盖此方法<br>2.不覆盖也可由对象调用<br>3.无此标记的方法(也无其他标记)，重写时需用new隐藏原方法<br>abstract 与virtual : 方法重写时都使用 override 关键字<br>接口定义以大写字母I开头。方法只定义其名称,在C#中，方法默认是公有方法；用public修饰方法是不允许的,否则会出现编译错误；接口可以从别的接口继承，如果是继承多个接口，则父接口列表用逗号间隔。<br>接口可以通过类来实现，当类的基列表同时包含基类和接口时，列表中首先出现的是基类；类必须要实现其抽象方法；<br>接口使用：见代码（转）<br>interface使用<br>interface使用（实例一）<br></p>\n\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\">namespace Dage.Interface</div><div class=\"line\">{</div><div class=\"line\"><span class=\"comment\">//打印机接口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IPrint</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">string</span> returnPrintName();</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//--------------------------------------------</span></div><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> Dage.Interface;</div><div class=\"line\">namespace Dage.Print</div><div class=\"line\">{</div><div class=\"line\"><span class=\"comment\">//HP牌打印机类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> HP: IPrint</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">returnPrintName</span>()</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"这是HP牌打印机\"</span>;</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//--------------------------------------------</span></div><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\">namespace Dage.Print</div><div class=\"line\">{</div><div class=\"line\"><span class=\"comment\">//Eps牌打印机类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Eps: IPrint</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">returnPrintName</span>()</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"这是Eps牌打印机\"</span>;</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//--------------------------------------------</span></div><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> Dage.Interface;</div><div class=\"line\">namespace Dage</div><div class=\"line\">{</div><div class=\"line\"><span class=\"comment\">//打印类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Printer</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">Printer</span>()</div><div class=\"line\">{}</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">PrintName</span>(IPrint iPrint)</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">return</span> iPrint.returnPrintName();</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//--------------------------------------------</span></div><div class=\"line\">--WinFrom中调用代码:</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">button1_Click</span>(<span class=\"keyword\">object</span> sender, System.EventArgs e)</div><div class=\"line\">{</div><div class=\"line\">Printer p= <span class=\"keyword\">new</span> Printer();</div><div class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.comboBox1.Text)</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"HP\"</span>:</div><div class=\"line\">MessageBox.Show(p.PrintName(<span class=\"keyword\">new</span> HP()));</div><div class=\"line\"><span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"Eps\"</span>:</div><div class=\"line\">MessageBox.Show(p.PrintName(<span class=\"keyword\">new</span> Eps()));</div><div class=\"line\"><span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">MessageBox.Show(<span class=\"string\">\"没有发现这个品牌！\"</span>);</div><div class=\"line\"><span class=\"keyword\">break</span>;</div><div class=\"line\">}</div><div class=\"line\">}</div></pre></td></tr></table></figure>","source":"_posts/WindowsPhone/2013-04-26-c-number-abstracegen-virtuade-qu-bie.markdown","raw":"---\nlayout: post\ntitle: \"C#abstrace跟virtua的区别\"\ndate: 2013-04-26 09:30\ncomments: true\ncategories: windowsphone\n---\n#####一、Virtual方法（虚方法）\n\n<p>\nvirtual 关键字用于在基类中修饰方法。virtual的使用会有两种情况：\n\n     情况1：在基类中定义了virtual方法，但在派生类中没有重写该虚方法。那么在对派生类实例的调用中，该虚方法使用的是基类定义的方法。\n\n     情况2：在基类中定义了virtual方法，然后在派生类中使用override重写该方法。那么在对派生类实例的调用中，该虚方法使用的是派生重写的方法。\n</p>\n#####二、Abstract方法（抽象方法）\n<p>\n abstract关键字只能用在抽象类中修饰方法，并且没有具体的实现。抽象方法的实现必须在派生类中使用override关键字来实现。\n\n接口和抽象类:\n\n最本质的区别：抽象类是一个不完全的类，是对对象的抽象，而接口是一种行为规范。\n\n C# 是面向对象的程序设计语言，每一个函数都属于一个类。\nStatic：当一个方法被声明为Static时，这个方法是一个静态方法，编译器会在编译时保留这个方法的实现。也就是说，这个方法属于类，但是不属于任何成员，不管这个类的实例是否存在，它们都会存在。就像入口函数Static void Main，因为它是静态函数，所以可以直接被调用。</p>\n<p>\nVirtua：当一个方法被声明为Virtual时，它是一个虚拟方法，直到你使用ClassName variable = new ClassName();声明一个类的实例之前，它都不存在于真实的内存空间中。这个关键字在类的继承中非常常用，用来提供类方法的多态性支持。\noverrride：表示重写 这个类是继承于Shape类\npublic override double Area 这个属性再shape中肯定存在 但是这里我们不想用shape中的 所以要重写\nvirtual，abstract是告诉其它想继承于他的类 你可以重写我的这个方法或属性，否则不允许。\n一个生动的例子 :老爸表示基类（被继承的类） 儿子表示子类（继承的类）\n老爸用virtual告诉儿子:\"孩子,你要继承我的事业,在这块上面可以自己继续发展你自己的\"\n儿子用override告诉全世界:\"这个我可不是直接拿我爸的,他只是指个路给我,是我自己奋斗出来的\"\n</p>\n<p>\nabstract：抽象方法声明使用，是必须被派生类覆写的方法，抽象类就是用来被继承的；可以看成是没有实现体的虚方法；如果类中包含抽象方法，那么类就必须定义为抽象类，不论是否还包含其他一般方法；抽象类不能有实体的。\n实例解答:\ninterface:用来声明接口\n</p>\n\n<p>\n1.只提供一些方法规约，不提供方法主体. 如:\n</p>\n\n{% codeblock lang:csharp %}\npublic interface IPerson\n{\nvoid getName();//不包含方法主体\n}\n{% endcodeblock %}\n\n<p>\n2.方法不能用public abstract等修饰,无字段变量，无构造函数。\n</p>\n \n\n<p>\n3.方法可包含参数。 如:\n</p>\n\n{% codeblock lang:csharp %}\n public interface IPerson\n{\nvoid getAge(string s);\n}\n{% endcodeblock %}\n\n\n<p>\n一个例子(例1)：\n</p>\n\n{% codeblock lang:csharp %}\npublic interface IPerson\n{\nIPerson(); //错误\nstring name; //错误\npublic void getIDcard();//错误\nvoid getName(); //right\nvoid getAge(string s); //right\n}\n{% endcodeblock %}\n\n\n<p>\n实现interface的类\n1.与继承类的格式一致，如 public class Chinese:IPerson{}\n2.必须实现 interface 中的各个方法\n例2，继承例1\n</p>\n\n\n{% codeblock lang:csharp %}\npublic class Chinese:IPerson\n{\npublic Chinese(){} //添加构造\npublic void getName(){} //实现getName()\npublic void getAge(string s){} //实现getAge()\n}\n{% endcodeblock %}\n<!--more-->\n\n<p>\nabstract:声明抽象类、抽象方法\n</p>\n<p>\n1.抽象方法所在类必须为抽象类\n</p>\n<p>\n2.抽象类不能直接实例化，必须由其派生类实现。\n</p>\n<p>\n3.抽象方法不包含方法主体，必须由派生类以override方式实现此方法,这点跟interface中的方法类似\n如\n</p>\n\n\n{% codeblock lang:csharp %}\npublic abstract class Book\n{\npublic Book()\n{\n}\npublic abstract void getPrice(); //抽象方法，不含主体\npublic virtual void getName() //虚方法，可覆盖\n{\nConsole.WriteLine(\"this is a test:virtual getName()\");\n}\npublic virtual void getContent() //虚方法，可覆盖\n{\nConsole.WriteLine(\"this is a test:virtual getContent()\");\n}\npublic void getDate() //一般方法，若在派生类中重写，须使用new关键字\n{\nConsole.WriteLine(\"this is a test: void getDate()\");\n}\n}\npublic class JavaBook:Book\n{\npublic override void getPrice() //实现抽象方法，必须实现\n{\nConsole.WriteLine(\"this is a test:JavaBook override abstract getPrice()\");\n}\npublic override void getName() //覆盖原方法，不是必须的\n{\nConsole.WriteLine(\"this is a test:JavaBook override virtual getName()\");\n}\n}\n{% endcodeblock %}\n\n\n<p>\n测试如下：\n</p>\n\n{% codeblock lang:csharp %}\npublic class test\n{\npublic test()\n{\nJavaBook jbook=new JavaBook();\njbook.getPrice(); //将调用JavaBook中getPrice()\njbook.getName(); //将调用JavaBook中getName()\njbook.getContent(); //将调用Book中getContent()\njbook.getDate(); //将调用Book中getDate()\n}\npublic static void Main()\n{\ntest t=new test();\n}\n}\n{% endcodeblock %}\n\n\n<p>\nvirtual:标记方法为虚方法\n1.可在派生类中以override覆盖此方法\n2.不覆盖也可由对象调用\n3.无此标记的方法(也无其他标记)，重写时需用new隐藏原方法\nabstract 与virtual : 方法重写时都使用 override 关键字\n接口定义以大写字母I开头。方法只定义其名称,在C#中，方法默认是公有方法；用public修饰方法是不允许的,否则会出现编译错误；接口可以从别的接口继承，如果是继承多个接口，则父接口列表用逗号间隔。\n接口可以通过类来实现，当类的基列表同时包含基类和接口时，列表中首先出现的是基类；类必须要实现其抽象方法；\n接口使用：见代码（转）\ninterface使用\ninterface使用（实例一）\n</p>\n\n\n{% codeblock lang:csharp %}\nusing System;\nnamespace Dage.Interface\n{\n//打印机接口\npublic interface IPrint\n{\nstring returnPrintName();\n}\n}\n//--------------------------------------------\nusing System;\nusing Dage.Interface;\nnamespace Dage.Print\n{\n//HP牌打印机类\npublic class HP: IPrint\n{\npublic string returnPrintName()\n{\nreturn \"这是HP牌打印机\";\n}\n}\n}\n//--------------------------------------------\nusing System;\nnamespace Dage.Print\n{\n//Eps牌打印机类\npublic class Eps: IPrint\n{\npublic string returnPrintName()\n{\nreturn \"这是Eps牌打印机\";\n}\n}\n}\n//--------------------------------------------\nusing System;\nusing Dage.Interface;\nnamespace Dage\n{\n//打印类\npublic class Printer\n{\npublic Printer()\n{}\npublic string PrintName(IPrint iPrint)\n{\nreturn iPrint.returnPrintName();\n}\n}\n}\n//--------------------------------------------\n--WinFrom中调用代码:\nprivate void button1_Click(object sender, System.EventArgs e)\n{\nPrinter p= new Printer();\nswitch (this.comboBox1.Text)\n{\ncase \"HP\":\nMessageBox.Show(p.PrintName(new HP()));\nbreak;\ncase \"Eps\":\nMessageBox.Show(p.PrintName(new Eps()));\nbreak;\ndefault:\nMessageBox.Show(\"没有发现这个品牌！\");\nbreak;\n}\n}\n{% endcodeblock %}","slug":"WindowsPhone/2013-04-26-c-number-abstracegen-virtuade-qu-bie","updated":1416373854000,"excerpt":"<h5 id=\"一、Virtual方法（虚方法）\">一、Virtual方法（虚方法）</h5>\n<p><br>virtual 关键字用于在基类中修饰方法。virtual的使用会有两种情况：<br><br>     情况1：在基类中定义了virtual方法，但在派生类中没有重写该虚方法。那么在对派生类实例的调用中，该虚方法使用的是基类定义的方法。<br><br>     情况2：在基类中定义了virtual方法，然后在派生类中使用override重写该方法。那么在对派生类实例的调用中，该虚方法使用的是派生重写的方法。<br></p><br>#####二、Abstract方法（抽象方法）<br><p><br> abstract关键字只能用在抽象类中修饰方法，并且没有具体的实现。抽象方法的实现必须在派生类中使用override关键字来实现。<br><br>接口和抽象类:<br><br>最本质的区别：抽象类是一个不完全的类，是对对象的抽象，而接口是一种行为规范。<br><br> C# 是面向对象的程序设计语言，每一个函数都属于一个类。<br>Static：当一个方法被声明为Static时，这个方法是一个静态方法，编译器会在编译时保留这个方法的实现。也就是说，这个方法属于类，但是不属于任何成员，不管这个类的实例是否存在，它们都会存在。就像入口函数Static void Main，因为它是静态函数，所以可以直接被调用。</p><br><p><br>Virtua：当一个方法被声明为Virtual时，它是一个虚拟方法，直到你使用ClassName variable = new ClassName();声明一个类的实例之前，它都不存在于真实的内存空间中。这个关键字在类的继承中非常常用，用来提供类方法的多态性支持。<br>overrride：表示重写 这个类是继承于Shape类<br>public override double Area 这个属性再shape中肯定存在 但是这里我们不想用shape中的 所以要重写<br>virtual，abstract是告诉其它想继承于他的类 你可以重写我的这个方法或属性，否则不允许。<br>一个生动的例子 :老爸表示基类（被继承的类） 儿子表示子类（继承的类）<br>老爸用virtual告诉儿子:”孩子,你要继承我的事业,在这块上面可以自己继续发展你自己的”<br>儿子用override告诉全世界:”这个我可不是直接拿我爸的,他只是指个路给我,是我自己奋斗出来的”<br></p><br><p><br>abstract：抽象方法声明使用，是必须被派生类覆写的方法，抽象类就是用来被继承的；可以看成是没有实现体的虚方法；如果类中包含抽象方法，那么类就必须定义为抽象类，不论是否还包含其他一般方法；抽象类不能有实体的。<br>实例解答:<br>interface:用来声明接口<br></p>\n\n<p><br>1.只提供一些方法规约，不提供方法主体. 如:<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IPerson</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">void</span> getName();<span class=\"comment\">//不包含方法主体</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><br>2.方法不能用public abstract等修饰,无字段变量，无构造函数。<br></p>\n\n\n<p><br>3.方法可包含参数。 如:<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IPerson</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">void</span> getAge(<span class=\"keyword\">string</span> s);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p><br>一个例子(例1)：<br></p>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> IPerson</div><div class=\"line\">{</div><div class=\"line\">IPerson(); <span class=\"comment\">//错误</span></div><div class=\"line\"><span class=\"keyword\">string</span> name; <span class=\"comment\">//错误</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getIDcard</span>();<span class=\"comment\">//错误</span></div><div class=\"line\"><span class=\"keyword\">void</span> getName(); <span class=\"comment\">//right</span></div><div class=\"line\"><span class=\"keyword\">void</span> getAge(<span class=\"keyword\">string</span> s); <span class=\"comment\">//right</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p><br>实现interface的类<br>1.与继承类的格式一致，如 public class Chinese:IPerson{}<br>2.必须实现 interface 中的各个方法<br>例2，继承例1<br></p>\n\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Chinese:IPerson</div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">Chinese</span>(){} <span class=\"comment\">//添加构造</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getName</span>(){} <span class=\"comment\">//实现getName()</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getAge</span>(<span class=\"keyword\">string</span> s){} <span class=\"comment\">//实现getAge()</span></div><div class=\"line\">}</div></pre></td></tr></table></figure><br>","_id":"i7vuujdjsiii9g3q","tags":[],"photos":[],"link":""},{"layout":"post","title":"C#delegate和event","date":1367130660000,"comments":true,"categories":["c9ovoo03cf11bsnn"],"content":"<h4 id=\"C#_Delegate概念\">C# Delegate概念</h4>\n<p><br>在基于Windows平台的程序设计中，事件（event）是一个很重要的概念。因为在几乎所有的Windows应用程序中，都会涉及大量的异步调 用，比如响应点击按钮、处理Windows系统消息等，这些异步调用都需要通过事件的方式来完成。即使在下一代开发平台——.NET中也不例外。<br>那么什么是事件呢？所谓事件，就是由某个对象发出的消息，这个消息标志着某个特定的行为发生了，或者某个特定的条件成立了。比如用户点击了鼠标、 socket上有数据到达等。那个触发（raise）事件的对象称为事件的发送者（event sender），捕获并响应事件的对象称为事件的接收者（event receiver）。<br>在这里，我们将要讨论的是，在.NET的主流开发语言C#中如何使用自定义的事件来实现我们自己的异步调用。<br>在C#中，事件的实现依赖于delegate，因此我们有必要先了解一下delegate的概念。<br>delegate是C#中的一种类型，它实际上是一个能够持有对某个方法的引用的类。与其它的类不同，delegate类能够拥有一个签名 （signature），并且它只能持有与它的签名相匹配的方法的引用。它所实现的功能与C/C++中的函数指针十分相似。它允许你传递一个类A的方法m 给另一个类B的对象，使得类B的对象能够调用这个方法m。但与函数指针相比，delegate有许多函数指针不具备的优点。首先，函数指针只能指向静态函 数，而delegate既可以引用静态函数，又可以引用非静态成员函数。在引用非静态成员函数时，delegate不但保存了对此函数入口指针的引用，而 且还保存了调用此函数的类实例的引用。其次，与函数指针相比，delegate是面向对象、类型安全、可靠的受控（managed）对象。也就是 说，runtime能够保证delegate指向一个有效的方法，你无须担心delegate会指向无效地址或者越界地址。<br>实现一个C# delegate是很简单的，通过以下3个步骤即可实现一个delegate：<br>1． 声明一个delegate对象，它应当与你想要传递的方法具有相同的参数和返回值类型。<br>2． 创建delegate对象，并将你想要传递的函数作为参数传入。<br>3． 在要实现异步调用的地方，通过上一步创建的对象来调用方法。<br>下面是一个简单的例子：<br><br></p><br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MyDelegateTest  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"comment\">// 步骤1，声明delegate对象  </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyDelegate</span>(<span class=\"keyword\">string</span> name);  </div><div class=\"line\"><span class=\"comment\">// 这是我们欲传递的方法，它与MyDelegate具有相同的参数和返回值类型  </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MyDelegateFunc</span>(<span class=\"keyword\">string</span> name)  </div><div class=\"line\">{  </div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"Hello, {0}\"</span>, name);  </div><div class=\"line\">}  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"comment\">// 步骤2，创建delegate对象  </span></div><div class=\"line\">MyDelegate md = <span class=\"keyword\">new</span> MyDelegate(MyDelegateTest.MyDelegateFunc);  </div><div class=\"line\"><span class=\"comment\">// 步骤3，调用delegate  </span></div><div class=\"line\">md(<span class=\"string\">\"sam1111\"</span>);  </div><div class=\"line\">}  </div><div class=\"line\">} </div></pre></td></tr></table></figure><br><br><p><br>输出结果是：Hello, sam1111<br>了解了delegate，下面我们来看看，在C#中对event是如何处理的。<br></p><br><a id=\"more\"></a><br><br>####C# event<br><br><p><br>C#中的事件处理实际上是一种具有特殊签名的delegate，象下面这个样子：<br>public delegate void MyEventHandler(object sender, MyEventArgs e);<br>其中的两个参数，sender代表事件发送者，e是事件参数类。MyEventArgs类用来包含与事件相关的数据，所有的事件参数类都必须从 System.EventArgs类派生。当然，如果你的事件不含参数，那么可以直接用System.EventArgs类作为参数。<br>就是这么简单，结合delegate的实现，我们可以将自定义事件的实现归结为以下几步：<br>1． 定义delegate对象类型，它有两个参数，第一个参数是事件发送者对象，第二个参数是事件参数类对象。<br>2． 定义事件参数类，此类应当从System.EventArgs类派生。如果事件不带参数，这一步可以省略。<br>3． 定义事件处理方法，它应当与delegate对象具有相同的参数和返回值类型。<br>4． 用C# event关键字定义事件对象，它同时也是一个delegate对象。<br>5． 用+=操作符添加事件到事件队列中（-=操作符能够将事件从队列中删除）。<br>6． 在需要触发事件的地方用调用delegate的方式写事件触发方法。一般来说，此方法应为protected访问限制，既不能以public方式调用，但可以被子类继承。名字是OnEventName。<br>7． 在适当的地方调用事件触发方法触发事件。<br>下面是一个简单的例子：<br></p><br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> EventTest  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"comment\">// 步骤1，定义delegate对象  </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandler</span>(<span class=\"keyword\">object</span> sender, System.EventArgs e);  </div><div class=\"line\"><span class=\"comment\">// 步骤2省略  </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MyEventCls  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"comment\">// 步骤3，定义事件处理方法，它与delegate对象具有相同的参数和返回值类型  </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventFunc</span>(<span class=\"keyword\">object</span> sender, System.EventArgs e)  </div><div class=\"line\">{  </div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"My event is ok!\"</span>);  </div><div class=\"line\">}  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"comment\">// 步骤4，用event关键字定义事件对象  </span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">event</span> MyEventHandler myevent;  </div><div class=\"line\"><span class=\"keyword\">private</span> MyEventCls myecls;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"title\">EventTest</span>()  </div><div class=\"line\">{  </div><div class=\"line\">myecls = <span class=\"keyword\">new</span> MyEventCls();  </div><div class=\"line\"><span class=\"comment\">// 步骤5，用+=操作符将事件添加到队列中  </span></div><div class=\"line\"><span class=\"keyword\">this</span>.myevent += <span class=\"keyword\">new</span> MyEventHandler(myecls.MyEventFunc);  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"comment\">// 步骤6，以调用delegate的方式写事件触发函数  </span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">OnMyEvent</span>(System.EventArgs e)  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"keyword\">if</span>(myevent != <span class=\"keyword\">null</span>)  </div><div class=\"line\">myevent(<span class=\"keyword\">this</span>, e);  </div><div class=\"line\">}  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RaiseEvent</span>()  </div><div class=\"line\">{  </div><div class=\"line\">EventArgs e = <span class=\"keyword\">new</span> EventArgs();  </div><div class=\"line\"><span class=\"comment\">// 步骤7，触发事件  </span></div><div class=\"line\">OnMyEvent(e);  </div><div class=\"line\">}  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()  </div><div class=\"line\">{  </div><div class=\"line\">EventTest et = <span class=\"keyword\">new</span> EventTest();  </div><div class=\"line\">Console.Write(<span class=\"string\">\"Please input a:\"</span>);  </div><div class=\"line\"><span class=\"keyword\">string</span> s = Console.ReadLine();  </div><div class=\"line\"><span class=\"keyword\">if</span>(s == <span class=\"string\">\"a\"</span>)  </div><div class=\"line\">{  </div><div class=\"line\">et.RaiseEvent();  </div><div class=\"line\">}  </div><div class=\"line\"><span class=\"keyword\">else</span> </div><div class=\"line\">{  </div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"Error\"</span>);  </div><div class=\"line\">}  </div><div class=\"line\">}  </div><div class=\"line\">} </div></pre></td></tr></table></figure><br><p><br>输出结果如下，黑体为用户的输入：<br>Please input ‘a’: a<br>My event is ok!<br></p>\n\n<h4 id=\"小结\">小结</h4>\n<p><br>通过上面的讨论，我们大体上明白了C# delegate和C# event的概念，以及如何在C#中使用它们。我个人认为，delegate在C#中是一个相当重要的概念，合理运用的话，可以使一些相当复杂的问题变得 很简单。有时我甚至觉得，delegate甚至能够有指针的效果，除了不能直接访问物理地址。而且事件也是完全基于delegate来实现的。由于能力有 限，本文只是对delegate和event的应用作了一个浅显的讨论，并不深入，我希望本文能够起到抛砖引玉的作用。真正想要对这两个概念有更深入的了 解的话，还是推荐大家看MSDN。<br></p>","source":"_posts/WindowsPhone/2013-04-28-c-number-delegatehe-event.markdown","raw":"---\nlayout: post\ntitle: \"C#delegate和event\"\ndate: 2013-04-28 14:31\ncomments: true\ncategories: windowsphone\n---\n####C# Delegate概念\n<p>\n在基于Windows平台的程序设计中，事件（event）是一个很重要的概念。因为在几乎所有的Windows应用程序中，都会涉及大量的异步调 用，比如响应点击按钮、处理Windows系统消息等，这些异步调用都需要通过事件的方式来完成。即使在下一代开发平台——.NET中也不例外。\n那么什么是事件呢？所谓事件，就是由某个对象发出的消息，这个消息标志着某个特定的行为发生了，或者某个特定的条件成立了。比如用户点击了鼠标、 socket上有数据到达等。那个触发（raise）事件的对象称为事件的发送者（event sender），捕获并响应事件的对象称为事件的接收者（event receiver）。\n在这里，我们将要讨论的是，在.NET的主流开发语言C#中如何使用自定义的事件来实现我们自己的异步调用。\n在C#中，事件的实现依赖于delegate，因此我们有必要先了解一下delegate的概念。\ndelegate是C#中的一种类型，它实际上是一个能够持有对某个方法的引用的类。与其它的类不同，delegate类能够拥有一个签名 （signature），并且它只能持有与它的签名相匹配的方法的引用。它所实现的功能与C/C++中的函数指针十分相似。它允许你传递一个类A的方法m 给另一个类B的对象，使得类B的对象能够调用这个方法m。但与函数指针相比，delegate有许多函数指针不具备的优点。首先，函数指针只能指向静态函 数，而delegate既可以引用静态函数，又可以引用非静态成员函数。在引用非静态成员函数时，delegate不但保存了对此函数入口指针的引用，而 且还保存了调用此函数的类实例的引用。其次，与函数指针相比，delegate是面向对象、类型安全、可靠的受控（managed）对象。也就是 说，runtime能够保证delegate指向一个有效的方法，你无须担心delegate会指向无效地址或者越界地址。\n实现一个C# delegate是很简单的，通过以下3个步骤即可实现一个delegate：\n1． 声明一个delegate对象，它应当与你想要传递的方法具有相同的参数和返回值类型。\n2． 创建delegate对象，并将你想要传递的函数作为参数传入。\n3． 在要实现异步调用的地方，通过上一步创建的对象来调用方法。\n下面是一个简单的例子：\n\n</p>\n{% codeblock lang:csharp %}\nusing System;  \npublic class MyDelegateTest  \n{  \n// 步骤1，声明delegate对象  \npublic delegate void MyDelegate(string name);  \n// 这是我们欲传递的方法，它与MyDelegate具有相同的参数和返回值类型  \npublic static void MyDelegateFunc(string name)  \n{  \nConsole.WriteLine(\"Hello, {0}\", name);  \n}  \n \npublic static void Main()  \n{  \n// 步骤2，创建delegate对象  \nMyDelegate md = new MyDelegate(MyDelegateTest.MyDelegateFunc);  \n// 步骤3，调用delegate  \nmd(\"sam1111\");  \n}  \n} \n{% endcodeblock %}\n\n<p>\n输出结果是：Hello, sam1111\n了解了delegate，下面我们来看看，在C#中对event是如何处理的。\n</p>\n<!--more-->\n\n####C# event\n\n<p>\nC#中的事件处理实际上是一种具有特殊签名的delegate，象下面这个样子：\npublic delegate void MyEventHandler(object sender, MyEventArgs e);\n其中的两个参数，sender代表事件发送者，e是事件参数类。MyEventArgs类用来包含与事件相关的数据，所有的事件参数类都必须从 System.EventArgs类派生。当然，如果你的事件不含参数，那么可以直接用System.EventArgs类作为参数。\n就是这么简单，结合delegate的实现，我们可以将自定义事件的实现归结为以下几步：\n1． 定义delegate对象类型，它有两个参数，第一个参数是事件发送者对象，第二个参数是事件参数类对象。\n2． 定义事件参数类，此类应当从System.EventArgs类派生。如果事件不带参数，这一步可以省略。\n3． 定义事件处理方法，它应当与delegate对象具有相同的参数和返回值类型。\n4． 用C# event关键字定义事件对象，它同时也是一个delegate对象。\n5． 用+=操作符添加事件到事件队列中（-=操作符能够将事件从队列中删除）。\n6． 在需要触发事件的地方用调用delegate的方式写事件触发方法。一般来说，此方法应为protected访问限制，既不能以public方式调用，但可以被子类继承。名字是OnEventName。\n7． 在适当的地方调用事件触发方法触发事件。\n下面是一个简单的例子：\n</p>\n{% codeblock lang:csharp %}\nusing System;  \npublic class EventTest  \n{  \n// 步骤1，定义delegate对象  \npublic delegate void MyEventHandler(object sender, System.EventArgs e);  \n// 步骤2省略  \npublic class MyEventCls  \n{  \n// 步骤3，定义事件处理方法，它与delegate对象具有相同的参数和返回值类型  \npublic void MyEventFunc(object sender, System.EventArgs e)  \n{  \nConsole.WriteLine(\"My event is ok!\");  \n}  \n}  \n// 步骤4，用event关键字定义事件对象  \nprivate event MyEventHandler myevent;  \nprivate MyEventCls myecls;  \npublic EventTest()  \n{  \nmyecls = new MyEventCls();  \n// 步骤5，用+=操作符将事件添加到队列中  \nthis.myevent += new MyEventHandler(myecls.MyEventFunc);  \n}  \n// 步骤6，以调用delegate的方式写事件触发函数  \nprotected void OnMyEvent(System.EventArgs e)  \n{  \nif(myevent != null)  \nmyevent(this, e);  \n}  \n \npublic void RaiseEvent()  \n{  \nEventArgs e = new EventArgs();  \n// 步骤7，触发事件  \nOnMyEvent(e);  \n}  \n \npublic static void Main()  \n{  \nEventTest et = new EventTest();  \nConsole.Write(\"Please input a:\");  \nstring s = Console.ReadLine();  \nif(s == \"a\")  \n{  \net.RaiseEvent();  \n}  \nelse \n{  \nConsole.WriteLine(\"Error\");  \n}  \n}  \n} \n{% endcodeblock %}\n<p>\n输出结果如下，黑体为用户的输入：\nPlease input ‘a’: a\nMy event is ok!\n</p>\n\n####小结\n<p>\n通过上面的讨论，我们大体上明白了C# delegate和C# event的概念，以及如何在C#中使用它们。我个人认为，delegate在C#中是一个相当重要的概念，合理运用的话，可以使一些相当复杂的问题变得 很简单。有时我甚至觉得，delegate甚至能够有指针的效果，除了不能直接访问物理地址。而且事件也是完全基于delegate来实现的。由于能力有 限，本文只是对delegate和event的应用作了一个浅显的讨论，并不深入，我希望本文能够起到抛砖引玉的作用。真正想要对这两个概念有更深入的了 解的话，还是推荐大家看MSDN。\n</p>","slug":"WindowsPhone/2013-04-28-c-number-delegatehe-event","updated":1416373854000,"excerpt":"<h4 id=\"C#_Delegate概念\">C# Delegate概念</h4>\n<p><br>在基于Windows平台的程序设计中，事件（event）是一个很重要的概念。因为在几乎所有的Windows应用程序中，都会涉及大量的异步调 用，比如响应点击按钮、处理Windows系统消息等，这些异步调用都需要通过事件的方式来完成。即使在下一代开发平台——.NET中也不例外。<br>那么什么是事件呢？所谓事件，就是由某个对象发出的消息，这个消息标志着某个特定的行为发生了，或者某个特定的条件成立了。比如用户点击了鼠标、 socket上有数据到达等。那个触发（raise）事件的对象称为事件的发送者（event sender），捕获并响应事件的对象称为事件的接收者（event receiver）。<br>在这里，我们将要讨论的是，在.NET的主流开发语言C#中如何使用自定义的事件来实现我们自己的异步调用。<br>在C#中，事件的实现依赖于delegate，因此我们有必要先了解一下delegate的概念。<br>delegate是C#中的一种类型，它实际上是一个能够持有对某个方法的引用的类。与其它的类不同，delegate类能够拥有一个签名 （signature），并且它只能持有与它的签名相匹配的方法的引用。它所实现的功能与C/C++中的函数指针十分相似。它允许你传递一个类A的方法m 给另一个类B的对象，使得类B的对象能够调用这个方法m。但与函数指针相比，delegate有许多函数指针不具备的优点。首先，函数指针只能指向静态函 数，而delegate既可以引用静态函数，又可以引用非静态成员函数。在引用非静态成员函数时，delegate不但保存了对此函数入口指针的引用，而 且还保存了调用此函数的类实例的引用。其次，与函数指针相比，delegate是面向对象、类型安全、可靠的受控（managed）对象。也就是 说，runtime能够保证delegate指向一个有效的方法，你无须担心delegate会指向无效地址或者越界地址。<br>实现一个C# delegate是很简单的，通过以下3个步骤即可实现一个delegate：<br>1． 声明一个delegate对象，它应当与你想要传递的方法具有相同的参数和返回值类型。<br>2． 创建delegate对象，并将你想要传递的函数作为参数传入。<br>3． 在要实现异步调用的地方，通过上一步创建的对象来调用方法。<br>下面是一个简单的例子：<br><br></p><br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MyDelegateTest  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"comment\">// 步骤1，声明delegate对象  </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyDelegate</span>(<span class=\"keyword\">string</span> name);  </div><div class=\"line\"><span class=\"comment\">// 这是我们欲传递的方法，它与MyDelegate具有相同的参数和返回值类型  </span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">MyDelegateFunc</span>(<span class=\"keyword\">string</span> name)  </div><div class=\"line\">{  </div><div class=\"line\">Console.WriteLine(<span class=\"string\">\"Hello, {0}\"</span>, name);  </div><div class=\"line\">}  </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()  </div><div class=\"line\">{  </div><div class=\"line\"><span class=\"comment\">// 步骤2，创建delegate对象  </span></div><div class=\"line\">MyDelegate md = <span class=\"keyword\">new</span> MyDelegate(MyDelegateTest.MyDelegateFunc);  </div><div class=\"line\"><span class=\"comment\">// 步骤3，调用delegate  </span></div><div class=\"line\">md(<span class=\"string\">\"sam1111\"</span>);  </div><div class=\"line\">}  </div><div class=\"line\">} </div></pre></td></tr></table></figure><br><br><p><br>输出结果是：Hello, sam1111<br>了解了delegate，下面我们来看看，在C#中对event是如何处理的。<br></p><br>","_id":"sw23fsim55zg5vi3","tags":[],"photos":[],"link":""},{"layout":"post","title":"C#输出日志","date":1367805480000,"comments":true,"categories":["c9ovoo03cf11bsnn"],"content":"<p></p><p><br>windows phone debug输出日志<br></p><p></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System.Diagnostics; </div><div class=\"line\">Debug.WriteLine(<span class=\"string\">\"LogText\"</span>);</div></pre></td></tr></table></figure>\n","source":"_posts/WindowsPhone/2013-05-06-c-number-shu-chu-ri-zhi.markdown","raw":"---\nlayout: post\ntitle: \"C#输出日志\"\ndate: 2013-05-06 09:58\ncomments: true\ncategories: windowsphone\n---\n<p>\nwindows phone debug输出日志\n</p>\n{% codeblock lang:csharp %}\nusing System.Diagnostics; \nDebug.WriteLine(\"LogText\");\n{% endcodeblock %}\n","slug":"WindowsPhone/2013-05-06-c-number-shu-chu-ri-zhi","updated":1416373854000,"excerpt":"","_id":"ao5zx87knwkrxcdk","tags":[],"photos":[],"link":""},{"title":"使用python编译ipa，并上传到FTP","date":1416374673000,"tags":["i6a8xp2otmmlojjw"],"content":"<p><br>人工发布版本需要archive完之后、拖到itunes里、再把ipa上传到FTP上、费时费力、下面的这个python脚本可以自动完成这些工作、而且完成的时候、发出通知、并把ipa的ftp地址放到粘贴板里。<br><a href=\"https://github.com/DevilMayCry4/python/blob/master/build.py\" target=\"_blank\" rel=\"external\">脚本地址</a><br></p><p><br><br></p><p><br>这个脚本只需要设置<br>DefaultProjectDir:默认的工程文件所在文件夹,或者工程文件的路径。<br>OutPutDir：#ipa 文件输出的文件夹<br>还有些ftp的设置<br>ipa的名字是productname+.月+.日,<br>如果输出文件夹已经有该名字，会在后面加上数字、依次递增<br></p>\n\n<p><br>可以在终端中执行这个脚本、这个脚本可以接收程文件所在文件夹,或者工程文件的路径的参数，如果没有使用默认的路径。形如：python /users/user/build.py /users/user/documents/project<br></p><br><p><br>也可以给这个脚本执行的权限、就不用写得这么复杂，<br>先执行:chmod +x  /users/user/build.py<br>在添加环境变量：vim .profile<br>加上 export PATH=/users/user/build.py:$PATH<br>执行的时候使用：./build.py  /users/user/documents/project<br></p>","source":"_posts/使用python编译ipa，并上传到FTP.md","raw":"title: 使用python编译ipa，并上传到FTP\ndate: 2014-11-19 13:24:33\ntags: IOS\n---\n<p>\n人工发布版本需要archive完之后、拖到itunes里、再把ipa上传到FTP上、费时费力、下面的这个python脚本可以自动完成这些工作、而且完成的时候、发出通知、并把ipa的ftp地址放到粘贴板里。\n<a href=\"https://github.com/DevilMayCry4/python/blob/master/build.py\">脚本地址</a>\n<p>\n\n<p>\n这个脚本只需要设置\nDefaultProjectDir:默认的工程文件所在文件夹,或者工程文件的路径。\nOutPutDir：#ipa 文件输出的文件夹\n还有些ftp的设置\nipa的名字是productname+.月+.日,\n如果输出文件夹已经有该名字，会在后面加上数字、依次递增\n</p>\n\n<p>\n可以在终端中执行这个脚本、这个脚本可以接收程文件所在文件夹,或者工程文件的路径的参数，如果没有使用默认的路径。形如：python /users/user/build.py /users/user/documents/project\n</p>\n<p>\n也可以给这个脚本执行的权限、就不用写得这么复杂，\n先执行:chmod +x  /users/user/build.py\n在添加环境变量：vim .profile\n加上 export PATH=/users/user/build.py:$PATH\n执行的时候使用：./build.py  /users/user/documents/project\n</p>","slug":"使用python编译ipa，并上传到FTP","updated":1416376872000,"excerpt":"","_id":"fr4w40p512tvgpz7","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"IOS","_id":"i6a8xp2otmmlojjw","posts":["offcssrkdbc3q5t0","do0ugcln1z9k2ihu","amobbm1ykslzlbq0","r6xa2mfoqyvta1lb","td6n8xdtzuyrq9er","9v4xe2c5cx7cgcfy","gmkm0w9ygcfbtlwt","gz5vpg0tmwjd6xh1","8x8uvydwhlnxfa9n","mw5o0vkk1oloozr7","gnovvkzptekn2h6g","w3mzi4jeti44xtt0","ko4v4upjxtc4rkfk","n0quu9li3014qh0o","hu6alzx0b38bii2p","fr4w40p512tvgpz7"]}]}